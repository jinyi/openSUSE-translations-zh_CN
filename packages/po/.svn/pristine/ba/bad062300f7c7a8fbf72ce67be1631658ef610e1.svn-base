# This file was automatically generated
# margurite <i@marguerite.su>, 2012.
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2012-06-21 16:20:41\n"
"PO-Revision-Date: 2012-05-12 16:55+0800\n"
"Last-Translator: margurite <i@marguerite.su>\n"
"Language-Team: Chinese Traditional <kde-i18n-doc@kde.org>\n"
"Language: zh_TW\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8-bit\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"
"X-Generator: Lokalize 1.4\n"

#. description(perl-MooseX-Types-LoadableClass)
msgid ""
"    use Moose::Util::TypeConstraints;\n"
"\n"
"    my $tc = subtype as ClassName;     coerce $tc, from Str, via { Class::MOP::load_class($_); $_ };\n"
"\n"
"I've written those three lines of code quite a lot of times, in quite a lot of places.\n"
"\n"
"Now I don't have to."
msgstr ""

#. description(perl-JSON)
msgid ""
" ************************** CAUTION ********************************  * This is 'JSON module version 2' and there are many differences  *  * to version 1.xx                                                 *  * Please check your applications useing old version.              *  *   See to 'INCOMPATIBLE CHANGES TO OLD VERSION'                  *  *******************************************************************\n"
"\n"
"JSON (JavaScript Object Notation) is a simple data format. See to the http://www.json.org/ manpage and 'RFC4627'(the http://www.ietf.org/rfc/rfc4627.txt manpage).\n"
"\n"
"This module converts Perl data structures to JSON and vice versa using either the JSON::XS manpage or the JSON::PP manpage.\n"
"\n"
"JSON::XS is the fastest and most proper JSON module on CPAN which must be compiled and installed in your environment. JSON::PP is a pure-Perl module which is bundled in this distribution and has a strong compatibility to JSON::XS.\n"
"\n"
"This module try to use JSON::XS by default and fail to it, use JSON::PP instead. So its features completely depend on JSON::XS or JSON::PP.\n"
"\n"
"See to the BACKEND MODULE DECISION manpage.\n"
"\n"
"To distinguish the module name 'JSON' and the format type JSON, the former is quoted by C<> (its results vary with your using media), and the latter is left just as it is.\n"
"\n"
"Module name : 'JSON'\n"
"\n"
"Format type : JSON"
msgstr ""

#. description(perl-Class-Spiffy)
msgid "\"Class::Spiffy\" is a framework and methodology for doing object oriented (OO) programming in Perl. Class::Spiffy combines the best parts of Exporter.pm, base.pm, mixin.pm and SUPER.pm into one magic foundation class. It attempts to fix all the nits and warts of traditional Perl OO, in a clean, straightforward and (perhaps someday) standard way."
msgstr ""

#. description(perl-NetPacket)
msgid "\"NetPacket\" provides a base class for a cluster of modules related to decoding and encoding of network protocols. Each \"NetPacket\" descendent module knows how to encode and decode packets for the network protocol it implements. Consult the documentation for the module in question for protocol-specific implementation. Note that there is no inheritance in the \"NetPacket::\" cluster of modules other than each protocol module being a \"NetPacket\". This was seen to be too restrictive as imposing inheritance relationships (for example between the IP, UDP and TCP protocols) would make things like tunneling or other unusual situations difficult."
msgstr ""

#. description(perl-App-CLI)
msgid ""
"'App::CLI' dispatches CLI (command line interface) based commands into command classes. It also supports subcommand and per-command options.\n"
"\n"
"get_opt([@config], %opt_map)         give options map, process by Getopt::Long::Parser\n"
"\n"
"interface of dispatcher\n"
"\n"
"cmd_map($cmd)     find package name of subcommand in constant %alias\n"
"\n"
"    if it's finded, return ucfirst of the package name,\n"
"\n"
"    otherwise, return ucfirst of $cmd itself.\n"
"\n"
"get_cmd($cmd, @arg)     return subcommand of first level via $ARGV[0]"
msgstr ""

#. description(perl-B-Keywords)
msgid ""
"'B::Keywords' supplies seven arrays of keywords: '@Scalars', '@Arrays', '@Hashes', '@Filehandles', '@Symbols', '@Functions', and '@Barewords'. The '@Symbols' array includes the contents of each of '@Scalars', '@Arrays', '@Hashes', '@Functions' and '@Filehandles'. Similarly, '@Barewords' adds a few non-function keywords and operators to the '@Functions' array.\n"
"\n"
"All additions and modifications are welcome."
msgstr ""

#. description(perl-CPANPLUS-Dist-Build)
msgid ""
"'CPANPLUS::Dist::Build' is a distribution class for 'Module::Build' related modules. Using this package, you can create, install and uninstall perl modules. It inherits from 'CPANPLUS::Dist'.\n"
"\n"
"Normal users won't have to worry about the interface to this module, as it functions transparently as a plug-in to 'CPANPLUS' and will just 'Do The Right Thing' when it's loaded."
msgstr ""

#. description(perl-Config-Tiny)
msgid ""
"'Config::Tiny' is a perl class to read and write .ini style configuration files with as little code as possible, reducing load time and memory overhead. Most of the time it is accepted that Perl applications use a lot of memory and modules. The '::Tiny' family of modules is specifically intended to provide an ultralight alternative to the standard modules.\n"
"\n"
"This module is primarily for reading human written files, and anything we write shouldn't need to have documentation/comments. If you need something with more power move up to the Config::Simple manpage, the Config::General manpage or one of the many other 'Config::' modules. To rephrase, the Config::Tiny manpage does *not* preserve your comments, whitespace, or the order of your config file."
msgstr ""

#. description(perl-Email-Simple)
msgid "'Email::Simple' is the first deliverable of the \"Perl Email Project.\" The Email:: namespace was begun as a reaction against the increasing complexity and bugginess of Perl's existing email modules. 'Email::*' modules are meant to be simple to use and to maintain, pared to the bone, fast, minimal in their external dependencies, and correct."
msgstr ""

#. description(perl-Log-Any)
msgid ""
"'Log::Any' allows CPAN modules to safely and efficiently log messages, while letting the application choose (or decline to choose) a logging mechanism such as 'Log::Dispatch' or 'Log::Log4perl'.\n"
"\n"
"'Log::Any' has a very tiny footprint and no dependencies beyond Perl 5.6, which makes it appropriate for even small CPAN modules to use. It defaults to 'null' logging activity, so a module can safely log without worrying about whether the application has chosen (or will ever choose) a logging mechanism.\n"
"\n"
"The application, in turn, may choose one or more logging mechanisms via Log::Any::Adapter."
msgstr ""

#. description(perl-Mail-Sender)
msgid ""
"'Mail::Sender' provides an object oriented interface to sending mails. It doesn't need any outer program. It connects to a mail server directly from Perl, using Socket.\n"
"\n"
"Sends mails directly from Perl through a socket connection."
msgstr ""

#. description(perl-MooseX-NonMoose)
msgid ""
"'MooseX::NonMoose' allows for easily subclassing non-Moose classes with Moose, taking care of the annoying details connected with doing this, such as setting up proper inheritance from the Moose::Object manpage and installing (and inlining, at 'make_immutable' time) a constructor that makes sure things like 'BUILD' methods are called. It tries to be as non-intrusive as possible - when this module is used, inheriting from non-Moose classes and inheriting from Moose classes should work identically, aside from the few caveats mentioned below. One of the goals of this module is that including it in a the Moose::Exporter manpage-based package used across an entire application should be possible, without interfering with classes that only inherit from Moose modules, or even classes that don't inherit from anything at all.\n"
"\n"
"There are several ways to use this module. The most straightforward is to just 'use MooseX::NonMoose;' in your class; this should set up everything necessary for extending non-Moose modules. the MooseX::NonMoose::Meta::Role::Class manpage and the MooseX::NonMoose::Meta::Role::Constructor manpage can also be applied to your metaclasses manually, either by passing a '-traits' option to your 'use Moose;' line, or by applying them using the Moose::Util::MetaRole manpage in a the Moose::Exporter manpage-based package. the MooseX::NonMoose::Meta::Role::Class manpage is the part that provides the main functionality of this module; if you don't care about inlining, this is all you need to worry about. Applying the MooseX::NonMoose::Meta::Role::Constructor manpage as well will provide an inlined constructor when you immutabilize your class.\n"
"\n"
"'MooseX::NonMoose' allows you to manipulate the argument list that gets passed to the superclass constructor by defining a 'FOREIGNBUILDARGS' method. This is called with the same argument list as the 'BUILDARGS' method, but should return a list of arguments to pass to the superclass constructor. This allows 'MooseX::NonMoose' to support superclasses whose constructors would get confused by the extra arguments that Moose requires (for attributes, etc.)\n"
"\n"
"Not all non-Moose classes use 'new' as the name of their constructor. This module allows you to extend these classes by explicitly stating which method is the constructor, during the call to 'extends'. The syntax looks like this:\n"
"\n"
"  extends 'Foo' => { -constructor_name => 'create' };\n"
"\n"
"similar to how you can already pass '-version' in the 'extends' call in a similar way."
msgstr ""

#. description(perl-Net-CIDR-Set)
msgid ""
"'Net::CIDR::Set' represents sets of IP addresses and allows standard set operations (union, intersection, membership test etc) to be performed on them.\n"
"\n"
"In spite of the name it can work with sets consisting of arbitrary ranges of IP addresses - not just CIDR blocks.\n"
"\n"
"Both IPv4 and IPv6 addresses are handled - but they may not be mixed in the same set. You may explicitly set the personality of a set:\n"
"\n"
"  my $ip4set = Net::CIDR::Set->new({ type => 'ipv4 }, '10.0.0.0/8');\n"
"\n"
"Normally this isn't necessary - the set will guess its personality from the first data that is added to it."
msgstr ""

#. description(perl-Package-Constants)
msgid "'Package::Constants' lists all the constants defined in a certain package. This can be useful for, among others, setting up an autogenerated '@EXPORT/@EXPORT_OK' for a Constants.pm file."
msgstr ""

#. description(perl-Path-Class)
msgid ""
"'Path::Class' is a module for manipulation of file and directory specifications (strings describing their locations, like ''/home/ken/foo.txt'' or ''C:\\Windows\\Foo.txt'') in a cross-platform manner. It supports pretty much every platform Perl runs on, including Unix, Windows, Mac, VMS, Epoc, Cygwin, OS/2, and NetWare.\n"
"\n"
"The well-known module 'File::Spec' also provides this service, but it's sort of awkward to use well, so people sometimes avoid it, or use it in a way that won't actually work properly on platforms significantly different than the ones they've tested their code on.\n"
"\n"
"In fact, 'Path::Class' uses 'File::Spec' internally, wrapping all the unsightly details so you can concentrate on your application code. Whereas 'File::Spec' provides functions for some common path manipulations, 'Path::Class' provides an object-oriented model of the world of path specifications and their underlying semantics. 'File::Spec' doesn't create any objects, and its classes represent the different ways in which paths must be manipulated on various platforms (not a very intuitive concept). 'Path::Class' creates objects representing files and directories, and provides methods that relate them to each other. For instance, the following 'File::Spec' code:\n"
"\n"
" my $absolute = File::Spec->file_name_is_absolute(                   File::Spec->catfile( @dirs, $file )                 );\n"
"\n"
"can be written using 'Path::Class' as\n"
"\n"
" my $absolute = Path::Class::File->new( @dirs, $file )->is_absolute;\n"
"\n"
"or even as\n"
"\n"
" my $absolute = file( @dirs, $file )->is_absolute;\n"
"\n"
"Similar readability improvements should happen all over the place when using 'Path::Class'.\n"
"\n"
"Using 'Path::Class' can help solve real problems in your code too - for instance, how many people actually take the \"volume\" (like 'C:' on Windows) into account when writing 'File::Spec'-using code? I thought not. But if you use 'Path::Class', your file and directory objects will know what volumes they refer to and do the right thing.\n"
"\n"
"The guts of the 'Path::Class' code live in the 'Path::Class::File' and 'Path::Class::Dir' modules, so please see those modules' documentation for more details about how to use them."
msgstr ""

#. description(perl-PerlIO-via-dynamic)
msgid ""
"'PerlIO::via::dynamic' is used for creating dynamic the PerlIO manpage layers. It is useful when the behavior or the layer depends on variables. You should not use this module as via layer directly (ie :via(dynamic)).\n"
"\n"
"Use the constructor to create new layers, with two arguments: translate and untranslate. Then use '$p-'via ($fh)> to wrap the handle. Once <$fh> is destroyed, the temporary namespace for the IO layer will be removed.\n"
"\n"
"Note that PerlIO::via::dynamic uses the scalar fields to reference to the object representing the dynamic namespace."
msgstr ""

#. description(perl-Test-Command)
msgid ""
"'Test::Command' intends to bridge the gap between the well tested functions and objects you choose and their usage in your programs. By examining the exit status, terminating signal, STDOUT and STDERR of your program you can determine if it is behaving as expected.\n"
"\n"
"This includes testing the various combinations and permutations of options and arguments as well as the interactions between the various functions and objects that make up your program.\n"
"\n"
"The various test functions below can accept either a command string or an array reference for the first argument. If the command is expressed as a string it is passed to 'system' as is. If the command is expressed as an array reference it is dereferenced and passed to 'system' as a list. See ''perldoc -f system'' for how these may differ.\n"
"\n"
"The final argument for the test functions, '$name', is optional. By default the '$name' is a concatenation of the test function name, the command string and the expected value. This construction is generally sufficient for identifying a failing test, but you may always specify your own '$name' if desired.\n"
"\n"
"Any of the test functions can be used as instance methods on a 'Test::Command' object. This is done by dropping the initial '$cmd' argument and instead using arrow notation.\n"
"\n"
"All of the following 'exit_is_num' calls are equivalent.\n"
"\n"
"   exit_is_num('true', 0);    exit_is_num('true', 0, 'exit_is_num: true, 0');    exit_is_num(['true'], 0);    exit_is_num(['true'], 0, 'exit_is_num: true, 0');\n"
"\n"
"   my $cmd = Test::Command->new( cmd => 'true' );\n"
"\n"
"   exit_is_num($cmd, 0);    exit_is_num($cmd, 0, 'exit_is_num: true, 0');    $cmd->exit_is_num(0);    $cmd->exit_is_num(0, 'exit_is_num: true, 0');\n"
"\n"
"   $cmd = Test::Command->new( cmd => ['true'] );\n"
"\n"
"   exit_is_num($cmd, 0);    exit_is_num($cmd, 0, 'exit_is_num: true, 0');    $cmd->exit_is_num(0);    $cmd->exit_is_num(0, 'exit_is_num: true, 0');"
msgstr ""

#. description(perl-Test-Spelling)
msgid ""
"'Test::Spelling' lets you check the spelling of a POD file, and report its results in standard 'Test::More' fashion. This module requires a spellcheck program such as _spell_, _aspell_, _ispell_, or _hunspell_.\n"
"\n"
"    use Test::Spelling;     pod_file_spelling_ok('lib/Foo/Bar.pm', 'POD file spelling OK');\n"
"\n"
"Note that it is a bad idea to run spelling tests during an ordinary CPAN distribution install, or in a package that will run in an uncontrolled environment. There is no way of predicting whether the word list or spellcheck program used will give the same results. You *can* include the test in your distribution, but be sure to run it only for authors of the module by guarding it in a 'skip_all unless -d 'inc/.author'' clause, or by putting the test in your distribution's _xt/_ directory. Anyway, people installing your module really do not need to run such tests, as it is unlikely that the documentation will acquire typos while in transit. :-)\n"
"\n"
"You can add your own stop words, which are words that should be ignored by the spell check, like so:\n"
"\n"
"    add_stopwords(qw(asdf thiswordiscorrect));\n"
"\n"
"Adding stop words in this fashion affects all files checked for the remainder of the test script. See the Pod::Spell manpage (which this module is built upon) for a variety of ways to add per-file stop words to each .pm file.\n"
"\n"
"If you have a lot of stop words, it's useful to put them in your test file's 'DATA' section like so:\n"
"\n"
"    use Test::Spelling;     add_stopwords(<DATA>);     all_pod_files_spelling_ok();\n"
"\n"
"    __END__     folksonomy     Jifty     Zakirov\n"
"\n"
"To maintain backwards compatibility, comment markers and some whitespace are ignored. In the near future, the preprocessing we do on the arguments to the add_stopwords manpage will be changed and documented properly."
msgstr ""

#. description(perl-Class-Load)
msgid ""
"'require EXPR' only accepts 'Class/Name.pm' style module names, not 'Class::Name'. How frustrating! For that, we provide 'load_class 'Class::Name''.\n"
"\n"
"It's often useful to test whether a module can be loaded, instead of throwing an error when it's not available. For that, we provide 'try_load_class 'Class::Name''.\n"
"\n"
"Finally, sometimes we need to know whether a particular class has been loaded. Asking '%INC' is an option, but that will miss inner packages and any class for which the filename does not correspond to the package name. For that, we provide 'is_class_loaded 'Class::Name''."
msgstr ""

#. description(php5-pear-Horde_Scheduler)
msgid ""
"* First stable release for Horde 4.\n"
"* [jan] Allow to autoload scheduler classes (Bug #10783).\n"
"* Removed Horde-specific command line script."
msgstr ""

#. description(perl-HTML-FormHandler)
msgid ""
"*** Although documentation in this file provides some overview, it is mainly intended for API documentation. See the HTML::FormHandler::Manual::Intro manpage for a more detailed introduction.\n"
"\n"
"HTML::FormHandler maintains a clean separation between form construction and form rendering. It allows you to define your forms and fields in a number of flexible ways. Although it provides renderers for HTML, you can define custom renderers for any kind of presentation.\n"
"\n"
"HTML::FormHandler allows you to define form fields and validators. It can be used for both database and non-database forms, and will automatically update or create rows in a database. It can be used to process structured data that doesn't come from an HTML form.\n"
"\n"
"One of its goals is to keep the controller/application program interface as simple as possible, and to minimize the duplication of code. In most cases, interfacing your controller to your form is only a few lines of code.\n"
"\n"
"With FormHandler you'll never spend hours trying to figure out how to make a simple HTML change that would take one minute by hand. Because you CAN do it by hand. Or you can automate HTML generation as much as you want, with template widgets or pure Perl rendering classes, and stay completely in control of what, where, and how much is done automatically. You can define custom renderers and display your rendered forms however you want.\n"
"\n"
"You can split the pieces of your forms up into logical parts and compose complete forms from FormHandler classes, roles, fields, collections of validations, transformations and Moose type constraints. You can write custom methods to process forms, add any attribute you like, use Moose method modifiers. FormHandler forms are Perl classes, so there's a lot of flexibility in what you can do.\n"
"\n"
"HTML::FormHandler provides rendering through roles which are applied to form and field classes (although there's no reason you couldn't write a renderer as an external object either). There are currently two flavors: all-in-one solutions like the HTML::FormHandler::Render::Simple manpage and the HTML::FormHandler::Render::Table manpage that contain methods for rendering field widget classes, and the the HTML::FormHandler::Widget manpage roles, which are more atomic roles which are automatically applied to fields and form if a 'render' method does not already exist. See the HTML::FormHandler::Manual::Rendering manpage for more details. (And you can easily use hand-build forms - FormHandler doesn't care.)\n"
"\n"
"The typical application for FormHandler would be in a Catalyst, DBIx::Class, Template Toolkit web application, but use is not limited to that. FormHandler can be used in any Perl application.\n"
"\n"
"More Formhandler documentation and a tutorial can be found in the manual at the HTML::FormHandler::Manual manpage."
msgstr ""

#. description(perl-DateTime-Tiny)
msgid ""
"*DateTime::Tiny* is a most prominent member of the the DateTime::Tiny manpage suite of time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a datetime.\n"
"\n"
"The Tiny Mandate     Many CPAN modules which provide the best implementation of a certain     concepts are very large. For some reason, this generally seems to be     about 3 megabyte of ram usage to load the module.\n"
"\n"
"    For a lot of the situations in which these large and comprehensive     implementations exist, some people will only need a small fraction of     the functionality, or only need this functionality in an ancillary     role.\n"
"\n"
"    The aim of the Tiny modules is to implement an alternative to the large     module that implements a useful subset of their functionality, using as     little code as possible.\n"
"\n"
"    Typically, this means a module that implements between 50% and 80% of     the features of the larger module (although this is just a guideline),     but using only 100 kilobytes of code, which is about 1/30th of the     larger module.\n"
"\n"
"The Concept of Tiny Date and Time     Due to the inherent complexity, Date and Time is intrinsically very     difficult to implement properly.\n"
"\n"
"    The arguably *only* module to implement it completely correct is the     DateTime manpage. However, to implement it properly the DateTime     manpage is quite slow and requires 3-4 megabytes of memory to load.\n"
"\n"
"    The challenge in implementing a Tiny equivalent to DateTime is to do so     without making the functionality critically flawed, and to carefully     select the subset of functionality to implement.\n"
"\n"
"    If you look at where the main complexity and cost exists, you will find     that it is relatively cheap to represent a date or time as an object,     but much much more expensive to modify, manipulate or convert the     object.\n"
"\n"
"    As a result, *DateTime::Tiny* provides the functionality required to     represent a date as an object, to stringify the date and to parse it     back in, but does *not* allow you to modify the dates.\n"
"\n"
"    The purpose of this is to allow for date object representations in     situations like log parsing and fast real-time type work.\n"
"\n"
"    The problem with this is that having no ability to modify date limits     the usefulness greatly.\n"
"\n"
"    To make up for this, *if* you have the DateTime manpage installed, any     *DateTime::Tiny* module can be inflated into the equivalent the     DateTime manpage as needing, loading the DateTime manpage on the fly if     necesary.\n"
"\n"
"    This is somewhat similar to DateTime::LazyInit, but unlike that module     *DateTime::Tiny* is not modifiable.\n"
"\n"
"    For the purposes of date/time logic, all *DateTime::Tiny* objects exist     in the \"C\" locale, and the \"floating\" time zone. This may be improved     in the future if a suitably tiny way of handling timezones is found.\n"
"\n"
"    When converting up to full the DateTime manpage objects, these local     and time zone settings will be applied (although an ability is provided     to override this).\n"
"\n"
"    In addition, the implementation is strictly correct and is intended to     be very easily to sub-class for specific purposes of your own."
msgstr ""

#. description(perl-File-HomeDir)
msgid ""
"*File::HomeDir* is a module for locating the directories that are \"owned\" by a user (typicaly your user) and to solve the various issues that arise trying to find them consistently across a wide variety of platforms.\n"
"\n"
"The end result is a single API that can find your resources on any platform, making it relatively trivial to create Perl software that works elegantly and correctly no matter where you run it.\n"
"\n"
"This module provides two main interfaces.\n"
"\n"
"The first is a modern the File::Spec manpage-style interface with a consistent OO API and different implementation modules to support various platforms. You are *strongly* recommended to use this interface.\n"
"\n"
"The second interface is for legacy support of the original 0.07 interface that exported a 'home()' function by default and tied the '%~' variable.\n"
"\n"
"It is generally not recommended that you use this interface, but due to back-compatibility reasons they will remain supported until at least 2010.\n"
"\n"
"The '%~' interface has been deprecated. Documentation was removed in 2009, Unit test were removed in 2011, usage will issue warnings from 2013, and the interface will be removed entirely in 2015 (in line with the general Perl toolchain convention of a 10 year support period for legacy APIs that are potentially or actually in common use)."
msgstr ""

#. description(perl-File-Remove)
msgid ""
"*File::Remove::remove* removes files and directories. It acts like\n"
"*/bin/rm*, for the most part. Although 'unlink' can be given a list of files, it will not remove directories; this module remedies that. It also accepts wildcards, * and ?, as arguments for filenames.\n"
"\n"
"*File::Remove::trash* accepts the same arguments as *remove*, with the addition of an optional, infrequently used \"other platforms\" hashref."
msgstr ""

#. description(perl-Math-Round)
msgid "*Math::Round* supplies functions that will round numbers in different ways. The functions *round* and *nearest* are exported by default; others are available as described below. \"use ... qw(:all)\" exports all functions."
msgstr ""

#. description(perl-Module-Install)
msgid ""
"*Module::Install* is a package for writing installers for CPAN (or CPAN-like) distributions that are clean, simple, minimalist, act in a strictly correct manner with the ExtUtils::MakeMaker manpage, and will run on any Perl installation version 5.005 or newer.\n"
"\n"
"The intent is to make it as easy as possible for CPAN authors (and especially for first-time CPAN authors) to have installers that follow all the best practices for distribution installation, but involve as much DWIM (Do What I Mean) as possible when writing them."
msgstr ""

#. description(perl-Module-Signature)
msgid ""
"*Module::Signature* adds cryptographic authentications to CPAN distributions, via the special _SIGNATURE_ file.\n"
"\n"
"If you are a module user, all you have to do is to remember to run 'cpansign -v' (or just 'cpansign') before issuing 'perl Makefile.PL' or 'perl Build.PL'; that will ensure the distribution has not been tampered with.\n"
"\n"
"Module authors can easily add the _SIGNATURE_ file to the distribution tarball; see the /NOTES manpage below for how to do it as part of 'make dist'.\n"
"\n"
"If you _really_ want to sign a distribution manually, simply add 'SIGNATURE' to _MANIFEST_, then type 'cpansign -s' immediately before 'make dist'. Be sure to delete the _SIGNATURE_ file afterwards.\n"
"\n"
"Please also see the /NOTES manpage about _MANIFEST.SKIP_ issues, especially if you are using *Module::Build* or writing your own _MANIFEST.SKIP_."
msgstr ""

#. description(perl-Parse-CPAN-Meta)
msgid ""
"*Parse::CPAN::Meta* is a parser for _META.json_ and _META.yml_ files, using the JSON::PP manpage and/or the CPAN::Meta::YAML manpage.\n"
"\n"
"*Parse::CPAN::Meta* provides three methods: 'load_file', 'load_json_string', and 'load_yaml_string'. These will read and deserialize CPAN metafiles, and are described below in detail.\n"
"\n"
"*Parse::CPAN::Meta* provides a legacy API of only two functions, based on the YAML functions of the same name. Wherever possible, identical calling semantics are used. These may only be used with YAML sources.\n"
"\n"
"All error reporting is done with exceptions (die'ing).\n"
"\n"
"Note that META files are expected to be in UTF-8 encoding, only. When converted string data, it must first be decoded from UTF-8."
msgstr ""

#. description(perl-Time-Tiny)
msgid ""
"*Time::Tiny* is a member of the the DateTime::Tiny manpage suite of time modules.\n"
"\n"
"It implements an extremely lightweight object that represents a time, without any time data.\n"
"\n"
"The Tiny Mandate     Many CPAN modules which provide the best implementation of a concept     can be very large. For some reason, this generally seems to be about 3     megabyte of ram usage to load the module.\n"
"\n"
"    For a lot of the situations in which these large and comprehensive     implementations exist, some people will only need a small fraction of     the functionality, or only need this functionality in an ancillary     role.\n"
"\n"
"    The aim of the Tiny modules is to implement an alternative to the large     module that implements a subset of the functionality, using as little     code as possible.\n"
"\n"
"    Typically, this means a module that implements between 50% and 80% of     the features of the larger module, but using only 100 kilobytes of     code, which is about 1/30th of the larger module.\n"
"\n"
"The Concept of Tiny Date and Time     Due to the inherent complexity, Date and Time is intrinsically very     difficult to implement properly.\n"
"\n"
"    The arguably *only* module to implement it completely correct is the     DateTime manpage. However, to implement it properly the DateTime     manpage is quite slow and requires 3-4 megabytes of memory to load.\n"
"\n"
"    The challenge in implementing a Tiny equivalent to DateTime is to do so     without making the functionality critically flawed, and to carefully     select the subset of functionality to implement.\n"
"\n"
"    If you look at where the main complexity and cost exists, you will find     that it is relatively cheap to represent a date or time as an object,     but much much more expensive to modify or convert the object.\n"
"\n"
"    As a result, *Time::Tiny* provides the functionality required to     represent a date as an object, to stringify the date and to parse it     back in, but does *not* allow you to modify the dates.\n"
"\n"
"    The purpose of this is to allow for date object representations in     situations like log parsing and fast real-time work.\n"
"\n"
"    The problem with this is that having no ability to modify date limits     the usefulness greatly.\n"
"\n"
"    To make up for this, *if* you have the DateTime manpage installed, any     *Time::Tiny* module can be inflated into the equivalent the DateTime     manpage as needing, loading the DateTime manpage on the fly if     necesary.\n"
"\n"
"    For the purposes of date/time logic, all *Time::Tiny* objects exist in     the \"C\" locale, and the \"floating\" time zone (although obviously in a     pure date context, the time zone largely doesn't matter).\n"
"\n"
"    When converting up to full the DateTime manpage objects, these local     and time zone settings will be applied (although an ability is provided     to override this).\n"
"\n"
"    In addition, the implementation is strictly correct and is intended to     be very easily to sub-class for specific purposes of your own."
msgstr ""

#. description(perl-YAML-Tiny)
msgid ""
"*YAML::Tiny* is a perl class for reading and writing YAML-style files, written with as little code as possible, reducing load time and memory overhead.\n"
"\n"
"Most of the time it is accepted that Perl applications use a lot of memory and modules. The *::Tiny* family of modules is specifically intended to provide an ultralight and zero-dependency alternative to many more-thorough standard modules.\n"
"\n"
"This module is primarily for reading human-written files (like simple config files) and generating very simple human-readable files. Note that I said *human-readable* and not *geek-readable*. The sort of files that your average manager or secretary should be able to look at and make sense of.\n"
"\n"
"the YAML::Tiny manpage does not generate comments, it won't necesarily preserve the order of your hashes, and it will normalise if reading in and writing out again.\n"
"\n"
"It only supports a very basic subset of the full YAML specification.\n"
"\n"
"Usage is targetted at files like Perl's META.yml, for which a small and easily-embeddable module is extremely attractive.\n"
"\n"
"Features will only be added if they are human readable, and can be written in a few lines of code. Please don't be offended if your request is refused. Someone has to draw the line, and for YAML::Tiny that someone is me.\n"
"\n"
"If you need something with more power move up to the YAML manpage (4 megabytes of memory overhead) or the YAML::Syck manpage (275k, but requires libsyck and a C compiler).\n"
"\n"
"To restate, the YAML::Tiny manpage does *not* preserve your comments, whitespace, or the order of your YAML data. But it should round-trip from Perl structure to file and back again just fine."
msgstr ""

#. description(perl-CPAN-Meta-Requirements)
msgid ""
"A CPAN::Meta::Requirements object models a set of version constraints like those specified in the _META.yml_ or _META.json_ files in CPAN distributions. It can be built up by adding more and more constraints, and it will reduce them to the simplest representation.\n"
"\n"
"Logically impossible constraints will be identified immediately by thrown exceptions."
msgstr ""

#. summary(perl-Test-Base)
msgid "A Data Driven Testing Framework"
msgstr ""

#. summary(perl-Task-Kensho-Async)
msgid "A Glimpse at an Enlightened Perl (Async)"
msgstr ""

#. summary(perl-Task-Kensho-CLI)
msgid "A Glimpse at an Enlightened Perl (CLI)"
msgstr ""

#. summary(perl-Task-Kensho-Config)
msgid "A Glimpse at an Enlightened Perl (Config)"
msgstr ""

#. summary(perl-Task-Kensho-Dates)
msgid "A Glimpse at an Enlightened Perl (Dates)"
msgstr ""

#. summary(perl-Task-Kensho-Exceptions)
msgid "A Glimpse at an Enlightened Perl (Exceptions)"
msgstr ""

#. summary(perl-Task-Kensho-ModuleDev)
msgid "A Glimpse at an Enlightened Perl (ModuleDev)"
msgstr ""

#. summary(perl-Task-Kensho-OOP)
msgid "A Glimpse at an Enlightened Perl (OOP)"
msgstr ""

#. summary(perl-Task-Kensho-Scalability)
msgid "A Glimpse at an Enlightened Perl (Scalability)"
msgstr ""

#. summary(perl-Task-Kensho-Testing)
msgid "A Glimpse at an Enlightened Perl (Testing)"
msgstr ""

#. summary(perl-Task-Kensho-WebCrawling)
msgid "A Glimpse at an Enlightened Perl (WebCrawling)"
msgstr ""

#. summary(perl-Task-Kensho-XML)
msgid "A Glimpse at an Enlightened Perl (XML)"
msgstr ""

#. description(perl-Gravatar-URL)
msgid ""
"A Gravatar is a Globally Recognized Avatar for a given email address. This allows you to have a global picture associated with your email address. You can look up the Gravatar for any email address by constructing a URL to get the image from the gravatar.com manpage. This module does that.\n"
"\n"
"Examples of use include the author faces on the http://search.cpan.org manpage.\n"
"\n"
"See the http://gravatar.com manpage for more info."
msgstr ""

#. summary(perl-MooseX-LazyLogDispatch)
msgid "A Logging Role for Moose"
msgstr ""

#. summary(perl-MooseX-Log-Log4perl)
msgid "A Logging Role for Moose based on Log::Log4perl"
msgstr ""

#. summary(perl-MooseX-Getopt)
msgid "A Moose role for processing command line options"
msgstr ""

#. summary(perl-MooseX-Types-Path-Class)
msgid "A Path::Class type library for Moose"
msgstr ""

#. summary(perl-CGI-Simple)
msgid "A Simple totally OO CGI interface that is CGI.pm compliant"
msgstr ""

#. description(perl-Version-Requirements)
msgid ""
"A Version::Requirements object models a set of version constraints like those specified in the _META.yml_ or _META.json_ files in CPAN distributions. It can be built up by adding more and more constraints, and it will reduce them to the simplest representation.\n"
"\n"
"Logically impossible constraints will be identified immediately by thrown exceptions."
msgstr ""

#. description(perl-Params-Coerce)
msgid ""
"A big part of good API design is that we should be able to be flexible in the ways that we take parameters.\n"
"\n"
"Params::Coerce attempts to encourage this, by making it easier to take a variety of different arguments, while adding negligable additional complexity to your code.\n"
"\n"
"Author:\n"
"-------     Adam Kennedy <adamk@cpan.org>"
msgstr ""

#. summary(perl-DateTime-Tiny)
msgid "A date object, with as little code as possible"
msgstr ""

#. description(php5-pear-Horde_Injector)
msgid "A depedency injection container for the Horde Framework."
msgstr ""

#. summary(perl-Iterator)
msgid "A general-purpose iterator class"
msgstr ""

#. description(perl-Test-Warn)
msgid ""
"A good style of Perl programming calls for a lot of diverse regression tests.\n"
"\n"
"This module provides a few convenience methods for testing warning based code.\n"
"\n"
"If you are not already familiar with the Test::More manpage now would be the time to go take a look."
msgstr ""

#. summary(perl-Config-Grammar)
msgid "A grammar-based, user-friendly config parser"
msgstr ""

#. summary(perl-MooseX-Types-Common)
msgid "A library of commonly used type constraints"
msgstr ""

#. description(perl-MooseX-Log-Log4perl)
msgid ""
"A logging role building a very lightweight wrapper to the Log::Log4perl manpage for use with your the Moose manpage classes. The initialization of the Log4perl instance must be performed prior to logging the first log message. Otherwise the default initialization will happen, probably not doing the things you expect.\n"
"\n"
"For compatibility the 'logger' attribute can be accessed to use a common interface for application logging.\n"
"\n"
"Using the logger within a class is as simple as consuming a role:\n"
"\n"
"    package MyClass;     use Moose;     with 'MooseX::Log::Log4perl';\n"
"\n"
"    sub dummy {         my $self = shift;         $self->log->info(\"Dummy log entry\");     }\n"
"\n"
"The logger needs to be setup before using the logger, which could happen in the main application:\n"
"\n"
"    package main;     use Log::Log4perl qw(:easy);     use MyClass;\n"
"\n"
"    BEGIN { Log::Log4perl->easy_init() };\n"
"\n"
"    my $myclass = MyClass->new();     $myclass->log->info(\"In my class\"); # Access the log of the object     $myclass->dummy;                    # Will log \"Dummy log entry\""
msgstr ""

#. summary(perl-Config-AutoConf)
msgid "A module to implement some of AutoConf macros in pure perl"
msgstr ""

#. description(perl-Config-AutoConf)
msgid "A module to implement some of AutoConf macros in pure perl."
msgstr ""

#. summary(perl-File-chdir)
msgid "A more sensible way to change directories"
msgstr ""

#. summary(perl-CGI-Ajax)
msgid "A perl-specific System for writing Asynchronous web Apps"
msgstr ""

#. summary(perl-Class-Inner)
msgid "A perlish implementation of Java like inner classes"
msgstr ""

#. summary(perl-Net-Whois-RIPE)
#, fuzzy
msgid "A pure-Perl implementation of the RIPE Database client"
msgstr "7.0 文档"

#. summary(perl-MooseX-Storage)
msgid "A serialization framework for Moose classes"
msgstr ""

#. description(perl-MooseX-Types-Common)
msgid "A set of commonly-used type constraints that do not ship with Moose by default."
msgstr ""

#. summary(perl-Version-Requirements)
msgid "A set of version requirements for a CPAN dist"
msgstr ""

#. summary(perl-Rose-Object)
msgid "A simple object base class."
msgstr ""

#. summary(perl-Net-HTTPServer)
msgid "A simple perl Http Server"
msgstr ""

#. description(perl-MooseX-Singleton)
msgid ""
"A singleton is a class that has only one instance in an application. 'MooseX::Singleton' lets you easily upgrade (or downgrade, as it were) your the Moose manpage class to a singleton.\n"
"\n"
"All you should need to do to transform your class is to change 'use Moose' to 'use MooseX::Singleton'. This module uses metaclass roles to do its magic, so it should cooperate with most other 'MooseX' modules."
msgstr ""

#. summary(perl-Sub-Exporter)
msgid "A sophisticated exporter for custom-built routines"
msgstr ""

#. summary(perl-Switch)
msgid "A switch statement for Perl"
msgstr ""

#. description(perl-MooseX-Types-Parameterizable)
msgid ""
"A the MooseX::Types manpage library for creating parameterizable types. A parameterizable type constraint for all intents and uses is a subclass of a parent type, but adds additional type parameters which are available to constraint callbacks (such as inside the 'where' clause of a type constraint definition) or in the coercions you define for a given type constraint.\n"
"\n"
"If you have the Moose manpage experience, you probably are familiar with the builtin parameterizable type constraints 'ArrayRef' and 'HashRef'. This type constraint lets you generate your own versions of parameterized constraints that work similarly. See the Moose::Util::TypeConstraints manpage for more."
msgstr ""

#. description(perl-Time-Clock)
msgid ""
"A the Time::Clock manpage object is a twenty-four hour clock with nanosecond precision and wrap-around. It is a clock only; it has absolutely no concept of dates. Vagaries of date/time such as leap seconds and daylight savings time are unsupported.\n"
"\n"
"When a the Time::Clock manpage object hits 23:59:59.999999999 and at least one more nanosecond is added, it will wrap around to 00:00:00.000000000. This works in reverse when time is subtracted.\n"
"\n"
"the Time::Clock manpage objects automatically stringify to a user-definable format."
msgstr ""

#. summary(perl-Time-Tiny)
msgid "A time object, with as little code as possible"
msgstr ""

#. summary(perl-ExtUtils-LibBuilder)
#, fuzzy
msgid "A tool to build C libraries."
msgstr "包中含有意外的版本"

#. summary(perl-Perl-PrereqScanner)
msgid "A tool to scan your Perl code for its prerequisites"
msgstr ""

#. description(perl-DBM-Deep)
msgid ""
"A unique flat-file database module, written in pure perl. True multi-level hash/array support (unlike MLDBM, which is faked), hybrid OO / tie() interface, cross-platform FTPable files, ACID transactions, and is quite fast. Can handle millions of keys and unlimited levels without significant slow-down. Written from the ground-up in pure perl -- this is NOT a wrapper around a C-based DBM. Out-of-the-box compatibility with Unix, Mac OS X and Windows.\n"
"\n"
"Author:\n"
"-------     Rob Kinyon, <rkinyon@cpan.org>     Joseph Huckaby, <jhuckaby@cpan.org>"
msgstr ""

#. description(perl-Calendar-Simple)
msgid ""
"A very simple perl module that models a calendar month.\n"
"\n"
"This function returns a data structure representing the dates in a month. The data structure returned is an array of array references. The first level array represents the weeks in the month. The second level array contains the actual days. By default, each week starts on a Sunday and the value in the array is the date of that day. Any days at the beginning of the first week or the end of the last week that are from the previous or next month have the value undef."
msgstr ""

#. summary(perl-MooseX-Role-TraitConstructor)
msgid "A wrapper for C<new> that can accept a"
msgstr ""

#. summary(perl-CPANPLUS)
msgid "API & CLI access to the CPAN mirrors"
msgstr ""

#. summary(php5-pear-Auth_SASL)
msgid "Abstraction of various SASL mechanism responses"
msgstr ""

#. description(perl-Test-use-ok)
msgid ""
"According to the *Test::More* documentation, it is recommended to run 'use_ok()' inside a 'BEGIN' block, so functions are exported at compile-time and prototypes are properly honored.\n"
"\n"
"That is, instead of writing this:\n"
"\n"
"    use_ok( 'Some::Module' );     use_ok( 'Other::Module' );\n"
"\n"
"One should write this:\n"
"\n"
"    BEGIN { use_ok( 'Some::Module' ); }     BEGIN { use_ok( 'Other::Module' ); }\n"
"\n"
"However, people often either forget to add 'BEGIN', or mistakenly group 'use_ok' with other tests in a single 'BEGIN' block, which can create subtle differences in execution order.\n"
"\n"
"With this module, simply change all 'use_ok' in test scripts to 'use ok', and they will be executed at 'BEGIN' time. The explicit space after 'use' makes it clear that this is a single compile-time action."
msgstr ""

#. summary(perl-Symbol-Util)
#, fuzzy
msgid "Additional utils for Perl symbols manipulation"
msgstr "其他 rpm 输出："

#. summary(php5-pear-channel-ezno)
msgid "Adds components.ez.no channel to PEAR"
msgstr ""

#. summary(php5-pear-channel-horde)
msgid "Adds pear.horde.org channel to PEAR"
msgstr ""

#. summary(php5-pear-channel-phpunit)
msgid "Adds pear.phpunit.de channel to PEAR"
msgstr ""

#. summary(php5-pear-channel-symfony)
msgid "Adds pear.symfony-project.com channel to PEAR"
msgstr ""

#. summary(perl-Class-XPath)
msgid "Adds xpath matching to object trees"
msgstr ""

#. summary(perl-CLASS)
msgid "Alias for __PACKAGE__"
msgstr ""

#. description(perl-Math-BigInt)
msgid ""
"All operators (including basic math operations) are overloaded if you declare your big integers as\n"
"\n"
"  $i = new Math::BigInt '123_456_789_123_456_789';\n"
"\n"
"Operations with overloaded operators preserve the arguments which is exactly what you expect.\n"
"\n"
"* Input\n"
"\n"
"  Input values to these routines may be any string, that looks like a   number and results in an integer, including hexadecimal and binary   numbers.\n"
"\n"
"  Scalars holding numbers may also be passed, but note that non-integer   numbers may already have lost precision due to the conversion to float.   Quote your input if you want BigInt to see all the digits:\n"
"\n"
"  \t$x = Math::BigInt->new(12345678890123456789);\t# bad   \t$x = Math::BigInt->new('12345678901234567890');\t# good\n"
"\n"
"  You can include one underscore between any two digits.\n"
"\n"
"  This means integer values like 1.01E2 or even 1000E-2 are also accepted.   Non-integer values result in NaN.\n"
"\n"
"  Hexadecimal (prefixed with \"0x\") and binary numbers (prefixed with \"0b\")   are accepted, too. Please note that octal numbers are not recognized by   new(), so the following will print \"123\":\n"
"\n"
"  \tperl -MMath::BigInt -le 'print Math::BigInt->new(\"0123\")'\n"
"\n"
"  To convert an octal number, use from_oct();\n"
"\n"
"  \tperl -MMath::BigInt -le 'print Math::BigInt->from_oct(\"0123\")'\n"
"\n"
"  Currently, Math::BigInt::new() defaults to 0, while Math::BigInt::new('')   results in 'NaN'. This might change in the future, so use always the   following explicit forms to get a zero or NaN:\n"
"\n"
"  \t$zero = Math::BigInt->bzero();   \t$nan = Math::BigInt->bnan();\n"
"\n"
"  'bnorm()' on a BigInt object is now effectively a no-op, since the   numbers are always stored in normalized form. If passed a string, creates   a BigInt object from the input.\n"
"\n"
"* Output\n"
"\n"
"  Output values are BigInt objects (normalized), except for the methods   which return a string (see the SYNOPSIS manpage).\n"
"\n"
"  Some routines ('is_odd()', 'is_even()', 'is_zero()', 'is_one()',   'is_nan()', etc.) return true or false, while others ('bcmp()',   'bacmp()') return either undef (if NaN is involved), <0, 0 or >0 and are   suited for sort."
msgstr ""

#. summary(php5-pear-Crypt_Blowfish)
msgid "Allows for quick two-way blowfish encryption without the MCrypt PHP extension"
msgstr ""

#. description(php5-pear-File_IMC)
msgid "Allows you to programmatically create a vCard or vCalendar, and fetch the text. IMPORTANT: The array structure has changed slightly from Contact_Vcard_Parse. See the example output for the new structure. Also different from Contact_Vcardis the use of a factory pattern. Again, see the examples."
msgstr ""

#. summary(perl-Params-Coerce)
msgid "Allows your classes to do coercion of parameters"
msgstr ""

#. summary(perl-Test-use-ok)
msgid "Alternative to Test::More::use_ok"
msgstr ""

#. summary(php5-pear-DB_DataObject)
msgid "An SQL Builder, Object Interface to Database Tables"
msgstr ""

#. summary(perl-MooseX-ConfigFromFile)
msgid "An abstract Moose role for setting attributes from a configfile"
msgstr ""

#. summary(perl-Devel-StackTrace)
msgid "An object representing a stack trace"
msgstr ""

#. description(ack:perl-App-Ack)
msgid "App::Ack is a grep-like tool tailored to working with large trees of source code."
msgstr ""

#. description(perl-App-Cmd)
msgid ""
"App::Cmd is intended to make it easy to write complex command-line applications without having to think about most of the annoying things usually involved.\n"
"\n"
"For information on how to start using App::Cmd, see the App::Cmd::Tutorial manpage."
msgstr ""

#. summary(perl-Math-BigInt)
msgid "Arbitrary size integer/float math package"
msgstr ""

#. description(perl-List-AllUtils)
msgid "Are you sick of trying to remember whether a particular helper is defined in \"List::Util\" or \"List::MoreUtils\"? I sure am. Now you don't have to remember. This module will export all of the functions that either of those two modules defines."
msgstr ""

#. summary(perl-Regexp-Assemble)
msgid "Assemble multiple Regular Expressions into a single RE"
msgstr ""

#. summary(perl-NetPacket)
msgid "Assemble/disassemble network packets at the protocol level"
msgstr ""

#. summary(perl-Test-Assert)
msgid "Assertion methods for those who like JUnit."
msgstr ""

#. summary(perl-MooseX-MultiInitArg)
msgid "Attributes with aliases for constructor arguments."
msgstr ""

#. summary(perl-Apache2-AuthCookieDBI)
msgid "AuthCookie module backed by a DBI database"
msgstr ""

#. summary(perl-Moose-Autobox)
msgid "Autoboxed wrappers for Native Perl datatypes"
msgstr ""

#. description(php5-pear-Horde_Autoloader)
msgid "Autoload implementation and class loading manager for Horde."
msgstr ""

#. summary(perl-Text-Autoformat)
msgid "Automatic text wrapping and reformatting"
msgstr ""

#. summary(perl-String-Escape)
msgid "Backslash escapes, quoted phrase, word elision, etc."
msgstr ""

#. summary(php5-pear-ezc-Base)
#, fuzzy
msgid "Base package of ezcomponents"
msgstr "找不到包。"

#. summary(perl-Test-Script)
#, fuzzy
msgid "Basic cross-platform tests for scripts"
msgstr "日常工作的标准工具。"

#. summary(perl-Test-Simple)
msgid "Basic utilities for writing tests"
msgstr ""

#. description(perl-DBIx-Class-IntrospectableM2M)
msgid "Because the many-to-many relationships are not real relationships, they can not be introspected with DBIx::Class. Many-to-many relationships are actually just a collection of convenience methods installed to bridge two relationships. This the DBIx::Class manpage component can be used to store all relevant information about these non-relationships so they can later be introspected and examined."
msgstr ""

#. summary(perl-boolean)
#, fuzzy
msgid "Boolean support for Perl"
msgstr "找不到 Xscreensaver。"

#. summary(perl-Log-Any)
msgid "Bringing loggers and listeners together"
msgstr ""

#. summary(php5-pear-DB_DataObject_FormBuilder)
msgid "Build automatically HTML_QuickForm objects from a DB_DataObject-derived class"
msgstr ""

#. summary(perl-String-Formatter)
msgid "Build sprintf-like functions of your own"
msgstr ""

#. description(perl-Regexp-Common)
msgid ""
"By default, this module exports a single hash ('%RE') that stores or generates commonly needed regular expressions (see the \"List of available patterns\" manpage).\n"
"\n"
"There is an alternative, subroutine-based syntax described in the \"Subroutine-based interface\" manpage."
msgstr ""

#. description(perl-CGI-Ajax)
msgid ""
"CGI::Ajax is an object-oriented module that provides a unique mechanism for using perl code asynchronously from javascript- enhanced HTML pages. CGI::Ajax unburdens the user from having to write extensive javascript, except for associating an exported method with a document-defined event (such as onClick, onKeyUp, etc). CGI::Ajax also mixes well with HTML containing more complex javascript.\n"
"\n"
"CGI::Ajax supports methods that return single results or multiple results to the web page, and supports returning values to multiple DIV elements on the HTML page.\n"
"\n"
"Using CGI::Ajax, the URL for the HTTP GET/POST request is automatically generated based on HTML layout and events, and the page is then dynamically updated with the output from the perl function. Additionally, CGI::Ajax supports mapping URL's to a CGI::Ajax function name, so you can separate your code processing over multiple scripts.\n"
"\n"
"Other than using the Class::Accessor module to generate CGI::Ajax' accessor methods, CGI::Ajax is completely self-contained - it does not require you to install a larger package or a full Content Management System, etc.\n"
"\n"
"We have added _support_ for other CGI handler/decoder modules, like the CGI::Simple manpage or the CGI::Minimal manpage, but we can't test these since we run mod_perl2 only here. CGI::Ajax checks to see if a header() method is available to the CGI object, and then uses it. If method() isn't available, it creates it's own minimal header.\n"
"\n"
"A primary goal of CGI::Ajax is to keep the module streamlined and maximally flexible. We are trying to keep the generated javascript code to a minimum, but still provide users with a variety of methods for deploying CGI::Ajax. And VERY little user javascript."
msgstr ""

#. description(perl-CGI-FastTemplate)
msgid ""
"CGI::FastTemplate manages templates and parses templates replacing variable names with values. It was designed for mid to large scale web applications (CGI, mod_perl) where there are great benefits to separating the logic of an application from the specific implementation details.\n"
"\n"
"Author:\tJason Moore <jmoore@sober.com>"
msgstr ""

#. description(perl-CGI-Simple)
msgid ""
"CGI::Simple provides a relatively lightweight drop in replacement for CGI.pm. It shares an identical OO interface to CGI.pm for parameter parsing, file upload, cookie handling and header generation. This module is entirely object oriented, however a complete functional interface is available by using the CGI::Simple::Standard module.\n"
"\n"
"Essentially everything in CGI.pm that relates to the CGI (not HTML) side of things is available. There are even a few new methods and additions to old ones! If you are interested in what has gone on under the hood see the Compatibility with CGI.pm section at the end.\n"
"\n"
"In practical testing this module loads and runs about twice as fast as CGI.pm depending on the precise task."
msgstr ""

#. description(perl-CHI)
msgid ""
"CHI provides a unified caching API, designed to assist a developer in persisting data for a specified period of time.\n"
"\n"
"The CHI interface is implemented by driver classes that support fetching, storing and clearing of data. Driver classes exist or will exist for the gamut of storage backends available to Perl, such as memory, plain files, memory mapped files, memcached, and DBI.\n"
"\n"
"CHI is intended as an evolution of DeWitt Clinton's Cache::Cache package, adhering to the basic Cache API but adding new features and addressing limitations in the Cache::Cache implementation."
msgstr ""

#. description(perl-CLASS)
msgid ""
"CLASS and $CLASS are both synonyms for __PACKAGE__. Easier to type.\n"
"\n"
"$CLASS has the additional benefit of working in strings."
msgstr ""

#. description(perl-CPAN-Mini)
msgid ""
"CPAN::Mini provides a simple mechanism to build and update a minimal mirror of the CPAN on your local disk. It contains only those files needed to install the newest version of every distribution. Those files are:\n"
"\n"
"* *\n"
"\n"
"  01mailrc.txt.gz\n"
"\n"
"* *\n"
"\n"
"  02packages.details.txt.gz\n"
"\n"
"* *\n"
"\n"
"  03modlist.data.gz\n"
"\n"
"* *\n"
"\n"
"  the last non-developer release of every dist for every author"
msgstr ""

#. description(perl-CPAN-Perl-Releases)
msgid ""
"CPAN::Perl::Releases is a module that contains the mappings of all 'perl' releases that have been uploaded to CPAN to the 'authors/id/' path that the tarballs reside in.\n"
"\n"
"This is static data, but newer versions of this module will be made available as new releases of 'perl' are uploaded to CPAN."
msgstr ""

#. summary(perl-CPANPLUS-Dist-Build)
msgid "CPANPLUS plugin to install packages that use Build.PL"
msgstr ""

#. description(perl-CSS-Tiny)
msgid "CSS::Tiny is a perl class to read and write .css stylesheets with as little code as possible, reducing load time and memory overhead. CSS.pm requires about 2.6 meg or ram to load, which is a large amount of overhead if you only want to do trivial things. Memory usage is normally scoffed at in Perl, but in my opinion should be at least kept in mind."
msgstr ""

#. summary(perl-IO-Digest)
msgid "Calculate digests while reading or writing"
msgstr ""

#. summary(perl-Capture-Tiny)
msgid "Capture STDOUT and STDERR from Perl, XS or external programs"
msgstr ""

#. description(perl-Capture-Tiny)
msgid "Capture::Tiny provides a simple, portable way to capture almost anything sent to STDOUT or STDERR, regardless of whether it comes from Perl, from XS code or from an external program. Optionally, output can be teed so that it is captured while being passed through to the original filehandles. Yes, it even works on Windows (usually). Stop guessing which of a dozen capturing modules to use in any particular situation and just use this one."
msgstr ""

#. description(perl-Carp-Assert-More)
msgid ""
"Carp::Assert::More is a set of wrappers around the the Carp::Assert manpage functions to make the habit of writing assertions even easier.\n"
"\n"
"Everything in here is effectively syntactic sugar. There's no technical reason to use\n"
"\n"
"    assert_isa( $foo, 'HTML::Lint' );\n"
"\n"
"instead of\n"
"\n"
"    assert( defined $foo );     assert( ref($foo) eq 'HTML::Lint' );\n"
"\n"
"other than readability and simplicity of the code.\n"
"\n"
"My intent here is to make common assertions easy so that we as programmers have no excuse to not use them."
msgstr ""

#. summary(perl-MIME-Charset)
#, fuzzy
msgid "Charset Informations for MIME"
msgstr "联网信息服务客户机"

#. description(perl-Test-Pod)
msgid "Check POD files for errors or warnings in a test file, using 'Pod::Simple' to do the heavy lifting."
msgstr ""

#. summary(perl-Test-HasVersion)
msgid "Check Perl modules have version numbers"
msgstr ""

#. summary(perl-Test-Memory-Cycle)
msgid "Check for memory leaks and circular memory references"
msgstr ""

#. summary(perl-Test-CheckDeps)
msgid "Check for presence of dependencies"
msgstr ""

#. summary(perl-Test-CheckChanges)
msgid "Check that the Changes file matches the distribution."
msgstr ""

#. summary(perl-Test-EOL)
msgid "Check the correct line endings in your project"
msgstr ""

#. summary(perl-Test-NoTabs)
msgid "Check the presence of tabs in your project"
msgstr ""

#. summary(perl-Email-Valid)
msgid "Check validity of Internet email addresses"
msgstr ""

#. summary(perl-Pod-Coverage)
msgid "Checks if the documentation of a module is comprehensive"
msgstr ""

#. summary(perl-Test-Requires)
msgid "Checks to see if the module can be loaded"
msgstr ""

#. description(perl-UNIVERSAL-moniker)
msgid ""
"Class names in Perl often don't sound great when spoken, or look good when written in prose. For this reason, we tend to say things like \"customer\" or \"basket\" when we are referring to 'My::Site::User::Customer' or 'My::Site::Shop::Basket'. We thought it would be nice if our classes knew what we would prefer to call them.\n"
"\n"
"This module will add a 'moniker' (and 'plural_moniker') method to 'UNIVERSAL', and so to every class or module."
msgstr ""

#. summary(perl-HTML-Form)
msgid "Class that represents an HTML form element"
msgstr ""

#. summary(perl-Class-C3-Componentised)
#, fuzzy
msgid "Class::C3::Componentised Perl module"
msgstr "内核模块更改"

#. description(perl-Class-ReturnValue)
msgid "Class::ReturnValue is a \"clever\" return value object that can allow code calling your routine to expect: a boolean value (did it fail) or a list (what are the return values)"
msgstr ""

#. summary(perl-MooseX-Types-LoadableClass)
msgid "ClassName type constraint with coercion to load the class."
msgstr ""

#. summary(perl-Tk-Clock)
msgid "Clock widget with analog and digital display"
msgstr ""

#. summary(perl-List-AllUtils)
msgid "Combines List::Util and List::MoreUtils in one bite-sized package"
msgstr ""

#. summary(perl-Text-CSV)
#, fuzzy
msgid "Comma-separated values manipulator (using XS or PurePerl)"
msgstr "应用程序"

#. summary(perl-Smart-Comments)
msgid "Comments that do more than just sit there"
msgstr ""

#. summary(php5-pear-File)
msgid "Common file and directory routines"
msgstr ""

#. summary(perl-Data-Compare)
msgid "Compare perl data structures"
msgstr ""

#. description(perl-Data-Compare)
msgid ""
"Compare two perl data structures recursively. Returns 0 if the structures differ, else returns 1.\n"
"\n"
"A few data types are treated as special cases:\n"
"\n"
"* Scalar::Properties objects\n"
"\n"
"  This has been moved into a plugin, although functionality remains the   same as with the previous version. Full documentation is in the   Data::Compare::Plugins::Scalar::Properties manpage.\n"
"\n"
"* Compiled regular expressions, eg qr/foo/\n"
"\n"
"  These are stringified before comparison, so the following will match:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/abc/i;       Compare($r, $s);\n"
"\n"
"  and the following won't, despite them matching *exactly* the same text:\n"
"\n"
"      $r = qr/abc/i;       $s = qr/[aA][bB][cC]/;       Compare($r, $s);\n"
"\n"
"  Sorry, that's the best we can do.\n"
"\n"
"* CODE and GLOB references\n"
"\n"
"  These are assumed not to match unless the references are identical - ie,   both are references to the same thing.\n"
"\n"
"You may also customise how we compare structures by supplying options in a hashref as a third parameter to the 'Compare()' function. This is not yet available through the OO-ish interface. These options will be in force for the *whole* of your comparison, so will apply to structures that are lurking deep down in your data as well as at the top level, so beware!\n"
"\n"
"* ignore_hash_keys\n"
"\n"
"  an arrayref of strings. When comparing two hashes, any keys mentioned in   this list will be ignored."
msgstr ""

#. summary(perl-ExtUtils-CBuilder)
#, fuzzy
msgid "Compile and link C code for Perl modules"
msgstr "无法安装捆绑软件：{0}"

#. summary(perl-HTML-RewriteAttributes)
msgid "Concise attribute rewriting"
msgstr ""

#. description(perl-Config-Any)
msgid ""
"Config::Any provides a facility for Perl applications and libraries to load configuration data from multiple different file formats. It supports XML, YAML, JSON, Apache-style configuration, Windows INI files, and even Perl code.\n"
"\n"
"The rationale for this module is as follows: Perl programs are deployed on many different platforms and integrated with many different systems. Systems administrators and end users may prefer different configuration formats than the developers. The flexibility inherent in a multiple format configuration loader allows different users to make different choices, without generating extra work for the developers. As a developer you only need to learn a single interface to be able to use the power of different configuration formats."
msgstr ""

#. description(perl-Config-Grammar)
msgid ""
"Config::Grammar is a module to parse configuration files. The configuration may consist of multiple-level sections with assignments and tabular data. The parsed data will be returned as a hash containing the whole configuration. Config::Grammar uses a grammar that is supplied upon creation of a Config::Grammar object to parse the configuration file and return helpful error messages in case of syntax errors. Using the *makepod* method you can generate documentation of the configuration file format.\n"
"\n"
"The *maketmpl* method can generate a template configuration file. If your grammar contains regexp matches, the template will not be all that helpful as Config::Grammar is not smart enough to give you sensible template data based in regular expressions. The related function *maketmplmin* generates a minimal configuration template without examples, regexps or comments and thus allows an experienced user to fill in the configuration data more efficiently."
msgstr ""

#. description(perl-Config-MVP-Reader-INI)
msgid "Config::MVP::Reader::INI reads _.ini_ files containing MVP-style configuration."
msgstr ""

#. summary(perl-ExtUtils-CChecker)
#, fuzzy
msgid "Configure-time utilities for using C headers"
msgstr "显示器配置"

#. summary(php5-pear-ezc-ConsoleTools)
msgid "ConsoleTools package of ezcomponents"
msgstr ""

#. summary(perl-SUPER)
msgid "Control superclass method dispatch"
msgstr ""

#. summary(perl-Carp-Assert-More)
msgid "Convenience wrappers around Carp::Assert"
msgstr ""

#. summary(perl-Text-Markdown)
msgid "Convert Markdown syntax to (X)HTML"
msgstr ""

#. summary(perl-Pod-Readme)
msgid "Convert POD to README file"
msgstr ""

#. summary(perl-Lingua-EN-Inflect)
msgid "Convert singular to plural. Select \"a\" or \"an\"."
msgstr ""

#. summary(perl-PAR-Dist)
#, fuzzy
msgid "Create and manipulate PAR distributions"
msgstr "应用程序"

#. summary(php5-pear-File_IMC)
msgid "Create and parse IMC-style files (like vCard and vCalendar)"
msgstr ""

#. summary(perl-GD-Barcode)
msgid "Create barcode image with GD"
msgstr ""

#. summary(perl-Contextual-Return)
msgid "Create context-sensitive return values"
msgstr ""

#. summary(perl-MooseX-Types-Parameterizable)
msgid "Create your own Parameterizable Types."
msgstr ""

#. summary(perl-Perl-Critic)
msgid "Critique Perl source code for best-practices."
msgstr ""

#. summary(perl-Path-Class)
msgid "Cross-platform path specification manipulation"
msgstr ""

#. summary(perl-CursesWidgets)
#, fuzzy
msgid "CursesWidgets Perl module"
msgstr "用户模块"

#. description(php5-pear-DB)
msgid ""
"DB is a database abstraction layer providing:\n"
"* an OO-style query API\n"
"* portability features that make programs written for one DBMS work with other DBMS's\n"
"* a DSN (data source name) format for specifying database servers\n"
"* prepare/execute (bind) emulation for databases that don't support it natively\n"
"* a result object for each query response\n"
"* portable error codes\n"
"* sequence emulation\n"
"* sequential and non-sequential row fetching as well as bulk fetching\n"
"* formats fetched rows as associative arrays, ordered arrays or objects\n"
"* row limit support\n"
"* transactions support\n"
"* table information interface\n"
"* DocBook and phpDocumentor API documentation\n"
"\n"
"DB layers itself on top of PHP's existing database extensions.\n"
"\n"
"Drivers for the following extensions pass the complete test suite and provide interchangeability when all of DB's portability options are enabled:\n"
"\n"
"  fbsql, ibase, informix, msql, mssql,   mysql, mysqli, oci8, odbc, pgsql,   sqlite and sybase.\n"
"\n"
"There is also a driver for the dbase extension, but it can't be used interchangeably because dbase doesn't support many standard DBMS features.\n"
"\n"
"DB is compatible with both PHP 4 and PHP 5."
msgstr ""

#. description(perl-DBIx-Simple)
msgid ""
"DBIx::Simple provides a simplified interface to DBI, Perl's powerful database module.\n"
"\n"
"This module is aimed at rapid development and easy maintenance. Query preparation and execution are combined in a single method, the result object (which is a wrapper around the statement handle) provides easy row-by-row and slurping methods.\n"
"\n"
"The 'query' method returns either a result object, or a dummy object. The dummy object returns undef (or an empty list) for all methods and when used in boolean context, is false. The dummy object lets you postpone (or skip) error checking, but it also makes immediate error checking simply '$db->query(...) or die $db->error'."
msgstr ""

#. description(php5-pear-DB_DataObject_FormBuilder)
msgid "DB_DataObject_FormBuilder will aid you in rapid application development using the  packages DB_DataObject and HTML_QuickForm. For having a quick but working  prototype of your application, simply model the database, run DataObject`s  createTable script over it and write a script that passes one of the resulting  objects to the FormBuilder class. The FormBuilder will automatically generate a  simple but working HTML_QuickForm object that you can use to test your application.  It also provides a processing method that will automatically detect if an insert()  or update() command has to be executed after the form has been submitted.  If you have set up DataObject&apos;s links.ini file correctly, it will also  automatically detect if a table field is a foreign key and will populate a  selectbox with the linked table&apos;s entries. There are many optional  parameters that you can place in your DataObjects.ini or in the properties of  your derived classes, that you can use to fine-tune the form-generation,  gradually turning the prototypes into fully-featured forms, and you can  take control at any stage of the process."
msgstr ""

#. summary(perl-Business-ISBN-Data)
msgid "Data pack for Business::ISBN"
msgstr ""

#. description(perl-Data-Section)
msgid "Data::Section provides an easy way to access multiple named chunks of line- oriented data in your module's DATA section. It was written to allow modules to store their own templates, but probably has other uses."
msgstr ""

#. description(perl-Data-Section-Simple)
msgid "Data::Section::Simple is a simple module to extract data from '__DATA__' section of the file."
msgstr ""

#. description(php5-pear-DB_DataObject)
msgid "DataObject performs 2 tasks: 1. Builds SQL statements based on the objects vars and the builder methods. 2. acts as a datastore for a table row. The core class is designed to be extended for each of your tables so that you put the data logic inside the data classes. included is a Generator to make your configuration files and your base classes."
msgstr ""

#. summary(php5-pear-DB)
#, fuzzy
msgid "Database Abstraction Layer"
msgstr "输入抽象层 的用户界面"

#. summary(pgaccess)
#, fuzzy
msgid "Database Management Tool for PostgreSQL"
msgstr "包管理模块（对于 Linux）"

#. summary(perl-MooseX-Types-DateTime)
msgid "DateTime related constraints and coercions for"
msgstr ""

#. description(perl-DateTime-Locale)
msgid ""
"DateTime::Locale is primarily a factory for the various locale subclasses. It also provides some functions for getting information on all the available locales.\n"
"\n"
"If you want to know what methods are available for locale objects, then please read the DateTime::Locale::Base documentation."
msgstr ""

#. description(php5-pear-Date_Holidays)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. The calculation is driver-based so it is easy to add new drivers that calculate a country's holidays. The methods of the class can be used to get a holiday's date and title in various languages."
msgstr ""

#. description(php5-pear-Date_Holidays_Austria)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Austria"
msgstr ""

#. description(php5-pear-Date_Holidays_Brazil)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Brazil"
msgstr ""

#. description(php5-pear-Date_Holidays_Croatia)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Croatia"
msgstr ""

#. description(php5-pear-Date_Holidays_Denmark)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Denmark"
msgstr ""

#. description(php5-pear-Date_Holidays_EnglandWales)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for England and Wales"
msgstr ""

#. description(php5-pear-Date_Holidays_Iceland)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Iceland"
msgstr ""

#. description(php5-pear-Date_Holidays_Ireland)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Ireland"
msgstr ""

#. description(php5-pear-Date_Holidays_Italy)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Italy"
msgstr ""

#. description(php5-pear-Date_Holidays_Japan)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Japan"
msgstr ""

#. description(php5-pear-Date_Holidays_Netherlands)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Netherlands"
msgstr ""

#. description(php5-pear-Date_Holidays_Norway)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Norway"
msgstr ""

#. description(php5-pear-Date_Holidays_Portugal)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Portugal"
msgstr ""

#. description(php5-pear-Date_Holidays_Romania)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Romania"
msgstr ""

#. description(php5-pear-Date_Holidays_Spain)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Spain"
msgstr ""

#. description(php5-pear-Date_Holidays_Sweden)
msgid "Date_Holidays helps you calculate the dates and titles of holidays and other special celebrations. This is the driver for Sweden"
msgstr ""

#. summary(perl-PHP-Serialization)
msgid "De-/serialize() PHP output into Perl"
msgstr ""

#. description(perl-Debug-Trace)
msgid "Debug::Trace instruments subroutines to provide tracing information upon every call and return."
msgstr ""

#. summary(perl-Declare-Constraints-Simple)
msgid "Declarative Validation of Data Structures"
msgstr ""

#. summary(perl-MooseX-Declare)
msgid "Declarative syntax for Moose"
msgstr ""

#. summary(perl-MooseX-ClassAttribute)
msgid "Declare class attributes Moose-style"
msgstr ""

#. summary(perl-Dist-CheckConflicts)
msgid "Declare version conflicts for your dist"
msgstr ""

#. summary(perl-constant-boolean)
msgid "Define TRUE and FALSE constants."
msgstr ""

#. description(perl-constant-boolean)
msgid ""
"Defines 'TRUE' and 'FALSE' constants in caller's namespace. You could use simple values like empty string or zero for false, or any non-empty and non-zero string value as true, but the 'TRUE' and 'FALSE' constants are more descriptive.\n"
"\n"
"It is virtually the same as:\n"
"\n"
"     use constant TRUE => !! 1;   use constant FALSE => !! '';\n"
"\n"
"The constants exported by 'constant::boolean' are not reported by the Test::Pod::Coverage manpage, so it is more convenient to use this module than to define 'TRUE' and 'FALSE' constants by yourself.\n"
"\n"
"The constants can be removed from class API with 'no constant::boolean' pragma or some universal tool like the namespace::clean manpage."
msgstr ""

#. description(perl-SQL-ReservedWords)
msgid "Determine if words are reserved by ANSI/ISO SQL standard."
msgstr ""

#. description(perl-Devel-StackTrace-AsHTML)
msgid "Devel::StackTrace::AsHTML adds 'as_html' method to the Devel::StackTrace manpage which displays the stack trace in beautiful HTML, with code snippet context and function parameters. If you call it on an instance of the Devel::StackTrace::WithLexicals manpage, you even get to see the lexical variables of each stack frame."
msgstr ""

#. description(perl-Pod-Coverage)
msgid ""
"Developers hate writing documentation. They'd hate it even more if their computer tattled on them, but maybe they'll be even more thankful in the long run. Even if not, _perlmodstyle_ tells you to, so you must obey.\n"
"\n"
"This module provides a mechanism for determining if the pod for a given module is comprehensive.\n"
"\n"
"It expects to find either a '=head(n>1)' or an '=item' block documenting a subroutine.\n"
"\n"
"Consider: # an imaginary Foo.pm package Foo;\n"
"\n"
" =item foo\n"
"\n"
" The foo sub\n"
"\n"
" = cut\n"
"\n"
" sub foo {}  sub bar {}\n"
"\n"
" 1;  __END__\n"
"\n"
"In this example 'Foo::foo' is covered, but 'Foo::bar' is not, so the 'Foo' package is only 50% (0.5) covered"
msgstr ""

#. summary(perl-App-CLI)
msgid "Dispatcher module for command line interface programs"
msgstr ""

#. summary(perl-Text-TabularDisplay)
msgid "Display text in formatted table output"
msgstr ""

#. summary(perl-Devel-StackTrace-AsHTML)
msgid "Displays stack trace in HTML"
msgstr ""

#. description(perl-Dist-Zilla)
msgid ""
"Dist::Zilla builds distributions of code to be uploaded to the CPAN. In this respect, it is like the ExtUtils::MakeMaker manpage, the Module::Build manpage, or the Module::Install manpage. Unlike those tools, however, it is not also a system for installing code that has been downloaded from the CPAN. Since it's only run by authors, and is meant to be run on a repository checkout rather than on published, released code, it can do much more than those tools, and is free to make much more ludicrous demands in terms of prerequisites.\n"
"\n"
"If you have access to the web, you can learn more and find an interactive tutorial at *http://dzil.org/*. If not, try the Dist::Zilla::Tutorial manpage."
msgstr ""

#. description(perl-Test-HasVersion)
msgid ""
"Do you wanna check that every one of your Perl modules in a distribution has a version number? You wanna make sure you don't forget the brand new modules you just added? Well, that's the module you have been looking for. Use it!\n"
"\n"
"Do you wanna check someone else's distribution to make sure the author have not commited the sin of leaving Perl modules without a version that can be used to tell if you have this or that feature? 'Test::HasVersion' is also for you, nasty little fellow.\n"
"\n"
"There's a script _test_version_ which is installed with this distribution. You may invoke it from within the root directory of a distribution you just unpacked, and it will check every _.pm_ file in the directory and under _lib/_ (if any).\n"
"\n"
"  $ test_version\n"
"\n"
"You may also provide directories and files as arguments.\n"
"\n"
"  $ test_version *.pm lib/ inc/   $ test_version .\n"
"\n"
"(Be warned that many Perl modules in a _t/_ directory do not receive versions because they are not used outside the distribution.)\n"
"\n"
"Ok. That's not a very useful module by now. But it will be. Wait for the upcoming releases.\n"
"\n"
"FUNCTIONS     * PRIVATE *_pm_version*\n"
"\n"
"        $v = _pm_version($pm);\n"
"\n"
"      Parses a PM file and return what it thinks is $VERSION in this file.       (Actually implemented with 'use ExtUtils::MakeMaker;       MM->parse_version($file)'.) '$pm' is the filename (eg.,       _lib/Data/Dumper.pm_).\n"
"\n"
"    * *pm_version_ok*\n"
"\n"
"        pm_version_ok('Module.pm');         pm_version_ok('M.pm', 'Has valid version');\n"
"\n"
"      Checks to see if the given file has a valid version. Actually a valid       version number is defined and not equal to ''undef'' (the string)       which is return by '_pm_version' if a version cannot be determined.\n"
"\n"
"    * *all_pm_version_ok*\n"
"\n"
"        all_pm_version_ok();         all_pm_version_ok(@PM_FILES);\n"
"\n"
"      Checks every given file and _.pm_ files found under given directories       to see if they provide valid version numbers. If no argument is       given, it defaults to check every file _*.pm_ in the current       directory and recurses under the _lib/_ directory (if it exists).\n"
"\n"
"      If no test plan was setted, 'Test::HasVersion' will set one after       computing the number of files to be tested. Otherwise, the plan is       left untouched.\n"
"\n"
"    * PRIVATE *_list_pm_files*\n"
"\n"
"        @pm_files = _list_pm_files(@dirs);\n"
"\n"
"      Returns all PM files under the given directories.\n"
"\n"
"    * *all_pm_files*\n"
"\n"
"        @files = all_pm_files()         @files = all_pm_files(@files_and_dirs);\n"
"\n"
"      Implements finding the Perl modules according to the semantics of the       previous function 'all_pm_version_ok'."
msgstr ""

#. summary(perl-LWP-Online)
msgid "Does your process have access to the web"
msgstr ""

#. summary(php5-pear-Date_Holidays)
msgid "Driver based class to calculate holidays"
msgstr ""

#. summary(php5-pear-Date_Holidays_Austria)
msgid "Driver class to calculate holidays in Austria"
msgstr ""

#. summary(php5-pear-Date_Holidays_Brazil)
msgid "Driver class to calculate holidays in Brazil"
msgstr ""

#. summary(php5-pear-Date_Holidays_Croatia)
msgid "Driver class to calculate holidays in Croatia"
msgstr ""

#. summary(php5-pear-Date_Holidays_Denmark)
msgid "Driver class to calculate holidays in Denmark"
msgstr ""

#. summary(php5-pear-Date_Holidays_EnglandWales)
msgid "Driver class to calculate holidays in England and Wales"
msgstr ""

#. summary(php5-pear-Date_Holidays_Germany)
msgid "Driver class to calculate holidays in Germoney"
msgstr ""

#. summary(php5-pear-Date_Holidays_Iceland)
msgid "Driver class to calculate holidays in Iceland"
msgstr ""

#. summary(php5-pear-Date_Holidays_Ireland)
msgid "Driver class to calculate holidays in Ireland"
msgstr ""

#. summary(php5-pear-Date_Holidays_Italy)
msgid "Driver class to calculate holidays in Italy"
msgstr ""

#. summary(php5-pear-Date_Holidays_Japan)
msgid "Driver class to calculate holidays in Japan"
msgstr ""

#. summary(php5-pear-Date_Holidays_Netherlands)
msgid "Driver class to calculate holidays in Netherlands"
msgstr ""

#. summary(php5-pear-Date_Holidays_Norway)
msgid "Driver class to calculate holidays in Norway"
msgstr ""

#. summary(php5-pear-Date_Holidays_Portugal)
msgid "Driver class to calculate holidays in Portugal"
msgstr ""

#. summary(php5-pear-Date_Holidays_Romania)
msgid "Driver class to calculate holidays in Romania"
msgstr ""

#. summary(php5-pear-Date_Holidays_Spain)
msgid "Driver class to calculate holidays in Spain"
msgstr ""

#. summary(php5-pear-Date_Holidays_Sweden)
msgid "Driver class to calculate holidays in Sweden"
msgstr ""

#. summary(perl-Test-Tester)
msgid "Ease testing test modules built with Test::Builder"
msgstr ""

#. summary(perl-Iterator-Util)
msgid "Essential utilities for the Iterator class"
msgstr ""

#. summary(perl-B-Hooks-EndOfScope)
msgid "Execute code after a scope finished compilation"
msgstr ""

#. summary(perl-Text-Template)
msgid "Expand template text with embedded Perl"
msgstr ""

#. summary(perl-Sub-Exporter-GlobExporter)
msgid "Export shared globs with Sub::Exporter collectors"
msgstr ""

#. description(perl-Exporter-Declare)
msgid "Exporter::Declare is a meta-driven exporting tool. Exporter::Declare tries to adopt all the good features of other exporting tools, while throwing away horrible interfaces. Exporter::Declare also provides hooks that allow you to add options and arguments for import. Finally, Exporter::Declare's meta-driven system allows for top-notch introspection."
msgstr ""

#. summary(perl-Exporter-Declare)
msgid "Exporting done right"
msgstr ""

#. summary(perl-DBIx-Class)
msgid "Extensible and flexible object <-> relational mapper."
msgstr ""

#. summary(perl-PPIx-Utilities)
msgid "Extensions to L<PPI|PPI>."
msgstr ""

#. summary(perl-Spreadsheet-ReadSXC)
msgid "Extract OpenOffice 1.x spreadsheet data"
msgstr ""

#. summary(perl-CPAN-DistnameInfo)
msgid "Extract distribution name and version from a distribution filename"
msgstr ""

#. summary(perl-Image-Info)
msgid "Extract meta information from image files"
msgstr ""

#. summary(perl-Test-Deep)
msgid "Extremely flexible deep comparison"
msgstr ""

#. summary(perl-PDF-API2)
msgid "Facilitates the creation and modification of PDF files"
msgstr ""

#. summary(php5-pear-cache_lite)
msgid "Fast and Safe little cache system"
msgstr ""

#. description(perl-MIME-EncWords)
msgid ""
"Fellow Americans, you probably won't know what the hell this module is for. Europeans, Russians, et al, you probably do. ':-)'.\n"
"\n"
"For example, here's a valid MIME header you might get:\n"
"\n"
"      From: =?US-ASCII?Q?Keith_Moore?= <moore@cs.utk.edu>       To: =?ISO-8859-1?Q?Keld_J=F8rn_Simonsen?= <keld@dkuug.dk>       CC: =?ISO-8859-1?Q?Andr=E9_?= Pirard <PIRARD@vm1.ulg.ac.be>       Subject: =?ISO-8859-1?B?SWYgeW91IGNhbiByZWFkIHRoaXMgeW8=?=        =?ISO-8859-2?B?dSB1bmRlcnN0YW5kIHRoZSBleGFtcGxlLg==?=        =?US-ASCII?Q?.._cool!?=\n"
"\n"
"The fields basically decode to (sorry, I can only approximate the Latin characters with 7 bit sequences /o and 'e):\n"
"\n"
"      From: Keith Moore <moore@cs.utk.edu>       To: Keld J/orn Simonsen <keld@dkuug.dk>       CC: Andr'e  Pirard <PIRARD@vm1.ulg.ac.be>       Subject: If you can read this you understand the example... cool!\n"
"\n"
"*Supplement*: Fellow Americans, Europeans, you probably won't know what the hell this module is for. East Asians, et al, you probably do. '(^_^)'.\n"
"\n"
"For example, here's a valid MIME header you might get:\n"
"\n"
"      Subject: =?EUC-KR?B?sNTAuLinKGxhemluZXNzKSwgwvzB9ri7seIoaW1w?=        =?EUC-KR?B?YXRpZW5jZSksILGzuLgoaHVicmlzKQ==?=\n"
"\n"
"The fields basically decode to (sorry, I cannot approximate the non-Latin multibyte characters with any 7 bit sequences):\n"
"\n"
"      Subject: ???(laziness), ????(impatience), ??(hubris)"
msgstr ""

#. description(perl-File-ShareDir-Install)
msgid ""
"File::ShareDir::Install allows you to install read-only data files from a distribution. It is a companion module to the File::ShareDir manpage, which allows you to locate these files after installation.\n"
"\n"
"It is a port the Module::Install::Share manpage to the ExtUtils::MakeMaker manpage with the improvement of only installing the files you want; '.svn' and other source-control junk will be ignored."
msgstr ""

#. description(perl-File-Which)
msgid "File::Which was created to be able to get the paths to executable programs on systems under which the `which' program wasn't implemented in the shell."
msgstr ""

#. description(perl-File-pushd)
msgid ""
"File::pushd does a temporary 'chdir' that is easily and automatically reverted, similar to 'pushd' in some Unix command shells. It works by creating an object that caches the original working directory. When the object is destroyed, the destructor calls 'chdir' to revert to the original working directory. By storing the object in a lexical variable with a limited scope, this happens automatically at the end of the scope.\n"
"\n"
"This is very handy when working with temporary directories for tasks like testing; a function is provided to streamline getting a temporary directory from the File::Temp manpage.\n"
"\n"
"For convenience, the object stringifies as the canonical form of the absolute pathname of the directory entered."
msgstr ""

#. summary(perl-XML-Filter-BufferText)
msgid "Filter to put all characters() in one event"
msgstr ""

#. summary(perl-URI-Find)
msgid "Find URIs in arbitrary text"
msgstr ""

#. summary(perl-Module-Find)
msgid "Find and use installed modules in a (sub)category"
msgstr ""

#. summary(perl-Devel-Cycle)
msgid "Find memory cycles in objects"
msgstr ""

#. summary(perl-File-HomeDir)
msgid "Find your home and other directories on any platform"
msgstr ""

#. description(perl-Test-ClassAPI)
msgid "For many APIs with large numbers of classes, it can be very useful to be able to do a quick once-over to make sure that classes, methods, and inheritance is correct, before doing more comprehensive testing. This module aims to provide such a capability."
msgstr ""

#. summary(perl-MooseX-Meta-TypeConstraint-ForceCoercion)
msgid "Force coercion when validating type constraints"
msgstr ""

#. summary(perl-Lingua-EN-Inflect-Number)
msgid "Force number of words to singular or plural"
msgstr ""

#. summary(perl-Test-SharedFork)
msgid "Fork test"
msgstr ""

#. summary(perl-Pod-Spell)
msgid "Formatter for spellchecking Pod"
msgstr ""

#. summary(perl-Test-Inter)
msgid "Framework for more readable interactive test scripts"
msgstr ""

#. description(perl-GD-Barcode)
msgid ""
"GD::Barcode is a subclass of GD and allows you to create barcode image with GD. This module based on \"Generate Barcode Ver 1.02 By Shisei Hanai 97/08/22\".\n"
"\n"
"From 1.14, you can use this module even if no GD (except plot method)."
msgstr ""

#. summary(perl-SQL-Abstract)
msgid "Generate SQL from Perl data structures"
msgstr ""

#. summary(perl-Class-MakeMethods)
msgid "Generate common types of methods"
msgstr ""

#. summary(perl-Object-Signature)
msgid "Generate cryptographic signatures for objects"
msgstr ""

#. summary(perl-Package-Generator)
msgid "Generate new packages quickly and easily"
msgstr ""

#. summary(perl-Email-MessageID)
msgid "Generate world unique message-ids."
msgstr ""

#. description(php5-pear-Date)
msgid "Generic classes for representation and manipulation of dates, times and time zones without the need of timestamps, which is a huge limitation for php programs. Includes time zone data, time zone conversions and many date/time conversions. It does not rely on 32-bit system date stamps, so you can display calendars and compare dates that date pre 1970 and post 2038. This package also provides a class to convert date strings between Gregorian and Human calendar formats."
msgstr ""

#. summary(php5-pear-Date)
msgid "Generic date/time handling"
msgstr ""

#. summary(perl-Net-Whois-Raw)
msgid "Get Whois information for domains"
msgstr ""

#. summary(perl-Getopt-Long-Descriptive)
msgid "Getopt::Long, but simpler and more powerful"
msgstr ""

#. description(perl-Getopt-Long-Descriptive)
msgid ""
"Getopt::Long::Descriptive is yet another Getopt library. It's built atop Getopt::Long, and gets a lot of its features, but tries to avoid making you think about its huge array of options.\n"
"\n"
"It also provides usage (help) messages, data validation, and a few other useful features."
msgstr ""

#. summary(perl-Config-GitLike)
msgid "Git-compatible config file parsing"
msgstr ""

#. summary(perl-Class-Container)
msgid "Glues object frameworks together transparently"
msgstr ""

#. description(perl-GnuPG-Interface)
msgid "GnuPG::Interface and its associated modules are designed to provide an object-oriented method for interacting with GnuPG, being able to perform functions such as but not limited to encrypting, signing, decryption, verification, and key-listing parsing."
msgstr ""

#. summary(perl-Graph)
msgid "Graph data structures and algorithms"
msgstr ""

#. summary(php5-pear-ezc-Graph)
msgid "Graph package of ezcomponents"
msgstr ""

#. description(perl-Graph)
msgid "Graph::Directed allows you to create directed graphs. For the available methods, see Graph. http://search.cpan.org/~jhi/Graph-0.94/lib/Graph.pod"
msgstr ""

#. summary(ack:perl-App-Ack)
msgid "Grep-Like Text Finder Perl Module"
msgstr ""

#. summary(perl-HTML-FormHandler)
msgid "HTML forms using Moose"
msgstr ""

#. description(perl-HTML-RewriteAttributes)
msgid ""
"HTML::RewriteAttributes is designed for simple yet powerful HTML attribute rewriting.\n"
"\n"
"You simply specify a callback to run for each attribute and we do the rest for you.\n"
"\n"
"This module is designed to be subclassable to make handling special cases eaiser. See the source for methods you can override.\n"
"\n"
"Author:\n"
"-------     Shawn M Moore, <sartak@bestpractical.com>"
msgstr ""

#. summary(perl-HTTP-Body)
msgid "HTTP Body Parser"
msgstr ""

#. description(perl-HTTP-Body)
msgid ""
"HTTP::Body parses chunks of HTTP POST data and supports application/octet-stream, application/x-www-form-urlencoded, and multipart/form-data.\n"
"\n"
"Chunked bodies are supported by not passing a length value to new().\n"
"\n"
"It is currently used by the Catalyst manpage to parse POST bodies."
msgstr ""

#. summary(perl-Data-Hierarchy)
msgid "Handle data in a hierarchical structure"
msgstr ""

#. summary(perl-WWW-Mechanize)
msgid "Handy web browsing in a Perl object"
msgstr ""

#. description(perl-Hash-Merge)
msgid ""
"Hash::Merge merges two arbitrarily deep hashes into a single hash. That is, at any level, it will add non-conflicting key-value pairs from one hash to the other, and follows a set of specific rules when there are key value conflicts (as outlined below). The hash is followed recursively, so that deeply nested hashes that are at the same level will be merged when the parent hashes are merged. *Please note that self-referencing hashes, or recursive references, are not handled well by this method.*\n"
"\n"
"Values in hashes are considered to be either ARRAY references, HASH references, or otherwise are treated as SCALARs. By default, the data passed to the merge function will be cloned using the Clone module; however, if necessary, this behavior can be changed to use as many of the original values as possible. (See 'set_clone_behavior').\n"
"\n"
"Because there are a number of possible ways that one may want to merge values when keys are conflicting, Hash::Merge provides several preset methods for your convenience, as well as a way to define you own."
msgstr ""

#. description(perl-Hash-Merge-Simple)
msgid ""
"Hash::Merge::Simple will recursively merge two or more hashes and return the result as a new hash reference. The merge function will descend and merge hashes that exist under the same node in both the left and right hash, but doesn't attempt to combine arrays, objects, scalars, or anything else. The rightmost hash also takes precedence, replacing whatever was in the left hash if a conflict occurs.\n"
"\n"
"This code was pretty much taken straight from the Catalyst::Utils manpage, and modified to handle more than 2 hashes at the same time."
msgstr ""

#. description(perl-Hash-MultiValue)
msgid "Hash::MultiValue is an object (and a plain hash reference) that may contain multiple values per key, inspired by MultiDict of WebOb."
msgstr ""

#. description(perl-Data-OptList)
msgid ""
"Hashes are great for storing named data, but if you want more than one entry for a name, you have to use a list of pairs. Even then, this is really boring to write:\n"
"\n"
"  $values = [     foo => undef,     bar => undef,     baz => undef,     xyz => { ... },   ];\n"
"\n"
"Just look at all those undefs! Don't worry, we can get rid of those:\n"
"\n"
"  $values = [     map { $_ => undef } qw(foo bar baz),     xyz => { ... },   ];\n"
"\n"
"Aaaauuugh! We've saved a little typing, but now it requires thought to read, and thinking is even worse than typing.\n"
"\n"
"With Data::OptList, you can do this instead:\n"
"\n"
"  $values = Data::OptList::mkopt([     qw(foo bar baz),     xyz => { ... },   ]);\n"
"\n"
"This works by assuming that any defined scalar is a name and any reference following a name is its value."
msgstr ""

#. description(perl-Sysadm-Install)
msgid ""
"Have you ever wished for your installation shell scripts to run reproducably, without much programming fuzz, and even with optional logging enabled? Then give up shell programming, use Perl.\n"
"\n"
"'Sysadm::Install' executes shell-like commands performing typical installation tasks: Copying files, extracting tarballs, calling 'make'. It has a 'fail once and die' policy, meticulously checking the result of every operation and calling 'die()' immeditatly if anything fails.\n"
"\n"
"'Sysadm::Install' also supports a _dry_run_ mode, in which it logs everything, but suppresses any write actions. Dry run mode is enabled by calling 'Sysadm::Install::dry_run(1)'. To switch back to normal, call 'Sysadm::Install::dry_run(0)'.\n"
"\n"
"As of version 0.17, 'Sysadm::Install' supports a _confirm_ mode, in which it interactively asks the user before running any of its functions (just like 'rm -i'). _confirm_ mode is enabled by calling 'Sysadm::Install::confirm(1)'. To switch back to normal, call 'Sysadm::Install::confirm(0)'.\n"
"\n"
"'Sysadm::Install' is fully Log4perl-enabled. To start logging, just initialize 'Log::Log4perl'. 'Sysadm::Install' acts as a wrapper class, meaning that file names and line numbers are reported from the calling program's point of view."
msgstr ""

#. summary(perl-Data-Page)
msgid "Help when paging through sets of results"
msgstr ""

#. description(perl-Hook-LexWrap)
msgid "Hook::LexWrap allows you to install a pre- or post-wrapper (or both) around an existing subroutine. Unlike other modules that provide this capacity (e.g. Hook::PreAndPost and Hook::WrapSub), Hook::LexWrap implements wrappers in such a way that the standard caller function works correctly within the wrapped subroutine."
msgstr ""

#. summary(php5-pear-Horde_Auth)
#, fuzzy
msgid "Horde Authentication API"
msgstr "4.6 配置 eDirectory 鉴定"

#. summary(php5-pear-Horde_Browser)
msgid "Horde Browser API"
msgstr ""

#. summary(php5-pear-Horde_Core)
#, fuzzy
msgid "Horde Core Framework libraries"
msgstr "Tcl/Tk 及其开发工具。"

#. description(php5-pear-Horde_Log)
msgid "Horde Logging package with configurable handlers, filters, and formatting."
msgstr ""

#. summary(php5-pear-Horde_Scheduler)
#, fuzzy
msgid "Horde Scheduler System"
msgstr "图形基础系统"

#. description(php5-pear-Horde_Template)
msgid "Horde Template system. Adapted from bTemplate, by Brian Lozier <brian@massassi.net>."
msgstr ""

#. description(php5-pear-Horde_Db)
msgid "Horde database/SQL abstraction layer"
msgstr ""

#. description(php5-pear-Horde_Cli)
msgid "Horde_Cli:: API for basic command-line functionality/checks"
msgstr ""

#. description(php5-pear-Horde_Cli_Modular)
msgid "Horde_Cli_Modular:: Modular API for basic command-line functionality/checks"
msgstr ""

#. description(php5-pear-Horde_SessionHandler)
msgid "Horde_SessionHandler defines an API for implementing custom session handlers for PHP."
msgstr ""

#. description(php5-pear-Horde_Share)
msgid "Horde_Share provides an interface to all shared resources a user owns or has access to."
msgstr ""

#. description(perl-strictures)
msgid ""
"I've been writing the equivalent of this module at the top of my code for about a year now. I figured it was time to make it shorter.\n"
"\n"
"Things like the importer in 'use Moose' don't help me because they turn warnings on but don't make them fatal - which from my point of view is useless because I want an exception to tell me my code isn't warnings clean.\n"
"\n"
"Any time I see a warning from my code, that indicates a mistake.\n"
"\n"
"Any time my code encounters a mistake, I want a crash - not spew to STDERR and then unknown (and probably undesired) subsequent behaviour.\n"
"\n"
"I also want to ensure that obvious coding mistakes, like indirect object syntax (and not so obvious mistakes that cause things to accidentally compile as such) get caught, but not at the cost of an XS dependency and not at the cost of blowing things up on another machine.\n"
"\n"
"Therefore, strictures turns on additional checking, but only when it thinks it's running in a test file in a VCS checkout - though if this causes undesired behaviour this can be overridden by setting the PERL_STRICTURES_EXTRA environment variable.\n"
"\n"
"If additional useful author side checks come to mind, I'll add them to the _EXTRA code path only - this will result in a minor version increase (i.e. 1.000000 to 1.001000 (1.1.0) or similar). Any fixes only to the mechanism of this code will result in a subversion increas (i.e. 1.000000 to 1.000001 (1.0.1)).\n"
"\n"
"If the behaviour of 'use strictures' in normal mode changes in any way, that will constitute a major version increase - and the code already checks when its version is tested to ensure that\n"
"\n"
"  use strictures 1;\n"
"\n"
"will continue to only introduce the current set of strictures even if 2.0 is installed."
msgstr ""

#. description(perl-IO-Pager)
msgid ""
"IO::Pager can be used to locate an available pager and set the _PAGER_ environment variable (see the /NOTES manpage). It is also a factory for creating I/O objects such as the IO::Pager::Buffered manpage and the IO::Pager::Unbuffered manpage.\n"
"\n"
"IO::Pager subclasses are designed to programmatically decide whether or not to pipe a filehandle's output to a program specified in _PAGER_. Subclasses may implement only the IO handle methods desired and inherit the remainder of those outlined below from IO::Pager. For anything else, YMMV. See the appropriate subclass for implementation specific details."
msgstr ""

#. description(perl-IPC-Cmd)
msgid ""
"IPC::Cmd allows you to run commands platform independently, interactively if desired, but have them still work.\n"
"\n"
"The 'can_run' function can tell you if a certain binary is installed and if so where, whereas the 'run' function can actually execute any of the commands you give it and give you a clear return value, as well as adhere to your verbosity settings."
msgstr ""

#. description(perl-Test-Deep)
msgid ""
"If you don't know anything about automated testing in Perl then you should probably read about Test::Simple and Test::More before preceding. Test::Deep uses the Test::Builder framework.\n"
"\n"
"Test::Deep gives you very flexible ways to check that the result you got is the result you were expecting. At it's simplest it compares two structures by going through each level, ensuring that the values match, that arrays and hashes have the same elements and that references are blessed into the correct class. It also handles circular data structures without getting caught in an infinite loop.\n"
"\n"
"Where it becomes more interesting is in allowing you to do something besides simple exact comparisons. With strings, the 'eq' operator checks that 2 strings are exactly equal but sometimes that's not what you want. When you don't know exactly what the string should be but you do know some things about how it should look, 'eq' is no good and you must use pattern matching instead. Test::Deep provides pattern matching for complex data structures"
msgstr ""

#. description(perl-Test-Tester)
msgid "If you have written a test module based on Test::Builder then Test::Tester allows you to test it with the minimum of effort."
msgstr ""

#. description(perl-HTML-Scrubber)
msgid ""
"If you wanna \"scrub\" or \"sanitize\" html input in a reliable and flexible fashion, then this module is for you.\n"
"\n"
"I wasn't satisfied with HTML::Sanitizer because it is based on HTML::TreeBuilder, so I thought I'd write something similar that works directly with HTML::Parser."
msgstr ""

#. description(perl-UNIVERSAL-require)
msgid ""
"If you've ever had to do this...\n"
"\n"
"    eval \"require $module\";\n"
"\n"
"to get around the bareword caveats on require(), this module is for you. It creates a universal require() class method that will work with every Perl module and its secure. So instead of doing some arcane eval() work, you can do this:\n"
"\n"
"    $module->require;\n"
"\n"
"It doesn't save you much typing, but it'll make alot more sense to someone who's not a ninth level Perl acolyte."
msgstr ""

#. description(perl-MooseX-MultiInitArg)
msgid ""
"If you've ever wanted to be able to call an attribute any number of things while you're passing arguments to your object constructor, Now You Can.\n"
"\n"
"The primary motivator is that I have some attributes that were named inconsistently, and I wanted to rename them without breaking backwards compatibility with my existing API."
msgstr ""

#. summary(perl-Class-Singleton)
msgid "Implementation of a \"Singleton\" class"
msgstr ""

#. description(perl-Test-NoWarnings)
msgid ""
"In general, your tests shouldn't produce warnings. This modules causes any warnings to be captured and stored. It automatically adds an extra test that will run when your script ends to check that there were no warnings. If there were any warings, the test will give a \"not ok\" and diagnostics of where, when and what the warning was, including a stack trace of what was going on when the it occurred.\n"
"\n"
"If some of your tests *are supposed to* produce warnings then you should be capturing and checking them with the Test::Warn manpage, that way the Test::NoWarnings manpage will not see them and so not complain.\n"
"\n"
"The test is run by an 'END' block in Test::NoWarnings. It will not be run when any forked children exit."
msgstr ""

#. description(perl-Test-Object)
msgid ""
"In situations where you have deep trees of classes, there is a common situation in which you test a module 4 or 5 subclasses down, which should follow the correct behaviour of not just the subclass, but of all the parent classes.\n"
"\n"
"This should be done to ensure that the implementation of a subclass has not somehow \"broken\" the object's behaviour in a more general sense.\n"
"\n"
"'Test::Object' is a testing package designed to allow you to easily test what you believe is a valid object against the expected behaviour of *all* of the classes in its inheritance tree in one single call.\n"
"\n"
"To do this, you \"register\" tests (in the form of CODE or function references) with 'Test::Object', with each test associated with a particular class.\n"
"\n"
"When you call 'object_ok' in your test script, 'Test::Object' will check the object against all registered tests. For each class that your object responds to '$object->isa($class)' for, the appropriate testing function will be called.\n"
"\n"
"Doing it this way allows adapter objects and other things that respond to 'isa' differently that the default to still be tested against the classes that it is advertising itself as correctly.\n"
"\n"
"This also means that more than one test might be \"counted\" for each call to 'object_ok'. You should account for this correctly in your expected test count."
msgstr ""

#. summary(perl-Test-Fatal)
msgid "Incredibly simple helpers for testing code with exceptions"
msgstr ""

#. summary(perl-Probe-Perl)
#, fuzzy
msgid "Information about the currently running perl"
msgstr "没有可用信息。"

#. description(perl-Parse-Method-Signatures)
msgid "Inspired by the Perl6::Signature manpage but streamlined to just support the subset deemed useful for the TryCatch manpage and the MooseX::Method::Signatures manpage."
msgstr ""

#. summary(perl-File-ShareDir-Install)
#, fuzzy
msgid "Install shared files"
msgstr "安装"

#. summary(perl-Sub-Install)
msgid "Install subroutines into packages easily"
msgstr ""

#. summary(perl-Test-Manifest)
msgid "Interact with a t/test_manifest file"
msgstr ""

#. summary(perl-GraphViz)
msgid "Interface to AT&T's GraphViz. Deprecated. See GraphViz2"
msgstr ""

#. summary(perl-WWW-Shorten)
#, fuzzy
msgid "Interface to URL shortening sites."
msgstr "输入抽象层 的用户界面"

#. summary(perl-DBIx-Class-IntrospectableM2M)
msgid "Introspect many-to-many shortcuts"
msgstr ""

#. description(perl-Net-Whois-RIPE)
msgid "It intends to provide a cleaner, simpler, and complete implementation of a RIPE Database client."
msgstr ""

#. description(perl-Mixin-Linewise)
msgid "It's boring to deal with opening files for IO, converting strings to handle-like objects, and all that. With the Mixin::Linewise::Readers manpage and the Mixin::Linewise::Writers manpage, you can just write a method to handle handles, and methods for handling strings and filenames are added for you."
msgstr ""

#. summary(perl-MooseX-Iterator)
#, fuzzy
msgid "Iterate over collections"
msgstr "收藏的应用程序"

#. summary(perl-JSON)
msgid "JSON (JavaScript Object Notation) encoder/decoder"
msgstr ""

#. description(perl-JSON-RPC)
msgid ""
"JSON-RPC is a stateless and light-weight remote procedure call (RPC) protocol for inter-networking applications over HTTP. It uses JSON as the data format for of all facets of a remote procedure call, including all application data carried in parameters.\n"
"\n"
"The old modules - JSONRPC::Transport::HTTP and Apache::JSONRPC are deprecated. Please try to use JSON::RPC::Server and JSON::RPC::Client which support both JSON-RPC protocol version 1.1 and 1.0."
msgstr ""

#. summary(perl-JSON-PP)
msgid "JSON::XS compatible pure-Perl module."
msgstr ""

#. summary(perl-Locale-Maketext-Gettext)
msgid "Joins the gettext and Maketext frameworks"
msgstr ""

#. summary(perl-namespace-clean)
msgid "Keep imports and functions out of your namespace"
msgstr ""

#. summary(perl-namespace-autoclean)
msgid "Keep imports out of your namespace"
msgstr ""

#. summary(perl-Pod-Coverage-Moose)
msgid "L<Pod::Coverage> extension for L<Moose>"
msgstr ""

#. summary(pgadmin3:pgadmin3-lang)
#, fuzzy
msgid "Languages for package pgadmin3"
msgstr "语言：     "

#. summary(perl-Data-Dumper-Concise)
msgid "Less indentation and newlines plus sub deparsing"
msgstr ""

#. summary(perl-Class-Accessor-Grouped)
msgid "Lets you build groups of accessors"
msgstr ""

#. summary(perl-Hook-LexWrap)
msgid "Lexically scoped subroutine wrappers"
msgstr ""

#. description(php5-pear-Horde_Date_Parser)
msgid "Library for natural-language date parsing, with support for multiple languages and locales"
msgstr ""

#. summary(perl-Exception-Base)
#, fuzzy
msgid "Lightweight exceptions"
msgstr "文档"

#. summary(perl-Exporter-Lite)
msgid "Lightweight exporting of variables"
msgstr ""

#. summary(perl-Text-WrapI18N)
msgid "Line Wrapping Module"
msgstr ""

#. description(perl-Text-WrapI18N)
msgid "Line wrapping module with support for multibyte, fullwidth, and combining characters and languages without whitespaces between words."
msgstr ""

#. summary(perl-Package-Constants)
msgid "List all constants declared in a package"
msgstr ""

#. summary(perl-B-Keywords)
msgid "Lists of reserved barewords and symbol names"
msgstr ""

#. summary(perl-WWW-Mechanize-TreeBuilder)
msgid "Little glue"
msgstr ""

#. summary(perl-Config-Std)
msgid "Load and save configuration files in a standard format"
msgstr ""

#. summary(perl-Config-Any)
msgid "Load configuration from different file formats, transparently"
msgstr ""

#. description(perl-Class-C3-Componentised)
msgid "Load mix-ins or components to your C3-based class."
msgstr ""

#. description(perl-Locale-Maketext-Gettext)
msgid "Locale::Maketext::Gettext joins the GNU gettext and Maketext frameworks. It is a subclass of Locale::Maketext(3) that follows the way GNU gettext works. It works seamlessly, both in the sense of GNU gettext and Maketext. As a result, you enjoy both their advantages, and get rid of both their problems, too."
msgstr ""

#. summary(perl-DateTime-Locale)
msgid "Localization support for DateTime.pm"
msgstr ""

#. summary(perl-FindBin-Real)
msgid "Locate directory of original perl script"
msgstr ""

#. description(perl-FindBin-Real)
msgid ""
"Locates the full path to the script bin directory to allow the use of paths relative to the bin directory.\n"
"\n"
"This allows a user to setup a directory tree for some software with directories <root>/bin and <root>/lib and then the above example will allow the use of modules in the lib directory without knowing where the software tree is installed.\n"
"\n"
"If perl is invoked using the *-e* option or the perl script is read from 'STDIN' then FindBin sets both 'Bin()' and 'RealBin()' return values to the current directory."
msgstr ""

#. summary(perl-Log-Dispatch-Config)
#, fuzzy
msgid "Log4j for Perl"
msgstr "7.0 文档"

#. description(perl-Log-Dispatch-Config)
msgid "Log::Dispatch::Config is a subclass of Log::Dispatch and provides a way to configure Log::Dispatch object with configulation file (default, in AppConfig format). I mean, this is log4j for Perl, not with all API compatibility though."
msgstr ""

#. description(perl-Log-Dispatchouli)
msgid ""
"Log::Dispatchouli is a thin layer above the Log::Dispatch manpage and meant to make it dead simple to add logging to a program without having to think much about categories, facilities, levels, or things like that. It is meant to make logging just configurable enough that you can find the logs you want and just easy enough that you will actually log things.\n"
"\n"
"Log::Dispatchouli can log to syslog (if you specify a facility), standard error or standard output, to a file, or to an array in memory. That last one is mostly useful for testing.\n"
"\n"
"In addition to providing as simple a way to get a handle for logging operations, Log::Dispatchouli uses the String::Flogger manpage to process the things to be logged, meaning you can easily log data structures. Basically: strings are logged as is, arrayrefs are taken as (sprintf format, args), and subroutines are called only if needed. For more information read the the String::Flogger manpage docs."
msgstr ""

#. description(perl-MIME-Charset)
msgid "MIME::Charset provides informations about character sets used for MIME messages on Internet."
msgstr ""

#. description(perl-Config-MVP)
msgid ""
"MVP is a mechanism for loading configuration (or other information) for libraries. It doesn't read a file or a database. It's a helper for things that do.\n"
"\n"
"The idea is that you end up with a Config::MVP::Sequence object, and that you can use that object to fully configure your library or application. The sequence will contain a bunch of Config::MVP::Section objects, each of which is meant to provide configuration for a part of your program. Most of these sections will be directly related to a Perl library that you'll use as a plugin or helper. Each section will have a name, and every name in the sequence will be unique.\n"
"\n"
"This is a pretty abstract set of behaviors, so we'll provide some more concrete examples that should help explain how things work."
msgstr ""

#. summary(perl-Config-Auto)
#, fuzzy
msgid "Magical config file parser"
msgstr "%s 配置失败。"

#. summary(perl-Class-C3-Adopt-NEXT)
msgid "Make NEXT suck less"
msgstr ""

#. summary(perl-Gravatar-URL)
msgid "Make URLs for Gravatars from an email address"
msgstr ""

#. summary(perl-Test-NoWarnings)
msgid "Make sure you didn't emit any warnings while testing"
msgstr ""

#. summary(perl-MooseX-Object-Pluggable)
msgid "Make your classes pluggable"
msgstr ""

#. summary(perl-MooseX-StrictConstructor)
msgid "Make your object constructors blow up on unknown attributes"
msgstr ""

#. summary(perl-Package-DeprecationManager)
msgid "Manage deprecation warnings for your distribution"
msgstr ""

#. summary(perl-App-perlbrew)
msgid "Manage perl installations in your $HOME"
msgstr ""

#. summary(perl-Net-CIDR-Set)
msgid "Manipulate sets of IP addresses"
msgstr ""

#. summary(perl-SQL-Translator)
msgid "Manipulate structured data definitions (SQL and more)"
msgstr ""

#. description(perl-Package-Stash)
msgid ""
"Manipulating stashes (Perl's symbol tables) is occasionally necessary, but incredibly messy, and easy to get wrong. This module hides all of that behind a simple API.\n"
"\n"
"NOTE: Most methods in this class require a variable specification that includes a sigil. If this sigil is absent, it is assumed to represent the IO slot.\n"
"\n"
"Due to limitations in the typeglob API available to perl code, and to typeglob manipulation in perl being quite slow, this module provides two implementations - one in pure perl, and one using XS. The XS implementation is to be preferred for most usages; the pure perl one is provided for cases where XS modules are not a possibility. The current implementation in use can be set by setting '$ENV{PACKAGE_STASH_IMPLEMENTATION}' or '$Package::Stash::IMPLEMENTATION' before loading Package::Stash (with the environment variable taking precedence), otherwise, it will use the XS implementation if possible, falling back to the pure perl one."
msgstr ""

#. summary(perl-Text-Reform)
msgid "Manual text wrapping and reformatting"
msgstr ""

#. description(perl-CPAN-DistnameInfo)
msgid ""
"Many online services that are centered around CPAN attempt to associate multiple uploads by extracting a distribution name from the filename of the upload. For most distributions this is easy as they have used ExtUtils::MakeMaker or Module::Build to create the distribution, which results in a uniform name. But sadly not all uploads are created in this way.\n"
"\n"
"'CPAN::DistnameInfo' uses heuristics that have been learnt by the http://search.cpan.org/ manpage to extract the distribution name and version from filenames and also report if the version is to be treated as a developer release\n"
"\n"
"The constructor takes a single pathname, returning an object with the following methods\n"
"\n"
"* cpanid\n"
"\n"
"  If the path given looked like a CPAN authors directory path, then this   will be the the CPAN id of the author.\n"
"\n"
"* dist\n"
"\n"
"  The name of the distribution\n"
"\n"
"* distvname\n"
"\n"
"  The file name with any suffix and leading directory names removed\n"
"\n"
"* filename\n"
"\n"
"  If the path given looked like a CPAN authors directory path, then this   will be the path to the file relative to the detected CPAN author   directory. Otherwise it is the path that was passed in.\n"
"\n"
"* maturity\n"
"\n"
"  The maturity of the distribution. This will be either 'released' or   'developer'\n"
"\n"
"* extension\n"
"\n"
"  The extension of the distribution, often used to denote the archive type   (e.g. 'tar.gz')\n"
"\n"
"* pathname\n"
"\n"
"  The pathname that was passed to the constructor when creating the object.\n"
"\n"
"* properties\n"
"\n"
"  This will return a list of key-value pairs, suitable for assigning to a   hash, for the known properties.\n"
"\n"
"* version\n"
"\n"
"  The extracted version"
msgstr ""

#. summary(perl-Perl-OSType)
msgid "Map Perl operating system names to generic types"
msgstr ""

#. summary(perl-CPAN-Perl-Releases)
msgid "Mapping Perl releases on CPAN to the location of the tarballs"
msgstr ""

#. description(perl-Text-Markdown)
msgid ""
"Markdown is a text-to-HTML filter; it translates an easy-to-read / easy-to-write structured text format into HTML. Markdown's text format is most similar to that of plain text email, and supports features such as headers, *emphasis*, code blocks, blockquotes, and links.\n"
"\n"
"Markdown's syntax is designed not as a generic markup language, but specifically to serve as a front-end to (X)HTML. You can use span-level HTML tags anywhere in a Markdown document, and you can use block level HTML tags (like <div> and <table> as well)."
msgstr ""

#. summary(perl-Hash-Merge)
msgid "Merges arbitrarily deep hashes into a single hash"
msgstr ""

#. description(perl-Email-MessageID)
msgid "Message-ids are optional, but highly recommended, headers that identify a message uniquely. This software generates a unique message-id."
msgstr ""

#. description(perl-Meta-Builder)
msgid ""
"Meta programming is becomming more and more popular. The popularity of Meta programming comes from the fact that many problems are made significantly easier. There are a few specialized Meta tools out there, for instance the Class:MOP manpage which is used by the Moose manpage to track class metadata.\n"
"\n"
"Meta::Builder is designed to be a generic tool for writing Meta objects. Unlike specialized tools, Meta::Builder makes no assumptions about what metrics you will care about. Meta::Builder also mkaes it simple for others to extend your meta-object based tools by providing hooks for other packages to add metrics to your meta object.\n"
"\n"
"If a specialized Meta object tool is available ot meet your needs please use it. However if you need a simple Meta object to track a couple metrics, use Meta::Builder.\n"
"\n"
"Meta::Builder is also low-sugar and low-dep. In most cases you will not want a class that needs a meta object to use your meta-object class directly. Rather you will usually want to create a sugar class that exports enhanced API functions that manipulate the meta object."
msgstr ""

#. summary(perl-MooseX-Method-Signatures)
msgid "Method declarations with type constraints and no source filter"
msgstr ""

#. description(perl-Class-Method-Modifiers)
msgid ""
"Method modifiers are a convenient feature from the CLOS (Common Lisp Object System) world.\n"
"\n"
"In its most basic form, a method modifier is just a method that calls '$self->SUPER::foo(@_)'. I for one have trouble remembering that exact invocation, so my classes seldom re-dispatch to their base classes. Very bad!\n"
"\n"
"'Class::Method::Modifiers' provides three modifiers: 'before', 'around', and 'after'. 'before' and 'after' are run just before and after the method they modify, but can not really affect that original method. 'around' is run in place of the original method, with a hook to easily call that original method. See the 'MODIFIERS' section for more details on how the particular modifiers work.\n"
"\n"
"One clear benefit of using 'Class::Method::Modifiers' is that you can define multiple modifiers in a single namespace. These separate modifiers don't need to know about each other. This makes top-down design easy. Have a base class that provides the skeleton methods of each operation, and have plugins modify those methods to flesh out the specifics.\n"
"\n"
"Parent classes need not know about 'Class::Method::Modifiers'. This means you should be able to modify methods in _any_ subclass. See the Term::VT102::ZeroBased manpage for an example of subclassing with CMM.\n"
"\n"
"In short, 'Class::Method::Modifiers' solves the problem of making sure you call '$self->SUPER::foo(@_)', and provides a cleaner interface for it.\n"
"\n"
"As of version 1.00, 'Class::Method::Modifiers' is faster in some cases than the Moose manpage. See 'benchmark/method_modifiers.pl' in the the Moose manpage distribution."
msgstr ""

#. description(perl-Class-Method-Modifiers-Fast)
msgid ""
"Method modifiers are a powerful feature from the CLOS (Common Lisp Object System) world.\n"
"\n"
"'Class::Method::Modifiers::Fast' provides three modifiers: 'before', 'around', and 'after'. 'before' and 'after' are run just before and after the method they modify, but can not really affect that original method. 'around' is run in place of the original method, with a hook to easily call that original method. See the 'MODIFIERS' section for more details on how the particular modifiers work."
msgstr ""

#. summary(perl-Fennec-Lite)
msgid "Minimalist Fennec, the commonly used bits."
msgstr ""

#. summary(perl-Moo)
msgid "Minimalist Object Orientation (with Moose compatiblity)"
msgstr ""

#. summary(perl-Devel-REPL)
msgid "Modern perl interactive shell"
msgstr ""

#. summary(perl-Lingua-EN-Sentence)
msgid "Module for splitting text into sentences."
msgstr ""

#. summary(perl-Statistics-Descriptive)
msgid "Module of basic descriptive statistical functions."
msgstr ""

#. summary(perl-Module-Signature)
msgid "Module signature file manipulation"
msgstr ""

#. description(perl-Module-Depends)
msgid ""
"Module::Depends extracts module dependencies from an unpacked distribution tree.\n"
"\n"
"Module::Depends only evaluates the META.yml shipped with a distribution. This won't be effective until all distributions ship META.yml files, so we suggest you take your life in your hands and look at Module::Depends::Intrusive."
msgstr ""

#. description(perl-Module-Find)
msgid ""
"Module::Find lets you find and use modules in categories. This can be very useful for auto-detecting driver or plugin modules. You can differentiate between looking in the category itself or in all subcategories.\n"
"\n"
"If you want Module::Find to search in a certain directory on your harddisk (such as the plugins directory of your software installation), make sure you modify '@INC' before you call the Module::Find functions."
msgstr ""

#. description(perl-Perl-OSType)
msgid ""
"Modules that provide OS-specific behaviors often need to know if the current operating system matches a more generic type of operating systems. For example, 'linux' is a type of 'Unix' operating system and so is 'freebsd'.\n"
"\n"
"This module provides a mapping between an operating system name as given by '$^O' and a more generic type. The initial version is based on the OS type mappings provided in the Module::Build manpage and the ExtUtils::CBuilder manpage. (Thus, Microsoft operating systems are given the type 'Windows' rather than 'Win32'.)"
msgstr ""

#. summary(perl-Task-Moose)
msgid "Moose in a box"
msgstr ""

#. summary(perl-MooseX-Types-Perl)
msgid "Moose types that check against Perl syntax"
msgstr ""

#. description(perl-Moose-Autobox)
msgid ""
"Moose::Autobox provides an implementation of SCALAR, ARRAY, HASH & CODE for use with the autobox manpage. It does this using a hierarchy of roles in a manner similar to what Perl 6 _might_ do. This module, like the Class::MOP manpage and the Moose manpage, was inspired by my work on the Perl 6 Object Space, and the 'core types' implemented there.\n"
"\n"
"A quick word about autobox     The the autobox manpage module provides the ability for calling     'methods' on normal Perl values like Scalars, Arrays, Hashes and Code     references. This gives the illusion that Perl's types are first-class     objects. However, this is only an illusion, albeit a very nice one. I     created this module because the autobox manpage itself does not     actually provide an implementation for the Perl types but instead only     provides the 'hooks' for others to add implementation too.\n"
"\n"
"Is this for real? or just play?     Several people are using this module in serious applications and it     seems to be quite stable. The underlying technologies of the autobox     manpage and the Moose::Role manpage are also considered stable. There     is some performance hit, but as I am fond of saying, nothing in life is     free. If you have any questions regarding this module, either email me,     or stop by #moose on irc.perl.org and ask around.\n"
"\n"
"Adding additional methods     *Moose::Autobox* asks the autobox manpage to use the     *Moose::Autobox::** namespace prefix so as to avoid stepping on the     toes of other the autobox manpage modules. This means that if you want     to add methods to a particular perl type (i.e. - monkeypatch), then you     must do this:\n"
"\n"
"      sub Moose::Autobox::SCALAR::bar { 42 }\n"
"\n"
"    instead of this:\n"
"\n"
"      sub SCALAR::bar { 42 }\n"
"\n"
"    as you would with vanilla autobox."
msgstr ""

#. description(perl-MooseX-InsideOut)
msgid "MooseX::InsideOut provides metaroles for inside-out objects. That is, it sets up attribute slot storage somewhere other than inside '$self'. This means that you can extend non-Moose classes, whose internals you either don't want to care about or aren't hash-based."
msgstr ""

#. description(perl-MooseX-OneArgNew)
msgid ""
"MooseX::OneArgNew lets your constructor take a single argument, which will be translated into the value for a one-entry hashref. It is a the parameterized role|MooseX::Role::Parameterized manpage with two parameters:\n"
"\n"
"* type\n"
"\n"
"  The Moose type that the single argument must be for the one-arg form to   work. This should be an existing type, and may be either a string type or   a MooseX::Type.\n"
"\n"
"* init_arg\n"
"\n"
"  This is the string that will be used as the key for the hashref   constructed from the one-arg call to new."
msgstr ""

#. description(perl-MooseX-POE)
msgid "MooseX::POE is a the Moose manpage wrapper around a the POE::Session manpage."
msgstr ""

#. description(perl-MooseX-Role-Cmd)
msgid "MooseX::Role::Cmd is a the Moose manpage role intended to ease the task of building command-line wrapper modules. It automatically maps the Moose manpage objects into command strings which are passed to the IPC::Cmd manpage."
msgstr ""

#. description(perl-MooseX-Storage)
msgid "MooseX::Storage is a serialization framework for Moose, it provides a very flexible and highly pluggable way to serialize Moose classes to a number of different formats and styles."
msgstr ""

#. description(perl-MooseX-Types-Path-Class)
msgid ""
"MooseX::Types::Path::Class creates common the Moose manpage types, coercions and option specifications useful for dealing with the Path::Class manpage objects as the Moose manpage attributes.\n"
"\n"
"Coercions (see the Moose::Util::TypeConstraints manpage) are made from both 'Str' and 'ArrayRef' to both the Path::Class::Dir manpage and the Path::Class::File manpage objects. If you have the MooseX::Getopt manpage installed, the Getopt option type (\"=s\") will be added for both the Path::Class::Dir manpage and the Path::Class::File manpage."
msgstr ""

#. description(perl-MooseX-Workers)
msgid "MooseX::Workers is a Role that provides easy delegation of long-running tasks into a managed child process. Process management is taken care of via POE and its POE::Wheel::Run module."
msgstr ""

#. description(perl-boolean)
msgid ""
"Most programming languages have a native 'Boolean' data type. Perl does not.\n"
"\n"
"Perl has a simple and well known Truth System. The following scalar values are false:\n"
"\n"
"    $false1 = undef;     $false2 = 0;     $false3 = 0.0;     $false4 = '';     $false5 = '0';\n"
"\n"
"Every other scalar value is true.\n"
"\n"
"This module provides basic Boolean support, by defining two special objects: 'true' and 'false'."
msgstr ""

#. summary(perl-MRO-Compat)
msgid "Mro::* interface compatibility for Perls < 5.9.5"
msgstr ""

#. description(perl-CursesWidgets)
msgid "NOTE:  This is **NOT** backwards compatible with the pre-1.99 versions.        This is entirely OO-based, hence any older scripts relying on the        old versions will need to be rewritten."
msgstr ""

#. summary(perl-MooseX-SemiAffordanceAccessor)
msgid "Name your accessors foo() and set_foo()"
msgstr ""

#. description(perl-Net-DNS-Resolver-Programmable)
msgid "Net::DNS::Resolver::Programmable is a Net::DNS::Resolver descendant class that allows a virtual DNS to be emulated instead of querying the real DNS.  A set of static DNS records may be supplied, or arbitrary code may be specified as a means for retrieving DNS records, or even generating them on the fly."
msgstr ""

#. description(perl-Net-HTTPServer)
msgid "Net::HTTPServer basically turns a CGI script into a stand alone server. Useful for temporary services, mobile/local servers, or embedding an HTTP server into another program."
msgstr ""

#. description(perl-Net-Whois-Raw)
msgid ""
"Net::Whois::Raw queries WHOIS servers about domains. The module supports recursive WHOIS queries. Also queries via HTTP is supported for some TLDs.\n"
"\n"
"Setting the variables $OMIT_MSG and $CHECK_FAIL will match the results against a set of known patterns. The first flag will try to omit the copyright message/disclaimer, the second will attempt to determine if the search failed and return undef in such a case.\n"
"\n"
"*IMPORTANT*: these checks merely use pattern matching; they will work on several servers but certainly not on all of them."
msgstr ""

#. description(perl-Number-Compare)
msgid ""
"Number::Compare compiles a simple comparison to an anonymous subroutine, which you can call with a value to be tested again.\n"
"\n"
"Now this would be very pointless, if Number::Compare didn't understand magnitudes.\n"
"\n"
"The target value may use magnitudes of kilobytes ('k', 'ki'), megabytes ('m', 'mi'), or gigabytes ('g', 'gi'). Those suffixed with an 'i' use the appropriate 2**n version in accordance with the IEC standard: http://physics.nist.gov/cuu/Units/binary.html"
msgstr ""

#. summary(perl-Number-Compare)
msgid "Numeric comparisons"
msgstr ""

#. description(perl-OLE-Storage_Lite)
msgid ""
"OLE::Storage_Lite allows you to read and write an OLE structured file.\n"
"\n"
"OLE::Storage_Lite::PPS is a class representing PPS. OLE::Storage_Lite::PPS::Root, OLE::Storage_Lite::PPS::File and OLE::Storage_Lite::PPS::Dir are subclasses of OLE::Storage_Lite::PPS."
msgstr ""

#. summary(perl-Text-SpellChecker)
msgid "OO interface for spell-checking a block of text"
msgstr ""

#. description(perl-HTML-Form)
msgid "Objects of the 'HTML::Form' class represents a single HTML '<form> ... </form>' instance. A form consists of a sequence of inputs that usually have names, and which can take on various values. The state of a form can be tweaked and it can then be asked to provide 'HTTP::Request' objects that can be passed to the request() method of 'LWP::UserAgent'."
msgstr ""

#. description(perl-ExtUtils-CChecker)
msgid ""
"Often Perl modules are written to wrap functionallity found in existing C headers, libraries, or to use OS-specific features. It is useful in the _Build.PL_ or _Makefile.PL_ file to check for the existance of these requirements before attempting to actually build the module.\n"
"\n"
"Objects in this class provide an extension around the ExtUtils::CBuilder manpage to simplify the creation of a _.c_ file, compiling, linking and running it, to test if a certain feature is present.\n"
"\n"
"It may also be necessary to search for the correct library to link against, or for the right include directories to find header files in. This class also provides assistance here."
msgstr ""

#. description(perl-MooseX-Traits)
msgid ""
"Often you want to create components that can be added to a class arbitrarily. This module makes it easy for the end user to use these components. Instead of requiring the user to create a named class with the desired roles applied, or apply roles to the instance one-by-one, he can just create a new class from yours with 'with_traits', and then instantiate that.\n"
"\n"
"There is also 'new_with_traits', which exists for compatibility reasons. It accepts a 'traits' parameter, creates a new class with those traits, and then insantiates it.\n"
"\n"
"   Class->new_with_traits( traits => [qw/Foo Bar/], foo => 42, bar => 1 )\n"
"\n"
"returns exactly the same object as\n"
"\n"
"   Class->with_traits(qw/Foo Bar/)->new( foo => 42, bar => 1 )\n"
"\n"
"would. But you can also store the result of 'with_traits', and call other methods:\n"
"\n"
"   my $c = Class->with_traits(qw/Foo Bar/);    $c->new( foo => 42 );    $c->whatever( foo => 1234 );\n"
"\n"
"And so on."
msgstr ""

#. description(perl-MooseX-Daemonize)
msgid "Often you want to write a persistant daemon that has a pid file, and responds appropriately to Signals. This module provides a set of basic roles as an infrastructure to do that."
msgstr ""

#. description(perl-Dist-CheckConflicts)
msgid ""
"One shortcoming of the CPAN clients that currently exist is that they have no way of specifying conflicting downstream dependencies of modules. This module attempts to work around this issue by allowing you to specify conflicting versions of modules separately, and deal with them after the module is done installing.\n"
"\n"
"For instance, say you have a module 'Foo', and some other module 'Bar' uses 'Foo'. If 'Foo' were to change its API in a non-backwards-compatible way, this would cause 'Bar' to break until it is updated to use the new API. 'Foo' can't just depend on the fixed version of 'Bar', because this will cause a circular dependency (because 'Bar' is already depending on 'Foo'), and this doesn't express intent properly anyway - 'Foo' doesn't use 'Bar' at all. The ideal solution would be for there to be a way to specify conflicting versions of modules in a way that would let CPAN clients update conflicting modules automatically after an existing module is upgraded, but until that happens, this module will allow users to do this manually.\n"
"\n"
"This module accepts a hash of options passed to its 'use' statement, with these keys being valid:\n"
"\n"
"* -conflicts\n"
"\n"
"  A hashref of conflict specifications, where keys are module names, and   values are the last broken version - any version greater than the   specified version should work.\n"
"\n"
"* -also\n"
"\n"
"  Additional modules to get conflicts from (potentially recursively). This   should generally be a list of modules which use Dist::CheckConflicts,   which correspond to the dists that your dist depends on. (In an ideal   world, this would be intuited directly from your dependency list, but the   dependency list isn't available outside of build time).\n"
"\n"
"* -dist\n"
"\n"
"  The name of the distribution, to make the error message from   check_conflicts more user-friendly.\n"
"\n"
"The methods listed below are exported by this module into the module that uses it, so you should call these methods on your module, not Dist::CheckConflicts.\n"
"\n"
"As an example, this command line can be used to update your modules, after installing the 'Foo' dist (assuming that 'Foo::Conflicts' is the module in the 'Foo' dist which uses Dist::CheckConflicts):\n"
"\n"
"    perl -MFoo::Conflicts -e'print \"$_\\n\"         for map { $_->{package} } Foo::Conflicts->calculate_conflicts' | cpanm"
msgstr ""

#. summary(perl-Browser-Open)
msgid "Open a browser in a given URL"
msgstr ""

#. summary(perl-MooseX-Types)
msgid "Organise your Moose types in libraries"
msgstr ""

#. summary(perl-MouseX-Types)
msgid "Organize your Mouse types in libraries"
msgstr ""

#. summary(php5-pear-Horde_Kolab_Storage)
msgid "PEAR: A package for handling Kolab data stored on an IMAP server"
msgstr ""

#. summary(php5-pear-Horde_Kolab_Server)
msgid "PEAR: A package for manipulating the Kolab user database"
msgstr ""

#. summary(php5-pear-Horde_Kolab_Format)
msgid "PEAR: A package for reading/writing Kolab data formats"
msgstr ""

#. summary(php5-pear-Horde_Kolab_Session)
msgid "PEAR: A package managing an active Kolab session"
msgstr ""

#. summary(php5-pear-Horde_History)
msgid "PEAR: API for tracking the history of an object"
msgstr ""

#. summary(php5-pear-Horde_Serialize)
msgid "PEAR: Data Encapulation API"
msgstr ""

#. summary(php5-pear-Horde_DataTree)
msgid "PEAR: DataTree API"
msgstr ""

#. summary(php5-pear-Horde_Text_Diff)
msgid "PEAR: Engine for performing and rendering text diffs"
msgstr ""

#. summary(php5-pear-Horde_Text_Flowed)
msgid "PEAR: Horde API for flowed text as per RFC 3676"
msgstr ""

#. summary(php5-pear-Horde_ActiveSync)
msgid "PEAR: Horde ActiveSync Server Library"
msgstr ""

#. summary(php5-pear-Horde_Autoloader)
msgid "PEAR: Horde Autoloader"
msgstr ""

#. summary(php5-pear-Horde_Cache)
msgid "PEAR: Horde Caching API"
msgstr ""

#. summary(php5-pear-Horde_Cli)
msgid "PEAR: Horde Command Line Interface API"
msgstr ""

#. summary(php5-pear-Horde_Compress)
msgid "PEAR: Horde Compression API"
msgstr ""

#. summary(php5-pear-Horde_Constraint)
#, fuzzy
msgid "PEAR: Horde Constraint library"
msgstr "1.2 新的 Xgl 配置选项"

#. summary(php5-pear-Horde_Controller)
msgid "PEAR: Horde Controller libraries"
msgstr ""

#. summary(php5-pear-Horde_Crypt)
msgid "PEAR: Horde Cryptography API"
msgstr ""

#. summary(php5-pear-Horde_Data)
msgid "PEAR: Horde Data API"
msgstr ""

#. summary(php5-pear-Horde_Db)
msgid "PEAR: Horde Database Libraries"
msgstr ""

#. summary(php5-pear-Horde_Date_Parser)
msgid "PEAR: Horde Date Parser"
msgstr ""

#. summary(php5-pear-Horde_Date)
#, fuzzy
msgid "PEAR: Horde Date package"
msgstr "更新包"

#. summary(php5-pear-Horde_Editor)
msgid "PEAR: Horde Editor API"
msgstr ""

#. summary(php5-pear-Horde_Exception)
msgid "PEAR: Horde Exception Handler"
msgstr ""

#. summary(php5-pear-Horde_Service_Facebook)
msgid "PEAR: Horde Facebook client"
msgstr ""

#. summary(php5-pear-Horde_Feed)
#, fuzzy
msgid "PEAR: Horde Feed libraries"
msgstr "网卡"

#. summary(php5-pear-Horde_Form)
msgid "PEAR: Horde Form API"
msgstr ""

#. summary(php5-pear-Horde_Http)
#, fuzzy
msgid "PEAR: Horde HTTP libraries"
msgstr "网卡"

#. summary(php5-pear-Horde_Imap_Client)
msgid "PEAR: Horde IMAP abstraction interface"
msgstr ""

#. summary(php5-pear-Horde_Image)
msgid "PEAR: Horde Image class"
msgstr ""

#. summary(php5-pear-Horde_Ldap)
#, fuzzy
msgid "PEAR: Horde LDAP libraries"
msgstr "网卡"

#. summary(php5-pear-Horde_Log)
msgid "PEAR: Horde Logging library"
msgstr ""

#. summary(php5-pear-Horde_LoginTasks)
msgid "PEAR: Horde Login Tasks System"
msgstr ""

#. summary(php5-pear-Horde_Mime)
msgid "PEAR: Horde MIME Library"
msgstr ""

#. summary(php5-pear-Horde_Mime_Viewer)
#, fuzzy
msgid "PEAR: Horde MIME Viewer Library"
msgstr "最新的桌面创新"

#. summary(php5-pear-Horde_Mail)
#, fuzzy
msgid "PEAR: Horde Mail Library"
msgstr "编目管理"

#. summary(php5-pear-Horde_Memcache)
msgid "PEAR: Horde Memcache API"
msgstr ""

#. summary(php5-pear-Horde_Notification)
msgid "PEAR: Horde Notification System"
msgstr ""

#. summary(php5-pear-Horde_Oauth)
msgid "PEAR: Horde OAuth client/server"
msgstr ""

#. summary(php5-pear-Horde_Rdo)
msgid "PEAR: Horde ORM API"
msgstr ""

#. summary(php5-pear-Horde_Pdf)
msgid "PEAR: Horde PDF library"
msgstr ""

#. summary(php5-pear-Horde_Perms)
msgid "PEAR: Horde Permissions System"
msgstr ""

#. summary(php5-pear-Horde_Prefs)
#, fuzzy
msgid "PEAR: Horde Preferences API"
msgstr "参考设置"

#. summary(php5-pear-Horde_Rpc)
msgid "PEAR: Horde RPC API"
msgstr ""

#. summary(php5-pear-Horde_Lock)
msgid "PEAR: Horde Resource Locking System"
msgstr ""

#. summary(php5-pear-Horde_Routes)
msgid "PEAR: Horde Routes URL mapping system"
msgstr ""

#. summary(php5-pear-Horde_SessionHandler)
msgid "PEAR: Horde Session Handler API"
msgstr ""

#. summary(php5-pear-Horde_Share)
msgid "PEAR: Horde Shared Permissions System"
msgstr ""

#. summary(php5-pear-Horde_Stream_Filter)
msgid "PEAR: Horde Stream filters"
msgstr ""

#. summary(php5-pear-Horde_Stream_Wrapper)
msgid "PEAR: Horde Stream wrappers"
msgstr ""

#. summary(php5-pear-Horde_Template)
msgid "PEAR: Horde Template System"
msgstr ""

#. summary(php5-pear-Horde_Text_Filter)
msgid "PEAR: Horde Text Filter API"
msgstr ""

#. summary(php5-pear-Horde_Service_Twitter)
msgid "PEAR: Horde Twitter client"
msgstr ""

#. summary(php5-pear-Horde_Group)
msgid "PEAR: Horde User Groups System"
msgstr ""

#. summary(php5-pear-Horde_Alarm)
msgid "PEAR: Horde alarm libraries"
msgstr ""

#. summary(php5-pear-Horde_Argv)
msgid "PEAR: Horde command-line argument parsing package"
msgstr ""

#. summary(php5-pear-Horde_Injector)
msgid "PEAR: Horde dependency injection container"
msgstr ""

#. summary(php5-pear-Horde_Itip)
msgid "PEAR: Horde invitation response handling"
msgstr ""

#. summary(php5-pear-Horde_Support)
msgid "PEAR: Horde support package"
msgstr ""

#. summary(php5-pear-Horde_Test)
msgid "PEAR: Horde testing base classes"
msgstr ""

#. summary(php5-pear-Horde_SyncMl)
msgid "PEAR: Horde_SyncMl provides an API for processing SyncML requests"
msgstr ""

#. summary(php5-pear-Horde_Imsp)
msgid "PEAR: IMSP API"
msgstr ""

#. summary(php5-pear-Horde_Role)
msgid "PEAR: PEAR installer role used to install Horde components"
msgstr ""

#. summary(php5-pear-Horde_Scribe)
msgid "PEAR: Scribe"
msgstr ""

#. summary(php5-pear-Horde_Secret)
msgid "PEAR: Secret Encryption API"
msgstr ""

#. summary(php5-pear-Horde_SpellChecker)
msgid "PEAR: Spellcheck API"
msgstr ""

#. summary(php5-pear-Horde_Nls)
msgid "PEAR: This package provides Native Language Support (NLS)"
msgstr ""

#. summary(php5-pear-Horde_Icalendar)
msgid "PEAR: iCalendar API"
msgstr ""

#. description(perl-Pod-Eventual)
msgid ""
"POD is a pretty simple format to write, but it can be a big pain to deal with reading it and doing anything useful with it. Most existing POD parsers care about semantics, like whether a '=item' occurred after an '=over' but before a 'back', figuring out how to link a 'L<>', and other things like that.\n"
"\n"
"Pod::Eventual is much less ambitious and much more stupid. Fortunately, stupid is often better. (That's what I keep telling myself, anyway.)\n"
"\n"
"Pod::Eventual reads line-based input and produces events describing each POD paragraph or directive it finds. Once complete events are immediately passed to the 'handle_event' method. This method should be implemented by Pod::Eventual subclasses. If it isn't, Pod::Eventual's own 'handle_event' will be called, and will raise an exception."
msgstr ""

#. description(perl-POE)
msgid ""
"POE is a framework for cooperative, event driven multitasking and networking in Perl. Other languages have similar frameworks. Python has Twisted. TCL has \"the event loop\".\n"
"\n"
"POE provides a unified interface for several other event loops, including select(), IO::Poll, the Glib manpage, the Gtk manpage, the Tk manpage, the Wx manpage, and the Gtk2 manpage. Many of these event loop interfaces were written by others, with the help of POE::Test::Loops. They may be found on the CPAN.\n"
"\n"
"POE achieves its its high degree of portability to different operating systems and Perl versions by being written entirely in Perl. CPAN hosts optional XS modules for POE if speed is more desirable than portability.\n"
"\n"
"POE is designed in layers. Each layer builds atop the lower level ones. Programs are free to use POE at any level of abstraction, and different levels can be mixed and matched seamlessly within a single program. Remember, though, that higher-level abstractions often require more resources than lower-level ones. The conveniences they provide are not free.\n"
"\n"
"POE's bundled abstraction layers are the tip of a growing iceberg. the Sprocket manpage, POE::Stage, and other CPAN distributions build upon this work. You're encouraged to look around.\n"
"\n"
"No matter how high you go, though, it all boils down to calls to POE::Kernel. So your down-to-earth code can easily cooperate with stratospheric systems."
msgstr ""

#. description(perl-POE-Test-Loops)
msgid ""
"POE::Test::Loops contains one function, generate(), which will generate all the loop tests for one or more POE::Loop subclasses.\n"
"\n"
"The the /SYNOPSIS manpage example is a version of the poe-gen-tests manpage, which is a stand-alone utility to generate the actual tests. the poe-gen-tests manpage also documents the POE::Test::Loops system in more detail."
msgstr ""

#. description(php5-pear-Horde_Date)
msgid "Package for creating and manipulating dates."
msgstr ""

#. description(php5-pear-Horde_Group)
msgid "Package for managing and accessing the Horde groups system."
msgstr ""

#. description(php5-pear-Horde_Scribe)
msgid "Packaged version of the PHP Scribe client."
msgstr ""

#. summary(php5-pear-Horde_Thrift)
msgid "Packaged version of the PHP Thrift client"
msgstr ""

#. summary(perl-Parse-CPAN-Packages)
msgid "Parse 02packages.details.txt.gz"
msgstr ""

#. summary(perl-Parse-CPAN-Meta)
msgid "Parse META.yml and META.json CPAN metadata files"
msgstr ""

#. summary(perl-Parse-Win32Registry)
msgid "Parse Windows Registry Files"
msgstr ""

#. summary(perl-DateTime-Format-MySQL)
msgid "Parse and format MySQL dates and times"
msgstr ""

#. summary(perl-DateTime-Format-Strptime)
msgid "Parse and format strp and strf time patterns"
msgstr ""

#. summary(perl-Perl-Version)
msgid "Parse and manipulate Perl version strings"
msgstr ""

#. summary(perl-Data-OptList)
msgid "Parse and validate simple name/value option pairs"
msgstr ""

#. summary(perl-Time-Duration-Parse)
msgid "Parse string that represents time duration"
msgstr ""

#. summary(perl-PPI)
msgid "Parse, Analyze and Manipulate Perl (without perl)"
msgstr ""

#. description(perl-Parse-Win32Registry)
msgid ""
"Parse::Win32Registry is a module for parsing Windows Registry files, allowing you to read the keys and values of a registry file without going through the Windows API.\n"
"\n"
"It provides an object-oriented interface to the keys and values in a registry file. Registry files are structured as trees of keys, with each key containing further subkeys or values.\n"
"\n"
"The module is intended to be cross-platform, and run on those platforms where Perl will run.\n"
"\n"
"It supports both Windows NT registry files (Windows NT, 2000, XP, 2003, Vista, 7) and Windows 95 registry files (Windows 95, 98, Millennium Edition).\n"
"\n"
"It is intended to be used to parse offline registry files. If a registry file is currently in use, you will not be able to open it. However, you can save part or all of a currently loaded registry file using the Windows reg command if you have the appropriate administrative access."
msgstr ""

#. summary(perl-DateTime-Format-DateParse)
msgid "Parses Date::Parse compatible formats"
msgstr ""

#. summary(perl-Perl-Tidy)
msgid "Parses and beautifies perl source"
msgstr ""

#. summary(perl-Archive-Peek)
msgid "Peek into archives without extracting them"
msgstr ""

#. summary(perl-PAR)
msgid "Perl Archive Toolkit"
msgstr ""

#. summary(perl-Lingua-Stem-Fr)
msgid "Perl French Stemming"
msgstr ""

#. summary(perl-XML-SimpleObject-LibXML)
msgid "Perl extension allowing a simple(r) object representation of an XML::Lib[cut]"
msgstr ""

#. summary(perl-Geo-Coordinates-UTM)
msgid "Perl extension for Latitiude Longitude conversions"
msgstr ""

#. summary(perl-XML-Generator-PerlData)
msgid "Perl extension for generating SAX2 events from nested Perl data structures."
msgstr ""

#. summary(perl-SVG)
msgid "Perl extension for generating Scalable Vector Graphics (SVG) documents"
msgstr ""

#. summary(perl-Data-Hexify)
msgid "Perl extension for hexdumping arbitrary data"
msgstr ""

#. summary(perl-CGI-FastTemplate)
msgid "Perl extension for managing templates, and performing variable interpolation"
msgstr ""

#. summary(perl-Spreadsheet-XLSX)
msgid "Perl extension for reading MS Excel 2007 files;"
msgstr ""

#. summary(perl-File-Copy-Recursive)
msgid "Perl extension for recursively copying files and directories"
msgstr ""

#. summary(perl-Math-Round)
#, fuzzy
msgid "Perl extension for rounding numbers"
msgstr "包中含有意外的版本"

#. summary(perl-HTML-Scrubber)
msgid "Perl extension for scrubbing/sanitizing html"
msgstr ""

#. summary(perl-Calendar-Simple)
msgid "Perl extension to create simple calendars"
msgstr ""

#. summary(perl-Test-Warn)
#, fuzzy
msgid "Perl extension to test methods for warnings"
msgstr "包中含有意外的版本"

#. summary(perl-Debug-Trace)
msgid "Perl extension to trace subroutine calls"
msgstr ""

#. summary(perl-JSON-RPC)
msgid "Perl implementation of JSON-RPC 1.1 protocol"
msgstr ""

#. summary(perl-Digest-Perl-MD5)
#, fuzzy
msgid "Perl implementation of Ron Rivests MD5 Algorithm"
msgstr "内核接口"

#. summary(perl-Class-Adapter)
#, fuzzy
msgid "Perl implementation of the \"Adapter\" Design Pattern"
msgstr "7.0 文档"

#. summary(perl-GnuPG-Interface)
#, fuzzy
msgid "Perl interface to GnuPG"
msgstr "内核接口"

#. summary(perl-Crypt-SaltedHash)
msgid "Perl interface to functions that assist in working with salted hashes"
msgstr ""

#. summary(perl-Font-TTF)
msgid "Perl module for TrueType Font hacking"
msgstr ""

#. description(perl-File-chdir)
msgid ""
"Perl's 'chdir()' has the unfortunate problem of being very, very, very global. If any part of your program calls 'chdir()' or if any library you use calls 'chdir()', it changes the current working directory for the\n"
"*whole* program.\n"
"\n"
"This sucks.\n"
"\n"
"File::chdir gives you an alternative, '$CWD' and '@CWD'. These two variables combine all the power of 'chdir()', the File::Spec manpage and the Cwd manpage."
msgstr ""

#. description(perl-Test-Memory-Cycle)
msgid ""
"Perl's garbage collection has one big problem: Circular references can't get cleaned up. A circular reference can be as simple as two reference that refer to each other.\n"
"\n"
"Test::Memory::Cycle is built on top of Devel::Cycle to give you an easy way to check for these circular references."
msgstr ""

#. summary(perl-Parse-Method-Signatures)
msgid "Perl6 like method signature parser"
msgstr ""

#. summary(perl-Perl6-Junction)
msgid "Perl6 style Junction operators in Perl5."
msgstr ""

#. description(perl-Perl-Critic)
msgid ""
"Perl::Critic is an extensible framework for creating and applying coding standards to Perl source code. Essentially, it is a static source code analysis engine. Perl::Critic is distributed with a number of Perl::Critic::Policy modules that attempt to enforce various coding guidelines. Most Policy modules are based on Damian Conway's book *Perl Best Practices*. However, Perl::Critic is *not* limited to PBP and will even support Policies that contradict Conway. You can enable, disable, and customize those Polices through the Perl::Critic interface. You can also create new Policy modules that suit your own tastes.\n"
"\n"
"For a command-line interface to Perl::Critic, see the documentation for perlcritic. If you want to integrate Perl::Critic with your build process, Test::Perl::Critic provides an interface that is suitable for test programs. Also, Test::Perl::Critic::Progressive is useful for gradually applying coding standards to legacy code. For the ultimate convenience (at the expense of some flexibility) see the criticism pragma.\n"
"\n"
"Win32 and ActivePerl users can find PPM distributions of Perl::Critic at the http://theoryx5.uwinnipeg.ca/ppms/ manpage and Alexandr Ciornii's downloadable executable at the http://chorny.net/perl/perlcritic.html manpage.\n"
"\n"
"If you'd like to try Perl::Critic without installing anything, there is a web-service available at the http://perlcritic.com manpage. The web-service does not yet support all the configuration features that are available in the native Perl::Critic API, but it should give you a good idea of what it does. You can also invoke the perlcritic web-service from the command-line by doing an HTTP-post, such as one of these:\n"
"\n"
"    $> POST http://perlcritic.com/perl/critic.pl < MyModule.pm     $> lwp-request -m POST http://perlcritic.com/perl/critic.pl < MyModule.pm     $> wget -q -O - --post-file=MyModule.pm http://perlcritic.com/perl/critic.pl\n"
"\n"
"Please note that the perlcritic web-service is still alpha code. The URL and interface to the service are subject to change.\n"
"\n"
"Also, the Perl Development Kit (PDK 8.0) from ActiveState includes a very slick graphical interface to Perl-Critic. For details, go to the http://www.activestate.com/perl_dev_kit manpage"
msgstr ""

#. description(perl-Perl-Version)
msgid ""
"Perl::Version provides a simple interface for parsing, manipulating and formatting Perl version strings.\n"
"\n"
"Unlike version.pm (which concentrates on parsing and comparing version strings) Perl::Version is designed for cases where you'd like to parse a version, modify it and get back the modified version formatted like the original.\n"
"\n"
"For example:\n"
"\n"
"    my $version = Perl::Version->new( '1.2.3' );     $version->inc_version;     print \"$version\\n\";\n"
"\n"
"prints\n"
"\n"
"    1.3.0\n"
"\n"
"whereas\n"
"\n"
"    my $version = Perl::Version->new( 'v1.02.03' );     $version->inc_version;     print \"$version\\n\";\n"
"\n"
"prints\n"
"\n"
"    v1.03.00\n"
"\n"
"Both are representations of the same version and they'd compare equal but their formatting is different.\n"
"\n"
"Perl::Version tries hard to guess and recreate the format of the original version and in most cases it succeeds. In rare cases the formatting is ambiguous. Consider\n"
"\n"
"    1.10.03\n"
"\n"
"Do you suppose that second component '10' is zero padded like the third component? Perl::Version will assume that it is:\n"
"\n"
"    my $version = Perl::Version->new( '1.10.03' );     $version->inc_revision;     print \"$version\\n\";\n"
"\n"
"will print\n"
"\n"
"    2.00.00\n"
"\n"
"If all of the components after the first are the same length (two characters in this case) and any of them begins with a zero Perl::Version will assume that they're all zero padded to the same length.\n"
"\n"
"The first component and any alpha suffix are handled separately. In each case if either of them starts with a zero they will be zero padded to the same length when stringifying the version."
msgstr ""

#. description(pgaccess)
msgid "PgAccess is a graphical interface and application building environment for PostgreSQL."
msgstr ""

#. description(perl-Class-Base)
msgid ""
"Please consider using the Badger::Base manpage instead which is the successor of this module.\n"
"\n"
"This module implements a simple base class from which other modules can be derived, thereby inheriting a number of useful methods such as 'new()', 'init()', 'params()', 'clone()', 'error()' and 'debug()'.\n"
"\n"
"For a number of years, I found myself re-writing this module for practically every Perl project of any significant size. Or rather, I would copy the module from the last project and perform a global search and replace to change the names. Each time it got a little more polished and eventually, I decided to Do The Right Thing and release it as a module in it's own right.\n"
"\n"
"It doesn't pretend to be an all-encompassing solution for every kind of object creation problem you might encounter. In fact, it only supports blessed hash references that are created using the popular, but by no means universal convention of calling 'new()' with a list or reference to a hash array of named parameters. Constructor failure is indicated by returning undef and setting the '$ERROR' package variable in the module's class to contain a relevant message (which you can also fetch by calling 'error()' as a class method).\n"
"\n"
"e.g.\n"
"\n"
"    my $object = My::Module->new( \tfile => 'myfile.html', \tmsg  => 'Hello World'     ) || die $My::Module::ERROR;\n"
"\n"
"or:\n"
"\n"
"    my $object = My::Module->new({ \tfile => 'myfile.html', \tmsg  => 'Hello World',     }) || die My::Module->error();\n"
"\n"
"The 'new()' method handles the conversion of a list of arguments into a hash array and calls the 'init()' method to perform any initialisation. In many cases, it is therefore sufficient to define a module like so:\n"
"\n"
"    package My::Module;     use Class::Base;     use base qw( Class::Base );\n"
"\n"
"    sub init { \tmy ($self, $config) = @_; \t \t$self->params($config, qw( FOO BAR )) || return undef; \treturn $self;     }\n"
"\n"
"    \n"
"\n"
"    1;\n"
"\n"
"Then you can go right ahead and use it like this:\n"
"\n"
"    use My::Module;\n"
"\n"
"    my $object = My::Module->new( FOO => 'the foo value', \t\t\t\t  BAR => 'the bar value' )         || die $My::Module::ERROR;\n"
"\n"
"Despite its limitations, Class::Base can be a surprisingly useful module to have lying around for those times where you just want to create a regular object based on a blessed hash reference and don't want to worry too much about duplicating the same old code to bless a hash, define configuration values, provide an error reporting mechanism, and so on. Simply derive your module from 'Class::Base' and leave it to worry about most of the detail. And don't forget, you can always redefine your own 'new()', 'error()', or other method, if you don't like the way the Class::Base version works."
msgstr ""

#. description(perl-Pod-Spell)
msgid ""
"Pod::Spell is a Pod formatter whose output is good for spellchecking. Pod::Spell rather like Pod::Text, except that it doesn't put much effort into actual formatting, and it suppresses things that look like Perl symbols or Perl jargon (so that your spellchecking program won't complain about mystery words like \"$thing\" or \"Foo::Bar\" or \"hashref\").\n"
"\n"
"This class provides no new public methods. All methods of interest are inherited from Pod::Parser (which see). The especially interesting ones are `parse_from_filehandle' (which without arguments takes from STDIN and sends to STDOUT) and `parse_from_file'. But you can probably just make do with the examples in the synopsis though.\n"
"\n"
"This class works by filtering out words that look like Perl or any form of computerese (like \"`$thing'\" or \"`N>7'\" or \"`@{$foo}{'bar','baz'}'\", anything in C<...> or F<...> codes, anything in verbatim paragraphs (codeblocks), and anything in the stopword list. The default stopword list for a document starts out from the stopword list defined by Pod::Wordlist, and can be supplemented (on a per-document basis) by having `\"=for stopwords\"' / `\"=for :stopwords\"' region(s) in a document."
msgstr ""

#. summary(perl-File-Which)
#, fuzzy
msgid "Portable implementation of the `which' utility"
msgstr "7.0 文档"

#. summary(perl-Lingua-Stem-Ru)
msgid "Porter's stemming algorithm for Russian (KOI8-R only)"
msgstr ""

#. summary(perl-Snowball-Norwegian)
msgid "Porters stemming algorithm for norwegian."
msgstr ""

#. summary(perl-Snowball-Swedish)
msgid "Porters stemming algorithm for swedish."
msgstr ""

#. summary(perl-Class-C3)
msgid "Pragma to use the C3 method resolution order algortihm"
msgstr ""

#. description(perl-Test-Trap)
msgid ""
"Primarily (but not exclusively) for use in test scripts: A block eval on steroids, configurable and extensible, but by default trapping (Perl) STDOUT, STDERR, warnings, exceptions, would-be exit codes, and return values from boxed blocks of test code.\n"
"\n"
"The values collected by the latest trap can then be queried or tested through a special trap object."
msgstr ""

#. summary(perl-Net-DNS-Resolver-Programmable)
msgid "Programmable DNS resolver class for offline emulation of DNS"
msgstr ""

#. description(php5-pear-Horde_Nls)
msgid "Provide common methods for handling language data, timezones, and hostname->country lookups."
msgstr ""

#. summary(perl-Regexp-Common)
msgid "Provide commonly requested regular expressions"
msgstr ""

#. summary(perl-LWP-Protocol-https)
msgid "Provide https support for LWP::UserAgent"
msgstr ""

#. summary(perl-Class-Factory-Util)
msgid "Provide utility methods for factory classes"
msgstr ""

#. summary(perl-Class-Method-Modifiers)
msgid "Provides Moose-like method modifiers"
msgstr ""

#. description(perl-HTTP-Request-AsCGI)
msgid "Provides a convenient way of setting up an CGI environment from an HTTP::Request."
msgstr ""

#. description(perl-MooseX-Method-Signatures)
msgid "Provides a proper method keyword, like \"sub\" but specifically for making methods and validating their arguments against Moose type constraints."
msgstr ""

#. description(perl-PHP-Serialization)
msgid ""
"Provides a simple, quick means of serializing perl memory structures (including object data!) into a format that PHP can deserialize() and access, and vice versa.\n"
"\n"
"NOTE: Converts PHP arrays into Perl Arrays when the PHP array used exclusively numeric indexes, and into Perl Hashes then the PHP array did not."
msgstr ""

#. description(php5-pear-Horde_Imsp)
msgid "Provides an API into an IMSP server for address books and options."
msgstr ""

#. summary(perl-Test-ClassAPI)
msgid "Provides basic first-pass API testing for large class trees"
msgstr ""

#. description(php5-pear-Auth_SASL)
msgid ""
"Provides code to generate responses to common SASL mechanisms,  including:\n"
"\n"
"  - Digest-MD5   - CramMD5   - Plain   - Anonymous   - Login (Pseudo mechanism)"
msgstr ""

#. description(php5-pear-File)
msgid "Provides easy access to read/write to files along with some common routines to deal with paths."
msgstr ""

#. description(php5-pear-Horde_Mime)
msgid "Provides methods for dealing with MIME (RFC 2045) and related e-mail (RFC 822/2822/5322) standards."
msgstr ""

#. description(php5-pear-Horde_Mime_Viewer)
msgid "Provides rendering drivers for MIME data."
msgstr ""

#. description(pgadmin3:pgadmin3-lang)
#, fuzzy
msgid "Provides translations to the package pgadmin3"
msgstr "等待导航栏应用程序"

#. summary(perl-YAML-Perl)
#, fuzzy
msgid "Pure Perl YAML Implementation"
msgstr "自选设置管理"

#. summary(perl-DBM-Deep)
msgid "Pure perl multi-level hash/array DBM that supports transactions"
msgstr ""

#. description(perl-YAML-Perl)
msgid "PyYAML is the most robust and correct YAML module for a dynamic language. It is (obviously) written in/for Python. This module is a complete port of PyYAML to Perl."
msgstr ""

#. summary(perl-Email-Address)
msgid "RFC 2822 Address Parsing and Creation"
msgstr ""

#. summary(perl-XML-XPathEngine)
msgid "Re-usable XPath engine for DOM-like trees"
msgstr ""

#. summary(perl-CPAN-Meta-YAML)
msgid "Read and write a subset of YAML for CPAN Meta files"
msgstr ""

#. summary(perl-Data-Section-Simple)
msgid "Read data from __DATA__"
msgstr ""

#. summary(perl-Spreadsheet-ParseExcel)
msgid "Read information from an Excel file."
msgstr ""

#. summary(perl-Data-Section)
msgid "Read multiple hunks of data out of your DATA section"
msgstr ""

#. summary(perl-Text-RecordParser)
msgid "Read record-oriented files"
msgstr ""

#. summary(perl-Spreadsheet-Read)
msgid "Read the data from a spreadsheet"
msgstr ""

#. summary(perl-CSS-Tiny)
msgid "Read/Write .css files with as little code as possible"
msgstr ""

#. summary(perl-Config-Tiny)
msgid "Read/Write .ini style files with as little code as possible"
msgstr ""

#. summary(perl-YAML-Tiny)
msgid "Read/Write YAML files with as little code as possible"
msgstr ""

#. summary(perl-File-Slurp-Unicode)
msgid "Reading/Writing of Complete Files with Character Encoding Support"
msgstr ""

#. summary(perl-Hash-Merge-Simple)
msgid "Recursively merge two or more hashes, simply"
msgstr ""

#. summary(perl-Module-Refresh)
msgid "Refresh INC files when updated on disk"
msgstr ""

#. description(perl-Regexp-Assemble)
msgid ""
"Regexp::Assemble takes an arbitrary number of regular expressions and assembles them into a single regular expression (or RE) that matches all that the individual REs match.\n"
"\n"
"As a result, instead of having a large list of expressions to loop over, a target string only needs to be tested against one expression. This is interesting when you have several thousand patterns to deal with. Serious effort is made to produce the smallest pattern possible.\n"
"\n"
"It is also possible to track the original patterns, so that you can determine which, among the source patterns that form the assembled pattern, was the one that caused the match to occur.\n"
"\n"
"You should realise that large numbers of alternations are processed in perl's regular expression engine in O(n) time, not O(1). If you are still having performance problems, you should look at using a trie. Note that Perl's own regular expression engine will implement trie optimisations in perl 5.10 (they are already available in perl 5.9.3 if you want to try them out). 'Regexp::Assemble' will do the right thing when it knows it's running on a a trie'd perl. (At least in some version after this one).\n"
"\n"
"Some more examples of usage appear in the accompanying README. If that file isn't easy to access locally, you can find it on a web repository such as the http://search.cpan.org/dist/Regexp-Assemble/README manpage or the http://cpan.uwinnipeg.ca/htdocs/Regexp-Assemble/README.html manpage."
msgstr ""

#. summary(perl-File-Remove)
msgid "Remove files and directories"
msgstr ""

#. summary(perl-PPIx-Regexp)
msgid "Represent a regular expression of some sort"
msgstr ""

#. summary(perl-MooseX-LazyRequire)
msgid "Required attributes which fail only when trying to use them"
msgstr ""

#. summary(perl-SQL-ReservedWords)
msgid "Reserved SQL words by ANSI/ISO"
msgstr ""

#. summary(perl-Class-ReturnValue)
msgid "Return-value object that lets you treat it as as a boolean, array or object"
msgstr ""

#. summary(perl-POE-Test-Loops)
msgid "Reusable tests for POE::Loop authors"
msgstr ""

#. summary(perl-MooseX-Daemonize)
msgid "Role for daemonizing your Moose based application"
msgstr ""

#. summary(perl-Role-Identifiable)
#, fuzzy
msgid "Role::Identifiable Perl module"
msgstr "用户模块"

#. summary(perl-MooseX-Role-Parameterized)
msgid "Roles with composition parameters"
msgstr ""

#. summary(perl-Crypt-Rot13)
msgid "Rot13 (Caesar) encryption for perl"
msgstr ""

#. summary(perl-IPC-Run3)
msgid "Run a subprocess with input/ouput redirection"
msgstr ""

#. summary(perl-XML-SAX-Writer)
msgid "SAX2 Writer"
msgstr ""

#. description(perl-SVG)
msgid ""
"SVG is a 100% Perl module which generates a nested data structure containing the DOM representation of an SVG (Scalable Vector Graphics) image. Using SVG, you can generate SVG objects, embed other SVG instances into it, access the DOM object, create and access javascript, and generate SMIL animation content.\n"
"\n"
"Refer to the SVG::Manual manpage for the complete manual."
msgstr ""

#. summary(perl-Eval-Closure)
msgid "Safely and cleanly create closures via string eval"
msgstr ""

#. summary(perl-common-sense)
msgid "Save a tree AND a kitten (sane defaults for Perl programs)"
msgstr ""

#. summary(perl-IO-Pager)
msgid "Select a pager and pipe text to it if destination is a TTY"
msgstr ""

#. summary(perl-HTTP-Request-AsCGI)
msgid "Set up a CGI environment from an HTTP::Request"
msgstr ""

#. summary(perl-MooseX-Types-Set-Object)
msgid "Set::Object type with coercions and stuff."
msgstr ""

#. summary(perl-OLE-Storage_Lite)
msgid "Simple Class for OLE document interface."
msgstr ""

#. summary(perl-Makefile-DOM)
msgid "Simple DOM parser for Makefiles"
msgstr ""

#. summary(perl-File-Slurp)
msgid "Simple and Efficient Reading/Writing of Complete Files"
msgstr ""

#. summary(perl-Log-Contextual)
msgid "Simple logging interface with a contextual log"
msgstr ""

#. summary(perl-Email-Simple)
msgid "Simple parsing of RFC2822 message format and headers"
msgstr ""

#. summary(perl-MooseX-Param)
msgid "Simple role to provide a standard param method"
msgstr ""

#. summary(perl-MooseX-Workers)
msgid "Simple sub-process management for asynchronous tasks"
msgstr ""

#. description(perl-MooseX-StrictConstructor)
msgid "Simply loading this module makes your constructors \"strict\". If your constructor is called with an attribute init argument that your class does not declare, then it calls 'Moose-'throw_error()>. This is a great way to catch small typos."
msgstr ""

#. description(perl-Smart-Comments)
msgid ""
"Smart comments provide an easy way to insert debugging and tracking code into a program. They can report the value of a variable, track the progress of a loop, and verify that particular assertions are true.\n"
"\n"
"Best of all, when you're finished debugging, you don't have to remove them. Simply commenting out the 'use Smart::Comments' line turns them back into regular comments. Leaving smart comments in your code is smart because if you needed them once, you'll almost certainly need them again later."
msgstr ""

#. description(perl-CPAN-Meta)
msgid ""
"Software distributions released to the CPAN include a _META.json_ or, for older distributions, _META.yml_, which describes the distribution, its contents, and the requirements for building and installing the distribution. The data structure stored in the _META.json_ file is described in the CPAN::Meta::Spec manpage.\n"
"\n"
"CPAN::Meta provides a simple class to represent this distribution metadata (or _distmeta_), along with some helpful methods for interrogating that data.\n"
"\n"
"The documentation below is only for the methods of the CPAN::Meta object. For information on the meaning of individual fields, consult the spec."
msgstr ""

#. description(perl-Net-SSLGlue)
msgid ""
"Some commonly used perl modules don't have SSL support at all, even if the protocol supports it. Others have SSL support, but most of them don't do proper checking of the server's certificate.\n"
"\n"
"The 'Net::SSLGlue::*' modules try to add SSL support or proper certificate checking to these modules. Currently support for the following modules is available:\n"
"\n"
"* Net::SMTP - add SSL from beginning or using STARTTLS\n"
"\n"
"* Net::LDAP - add proper certificate checking\n"
"\n"
"* LWP - add proper certificate checking"
msgstr ""

#. description(perl-Context-Preserve)
msgid ""
"Sometimes you need to call a function, get the results, act on the results, then return the result of the function. This is painful because of contexts; the original function can behave different if it's called in void, scalar, or list context. You can ignore the various cases and just pick one, but that's fragile. To do things right, you need to see which case you're being called in, and then call the function in that context. This results in 3 code paths, which is a pain to type in (and maintain).\n"
"\n"
"This module automates the process. You provide a coderef that is the \"original function\", and another coderef to run after the original runs. You can modify the return value (aliased to @_) here, and do whatever else you need to do. 'wantarray' is correct inside both coderefs; in \"after\", though, the return value is ignored and the value 'wantarray' returns is related to the context that the original function was called in."
msgstr ""

#. summary(perl-Sort-Naturally)
msgid "Sort lexically, but sort numeral parts numerically"
msgstr ""

#. summary(perl-Class-Spiffy)
msgid "Spiffy Framework with No Source Filtering"
msgstr ""

#. description(perl-Spreadsheet-Read)
msgid ""
"Spreadsheet::Read tries to transparently read *any* spreadsheet and return its content in a universal manner independent of the parsing module that does the actual spreadsheet scanning.\n"
"\n"
"For OpenOffice this module uses Spreadsheet::ReadSXC\n"
"\n"
"For Microsoft Excel this module uses Spreadsheet::ParseExcel or Spreadsheet::XLSX\n"
"\n"
"For CSV this module uses Text::CSV_XS (0.29 or up required, 0.73 or up preferred) or Text::CSV_PP (1.05 or up required).\n"
"\n"
"For SquirrelCalc there is a very simplistic built-in parser"
msgstr ""

#. description(perl-Spreadsheet-ReadSXC)
msgid ""
"Spreadsheet::ReadSXC extracts data from OpenOffice 1.x spreadsheet files (.sxc). It exports the function read_sxc() which takes a filename and an optional reference to a hash of options as arguments and returns a reference to a hash of references to two-dimensional arrays. The hash keys correspond to the names of worksheets in the OpenOffice workbook. The two-dimensional arrays correspond to rows and cells in the respective spreadsheets. If you don't like this because the order of sheets is not preserved in a hash, read on. The 'OrderBySheet' option provides an array of hashes instead.\n"
"\n"
"If you prefer to unpack the .sxc file yourself, you can use the function read_xml_file() instead and pass the path to content.xml as an argument. Or you can extract the XML string from content.xml and pass the string to the function read_xml_string(). Both functions also take a reference to a hash of options as an optional second argument."
msgstr ""

#. summary(perl-String-Format)
msgid "Sprintf-like string formatting capabilities with arbitrary format definitions"
msgstr ""

#. summary(perl-Module-Install)
msgid "Standalone, extensible Perl module installer"
msgstr ""

#. summary(perl-MooseX-GlobRef)
msgid "Store a Moose object in glob reference"
msgstr ""

#. summary(perl-Hash-MultiValue)
msgid "Store multiple values per key"
msgstr ""

#. description(php5-pear-Horde_Kolab_Storage)
msgid "Storing user data in an IMAP account belonging to the user is one of the Kolab server core concepts. This package provides all the necessary means to deal with this type of data storage effectively."
msgstr ""

#. description(perl-Eval-Closure)
msgid ""
"String eval is often used for dynamic code generation. For instance, 'Moose' uses it heavily, to generate inlined versions of accessors and constructors, which speeds code up at runtime by a significant amount. String eval is not without its issues however - it's difficult to control the scope it's used in (which determines which variables are in scope inside the eval), and it can be quite slow, especially if doing a large number of evals.\n"
"\n"
"This module attempts to solve both of those problems. It provides an 'eval_closure' function, which evals a string in a clean environment, other than a fixed list of specified variables. It also caches the result of the eval, so that doing repeated evals of the same source, even with a different environment, will be much faster (but note that the description is part of the string to be evaled, so it must also be the same (or non-existent) if caching is to work properly)."
msgstr ""

#. description(perl-String-Errf)
msgid "String::Errf provides 'errf', a simple string formatter that works something like 'perlfunc/sprintf'. It is implemented using the String::Formatter manpage and the Sub::Exporter manpage. Their documentation may be useful in understanding or extending String::Errf."
msgstr ""

#. description(perl-String-Format)
msgid ""
"String::Format lets you define arbitrary printf-like format sequences to be expanded. This module would be most useful in configuration files and reporting tools, where the results of a query need to be formatted in a particular way. It was inspired by mutt's index_format and related directives (see <URL:http://www.mutt.org/doc/manual/manual-6.html#index_format>).\n"
"\n"
"Authors:     Darren Chamberlain <darren@cpan.org>"
msgstr ""

#. description(perl-String-Formatter)
msgid ""
"String::Formatter is a tool for building sprintf-like formatting routines. It supports named or positional formatting, custom conversions, fixed string interpolation, and simple width-matching out of the box. It is easy to alter its behavior to write new kinds of format string expanders. For most cases, it should be easy to build all sorts of formatters out of the options built into String::Formatter.\n"
"\n"
"Normally, String::Formatter will be used to import a sprintf-like routine referred to as \"'stringf'\", but which can be given any name you like. This routine acts like sprintf in that it takes a string and some inputs and returns a new string:\n"
"\n"
"  my $output = stringf \"Some %a format %s for you to %u.\\n\", { ... };\n"
"\n"
"This routine is actually a wrapper around a String::Formatter object created by importing stringf. In the following code, the entire hashref after \"stringf\" is passed to String::Formatter's constructor (the 'new' method), save for the '-as' key and any other keys that start with a dash.\n"
"\n"
"  use String::Formatter     stringf => {       -as => 'fmt_time',       codes           => { ... },       format_hunker   => ...,       input_processor => ...,     },     stringf => {       -as => 'fmt_date',       codes           => { ... },       string_replacer => ...,       hunk_formatter  => ...,     },   ;\n"
"\n"
"As you can see, this will generate two stringf routines, with different behaviors, which are installed with different names. Since the behavior of these routines is based on the 'format' method of a String::Formatter object, the rest of the documentation will describe the way the object behaves.\n"
"\n"
"There's also a 'named_stringf' export, which behaves just like the 'stringf' export, but defaults to the 'named_replace' and 'require_named_input' arguments. There's a 'method_stringf' export, which defaults 'method_replace' and 'require_single_input'. Finally, a 'indexed_stringf', which defaults to 'indexed_replaced' and 'require_arrayref_input'. For more on these, keep reading, and check out the cookbook.\n"
"\n"
"the String::Formatter::Cookbook manpage provides a number of recipes for ways to put String::Formatter to use."
msgstr ""

#. description(perl-Sub-Exporter)
msgid ""
"Sub::Exporter provides a sophisticated alternative to Exporter.pm.  It allows for renaming, currying/sub-generation, and other cool stuff.  Read its own documentation.\n"
"\n"
" The biggest benefit of Sub::Exporter over existing exporters (including the ubiquitous Exporter.pm) is its ability to build new coderefs for export, rather than to simply export code identical to that found in the exporting package.\n"
"\n"
"  Author:\tRicardo Signes, <rjbs@cpan.org>"
msgstr ""

#. summary(perl-Sub-Spec)
msgid "Subroutine metadata specification"
msgstr ""

#. summary(perl-Class-Std)
msgid "Support for creating standard \"inside-out\" classes"
msgstr ""

#. summary(perl-MooseX-AuthorizedMethods)
msgid "Syntax sugar for authorized methods"
msgstr ""

#. summary(perl-MooseX-TransactionalMethods)
msgid "Syntax sugar for transactional methods"
msgstr ""

#. summary(php5-pear-Archive_Tar)
#, fuzzy
msgid "Tar file management class"
msgstr "编目管理"

#. summary(perl-Test-Command)
msgid "Test routines for external commands"
msgstr ""

#. summary(perl-Test-Synopsis)
msgid "Test your SYNOPSIS code"
msgstr ""

#. description(perl-Test-Fatal)
msgid ""
"Test::Fatal is an alternative to the popular the Test::Exception manpage. It does much less, but should allow greater flexibility in testing exception-throwing code with about the same amount of typing.\n"
"\n"
"It exports one routine by default: 'exception'."
msgstr ""

#. description(perl-Test-Manifest)
msgid ""
"Test::Harness assumes that you want to run all of the .t files in the t/ directory in ascii-betical order during make test unless you say otherwise. This leads to some interesting naming schemes for test files to get them in the desired order. This interesting names ossify when they get into source control, and get even more interesting as more tests show up.\n"
"\n"
"Test::Manifest overrides the default behaviour by replacing the test_via_harness target in the Makefile. Instead of running at the t/*.t files in ascii-betical order, it looks in the t/test_manifest file to find out which tests you want to run and the order in which you want to run them. It constructs the right value for MakeMaker to do the right thing."
msgstr ""

#. description(perl-Test-Output)
msgid ""
"Test::Output provides a simple interface for testing output sent to STDOUT or STDERR. A number of different utilities are included to try and be as flexible as possible to the tester.\n"
"\n"
"Originally this module was designed not to have external requirements, however, the features provided by the Sub::Exporter manpage over what the Exporter manpage provides is just to great to pass up.\n"
"\n"
"Test::Output ties STDOUT and STDERR using Test::Output::Tie."
msgstr ""

#. summary(perl-Test-Pod-Coverage)
#, fuzzy
msgid "Test::Pod::Coverage Perl module"
msgstr "资源组"

#. description(perl-Test-Requires)
msgid "Test::Requires checks to see if the module can be loaded."
msgstr ""

#. description(perl-Test-SharedFork)
msgid ""
"Test::SharedFork is utility module for Test::Builder.\n"
"\n"
"This module makes the fork(2) manpage safety in your test case.\n"
"\n"
"This module merges test count with parent process & child process."
msgstr ""

#. description(perl-Test-Synopsis)
msgid ""
"Test::Synopsis is an (author) test module to find .pm or .pod files under your _lib_ directory and then make sure the example snippet code in your _SYNOPSIS_ section passes the perl compile check.\n"
"\n"
"Note that this module only checks the perl syntax (by wrapping the code with 'sub') and doesn't actually run the code.\n"
"\n"
"Suppose you have the following POD in your module.\n"
"\n"
"  =head1 NAME\n"
"\n"
"  Awesome::Template - My awesome template\n"
"\n"
"  =head1 SYNOPSIS\n"
"\n"
"    use Awesome::Template;\n"
"\n"
"    my $template = Awesome::Template->new;     $tempalte->render(\"template.at\");\n"
"\n"
"  =head1 DESCRIPTION\n"
"\n"
"An user of your module would try copy-paste this synopsis code and find that this code doesn't compile because there's a typo in your variable name _$tempalte_. Test::Synopsis will catch that error before you ship it."
msgstr ""

#. description(perl-Test-Base)
msgid ""
"Testing is usually the ugly part of Perl module authoring. Perl gives you a standard way to run tests with Test::Harness, and basic testing primitives with Test::More. After that you are pretty much on your own to develop a testing framework and philosophy. Test::More encourages you to make your own framework by subclassing Test::Builder, but that is not trivial.\n"
"\n"
"Test::Base gives you a way to write your own test framework base class that _is_ trivial. In fact it is as simple as two lines:\n"
"\n"
"    package MyTestFramework;     use Test::Base -Base;\n"
"\n"
"A module called 'MyTestFramework.pm' containing those two lines, will give all the power of Test::More and all the power of Test::Base to every test file that uses it. As you build up the capabilities of 'MyTestFramework', your tests will have all of that power as well.\n"
"\n"
"'MyTestFramework' becomes a place for you to put all of your reusable testing bits. As you write tests, you will see patterns and duplication, and you can \"upstream\" them into 'MyTestFramework'. Of course, you don't have to subclass Test::Base at all. You can use it directly in many applications, including everywhere you would use Test::More.\n"
"\n"
"Test::Base concentrates on offering reusable data driven patterns, so that you can write tests with a minimum of code. At the heart of all testing you have inputs, processes and expected outputs. Test::Base provides some clean ways for you to express your input and expected output data, so you can spend your time focusing on that rather than your code scaffolding."
msgstr ""

#. summary(perl-Test-WWW-Mechanize)
msgid "Testing-specific WWW::Mechanize subclass"
msgstr ""

#. summary(perl-Test-LongString)
msgid "Tests strings for equality, with more helpful failures"
msgstr ""

#. description(perl-Text-Autoformat)
msgid ""
"Text::Autoformat provides intelligent formatting of plaintext without the need for any kind of embedded mark-up. The module recognizes Internet quoting conventions, a wide range of bulleting and number schemes, centred text, and block quotations, and reformats each appropriately. Other options allow the user to adjust inter-word and inter-paragraph spacing, justify text, and impose various capitalization schemes.\n"
"\n"
"The module also supplies a re-entrant, highly configurable replacement for the built-in Perl format() mechanism.\n"
"\n"
"Author:\n"
"-------         Damian Conway <damian@conway.org>"
msgstr ""

#. description(perl-Text-CSV)
msgid ""
"Text::CSV provides facilities for the composition and decomposition of comma-separated values using the Text::CSV_XS manpage or its pure Perl version.\n"
"\n"
"An instance of the Text::CSV class can combine fields into a CSV string and parse a CSV string into fields.\n"
"\n"
"The module accepts either strings or files as input and can utilize any user-specified characters as delimiters, separators, and escapes so it is perhaps better called ASV (anything separated values) rather than just CSV."
msgstr ""

#. description(perl-Text-TabularDisplay)
msgid "Text::TabularDisplay simplifies displaying textual data in a table. The output is identical to the columnar display of query results in the mysql text monitor. For example, this data:"
msgstr ""

#. description(perl-MRO-Compat)
msgid ""
"The \"mro\" namespace provides several utilities for dealing with method resolution order and method caching in general in Perl 5.9.5 and higher. This module provides those interfaces for earlier versions of Perl (back to 5.6.0 anyways).\n"
"\n"
"It is a harmless no-op to use this module on 5.9.5+. That is to say, code which properly uses MRO::Compat will work unmodified on both older Perls and 5.9.5+.\n"
"\n"
"If you're writing a piece of software that would like to use the parts of 5.9.5+'s mro:: interfaces that are supported here, and you want compatibility with older Perls, this is the module for you.\n"
"\n"
"Some parts of this code will work better and/or faster with Class::C3::XS installed (which is an optional prereq of Class::C3, which is in turn a prereq of this package), but it's not a requirement.\n"
"\n"
"This module never exports any functions. All calls must be fully qualified with the mro:: prefix.\n"
"\n"
"The interface documentation here serves only as a quick reference of what the function basically does, and what differences between MRO::Compat and 5.9.5+ One should look out for. The main docs in 5.9.5's mro are the real interface docs, and contain a lot of other useful information."
msgstr ""

#. description(perl-CPANPLUS)
msgid "The 'CPANPLUS' library is an API to the 'CPAN' mirrors and a collection of interactive shells, commandline programs, etc, that use this API."
msgstr ""

#. description(perl-Class-Adapter)
msgid "The 'Class::Adapter' class is intended as an abstract base class for creating any sort of class or object that follows the _Adapter_ pattern."
msgstr ""

#. description(perl-Lingua-EN-Sentence)
msgid ""
"The 'Lingua::EN::Sentence' module contains the function get_sentences, which splits text into its constituent sentences, based on a regular expression and a list of abbreviations (built in and given).\n"
"\n"
"Certain well know exceptions, such as abreviations, may cause incorrect segmentations. But some of them are already integrated into this code and are being taken care of. Still, if you see that there are words causing the get_sentences() to fail, you can add those to the module, so it notices them."
msgstr ""

#. description(perl-MooseX-SetOnce)
msgid ""
"The 'SetOnce' attribute lets your class have attributes that are not lazy and not set, but that cannot be altered once set.\n"
"\n"
"The logic is very simple: if you try to alter the value of an attribute with the SetOnce trait, either by accessor or writer, and the attribute has a value, it will throw an exception.\n"
"\n"
"If the attribute has a clearer, you may clear the attribute and set it again."
msgstr ""

#. description(php5-pear-ezc-Base)
msgid "The Base package provides the basic infrastructure that all packages rely on. Therefore every component relies on this package."
msgstr ""

#. summary(perl-Catalyst-Manual)
msgid "The Catalyst developer's manual"
msgstr ""

#. description(perl-Class-MakeMethods)
msgid "The Class::MakeMethods framework allows Perl class developers to quickly define common types of methods. When a module uses Class::MakeMethods or one of its subclasses, it can select from a variety of supported method types, and specify a name for each method desired. The methods are dynamically generated and installed in the calling package."
msgstr ""

#. description(perl-Parse-CPAN-Packages)
msgid ""
"The Comprehensive Perl Archive Network (CPAN) is a very useful collection of Perl code. It has several indices of the files that it hosts, including a file named \"02packages.details.txt.gz\" in the \"modules\" directory. This file contains lots of useful information and this module provides a simple interface to the data contained within.\n"
"\n"
"In a future release the Parse::CPAN::Packages::Package manpage and the Parse::CPAN::Packages::Distribution manpage might have more information."
msgstr ""

#. description(php5-pear-ezc-ConsoleTools)
#, fuzzy
msgid "The ConsoleTools package provides Console handling."
msgstr "包中含有意外的版本"

#. description(perl-Crypt-SaltedHash)
msgid "The Crypt::SaltedHash module provides an object oriented interface to create salted (or seeded) hashes of clear text data. The original formalization of this concept comes from RFC-3112 and is extended by the use of different digital agorithms."
msgstr ""

#. description(perl-Devel-StackTrace)
msgid ""
"The Devel::StackTrace module contains two classes, Devel::StackTrace and Devel::StackTrace::Frame. The goal of this object is to encapsulate the information that can found through using the caller() function, as well as providing a simple interface to this data.\n"
"\n"
"The Devel::StackTrace object contains a set of Devel::StackTrace::Frame objects, one for each level of the stack. The frames contain all the data available from 'caller()'.\n"
"\n"
"This code was created to support my the Exception::Class::Base manpage class (part of Exception::Class) but may be useful in other contexts."
msgstr ""

#. description(php5-pear-ezc-Graph)
#, fuzzy
msgid "The Graph package provides the basic infrastructure for graphs."
msgstr "包中含有意外的版本"

#. description(php5-pear-Horde_DataTree)
#, fuzzy
msgid "The Horde DataTree Library"
msgstr "编目管理"

#. description(php5-pear-Horde_Auth)
msgid "The Horde_Auth package provides a common interface into the various backends for the Horde authentication system."
msgstr ""

#. description(php5-pear-Horde_Browser)
msgid "The Horde_Browser class provides an API for getting information about the current user's browser and its capabilities."
msgstr ""

#. description(php5-pear-Horde_Crypt)
msgid "The Horde_Crypt package class provides an API for various cryptographic systems."
msgstr ""

#. description(php5-pear-Horde_Editor)
msgid "The Horde_Editor package provides an API to generate the code necessary for embedding javascript RTE editors in a web page."
msgstr ""

#. description(php5-pear-Horde_Form)
msgid "The Horde_Form package provides form rendering, validation, and other functionality for the Horde Application Framework."
msgstr ""

#. description(php5-pear-Horde_History)
msgid "The Horde_History API provides a way to track changes on arbitrary pieces of data in Horde applications."
msgstr ""

#. description(php5-pear-Horde_Lock)
msgid "The Horde_Lock library provides the Horde resource locking system."
msgstr ""

#. description(php5-pear-Horde_LoginTasks)
msgid "The Horde_LoginTasks library provides a set of methods for dealing with tasks run upon login to Horde applications."
msgstr ""

#. description(php5-pear-Horde_Mail)
msgid ""
"The Horde_Mail library is a fork of the PEAR Mail library that provides additional functionality, including (but not limited to):\n"
"* Allows a stream to be passed in.\n"
"* Allows raw headertext to be used in the outgoing messages (required for things like message redirection pursuant to RFC 5322 [3.6.6]).\n"
"* Native PHP 5 code.\n"
"* PHPUnit test suite.\n"
"* Provides more comprehensive sendmail error messages.\n"
"* Uses Exceptions instead of PEAR_Errors."
msgstr ""

#. description(php5-pear-Horde_Memcache)
msgid "The Horde_Memcache library provides an API to access a memcache installation in Horde code."
msgstr ""

#. description(php5-pear-Horde_Notification)
msgid "The Horde_Notification library provides a subject-observer pattern for raising and showing messages of different types and to different listeners."
msgstr ""

#. description(php5-pear-Horde_Prefs)
msgid "The Horde_Prefs package provides a common abstracted interface into the various preferences storage mediums. It also includes all of the functions for retrieving, storing, and checking preference values."
msgstr ""

#. description(php5-pear-Horde_Rpc)
msgid "The Horde_Rpc library provides a common abstracted interface to various remote methods of accessing Horde functionality."
msgstr ""

#. description(php5-pear-Horde_Secret)
msgid "The Horde_Secret library provides an API for encrypting and decrypting small pieces of data with the use of a shared key."
msgstr ""

#. description(php5-pear-Horde_Serialize)
msgid "The Horde_Serialize library provides various methods of encapsulating data."
msgstr ""

#. description(php5-pear-Horde_Test)
msgid "The Horde_Test library provides Horde-specific PHPUnit base classes."
msgstr ""

#. description(php5-pear-Horde_Text_Filter)
msgid "The Horde_Text_Filter library provides common methods for fitering and converting text."
msgstr ""

#. description(php5-pear-Horde_Text_Filter_Csstidy)
msgid "The Horde_Text_Filter_Csstidy:: class provides the PHP-based library needed to perform optimization/compression on CSS code. It is provided in a separate package as the code is under the GPLv2 license instead of the LGPLv2 license used for the Text_Filter class."
msgstr ""

#. description(php5-pear-Horde_Text_Flowed)
msgid "The Horde_Text_Flowed:: class provides common methods for manipulating text using the encoding described in RFC 3676 ('flowed' text)."
msgstr ""

#. summary(perl-MooseX-POE)
msgid "The Illicit Love Child of Moose and POE"
msgstr ""

#. description(perl-LWP-Protocol-https)
msgid ""
"The LWP::Protocol::https module provides support for using https schemed URLs with LWP. This module is a plug-in to the LWP protocol handling, so you don't use it directly. Once the module is installed LWP is able to access sites using HTTP over SSL/TLS.\n"
"\n"
"If hostname verification is requested by LWP::UserAgent's 'ssl_opts', and neither 'SSL_ca_file' nor 'SSL_ca_path' is set, then 'SSL_ca_file' is implied to be the one provided by Mozilla::CA. If the Mozilla::CA module isn't available SSL requests will fail. Either install this module, set up an alternative 'SSL_ca_file' or disable hostname verification.\n"
"\n"
"This module used to be bundled with the libwww-perl, but it was unbundled in v6.02 in order to be able to declare its dependencies properly for the CPAN tool-chain. Applications that need https support can just declare their dependency on LWP::Protocol::https and will no longer need to know what underlying modules to install."
msgstr ""

#. description(perl-MooseX-Aliases)
msgid ""
"The MooseX::Aliases module will allow you to quickly alias methods in Moose. It provides an alias parameter for 'has()' to generate aliased accessors as well as the standard ones. Attributes can also be initialized in the constructor via their aliased names.\n"
"\n"
"You can create more than one alias at once by passing a listref:\n"
"\n"
"    has ip_addr => (         alias => [ qw(ipAddr ip) ],     );"
msgstr ""

#. summary(perl-Test-Unit)
#, fuzzy
msgid "The PerlUnit testing framework"
msgstr "应用程序浏览器"

#. description(php5-pear-Horde_Perms)
#, fuzzy
msgid "The Perms package provides an interface to the Horde permissions system."
msgstr "包中含有意外的版本"

#. description(perl-Spreadsheet-ParseExcel)
msgid ""
"The Spreadsheet::ParseExcel module can be used to read information from Excel 95-2003 binary files.\n"
"\n"
"The module cannot read files in the Excel 2007 Open XML XLSX format. See the the Spreadsheet::XLSX manpage module instead."
msgstr ""

#. description(perl-Switch)
msgid ""
"The Switch.pm module implements a generalized case mechanism that covers most (but not all) of the numerous possible combinations of switch and case values described above.\n"
"\n"
"The module augments the standard Perl syntax with two new control statements: 'switch' and 'case'. The 'switch' statement takes a single scalar argument of any type, specified in parentheses. 'switch' stores this value as the current switch value in a (localized) control variable. The value is followed by a block which may contain one or more Perl statements (including the 'case' statement described below). The block is unconditionally executed once the switch value has been cached."
msgstr ""

#. description(perl-Lingua-EN-Inflect)
msgid ""
"The exportable subroutines of Lingua::EN::Inflect provide plural inflections, \"a\"/\"an\" selection for English words, and manipulation of numbers as words\n"
"\n"
"Plural forms of all nouns, most verbs, and some adjectives are provided. Where appropriate, \"classical\" variants (for example: \"brother\" -> \"brethren\", \"dogma\" -> \"dogmata\", etc.) are also provided.\n"
"\n"
"Pronunciation-based \"a\"/\"an\" selection is provided for all English words, and most initialisms.\n"
"\n"
"It is also possible to inflect numerals (1,2,3) to ordinals (1st, 2nd, 3rd) and to english words (\"one\", \"two\", \"three).\n"
"\n"
"In generating these inflections, Lingua::EN::Inflect follows the Oxford English Dictionary and the guidelines in Fowler's Modern English Usage, preferring the former where the two disagree.\n"
"\n"
"The module is built around standard British spelling, but is designed to cope with common American variants as well. Slang, jargon, and other English dialects are _not_ explicitly catered for.\n"
"\n"
"Where two or more inflected forms exist for a single word (typically a \"classical\" form and a \"modern\" form), Lingua::EN::Inflect prefers the more common form (typically the \"modern\" one), unless \"classical\" processing has been specified (see the \"MODERN VS CLASSICAL INFLECTIONS\" manpage)."
msgstr ""

#. description(perl-WWW-Shorten)
msgid ""
"The function 'makeashorterlink' will call the relevant web site passing it your long URL and will return the shorter version.\n"
"\n"
"The function 'makealongerlink' does the reverse. 'makealongerlink' will accept as an argument either the full shortened URL or just the identifier.\n"
"\n"
"If anything goes wrong, then either function will return 'undef'."
msgstr ""

#. description(perl-Browser-Open)
msgid "The functions optionaly exported by this module allows you to open URLs in the user browser. A set of known commands per OS-name is tested for presence, and the first one found is executed. With an optional parameter, all known commands are checked. The \"open_browser\" uses the \"system()\" function to execute the command. If you want more control, you can get the command with the \"open_browser_cmd\" or \"open_browser_cmd_all\" functions and then use whatever method you want to execute it."
msgstr ""

#. description(perl-File-Path-Tiny)
msgid ""
"The goal here is simply to provide recursive versions of the mkdir manpage() and the rmdir manpage() with as little code and overhead as possible.\n"
"\n"
"This module is in no way meant to derogate the File::Path manpage and is in no way an endorsement to go out and replace all use of the File::Path manpage with the File::Path::Tiny manpage.\n"
"\n"
"the File::Path manpage is very good at what it does but there's simply a lot happening that we can do without much of the time.\n"
"\n"
"Here are some things the File::Path manpage has/does that this module attempts to do without:\n"
"\n"
"* * multiple interfaces\n"
"\n"
"  Backwards compatibility brings in a lot of code and logic that we don't   need from here on out.\n"
"\n"
"* * chdir's\n"
"\n"
"  It does a ton of chdir's which could leave you somewhere you're not   planning on being and requires much more overhead to do.\n"
"\n"
"* * can croak not allowing you to detect and handle failure\n"
"\n"
"  Just let me handle errors how I want. Don't make my entire app die or   have to wrap it in an eval\n"
"\n"
"* * A well intentioned output system\n"
"\n"
"  Just let me do the output how I want. (Nothing, As HTML, print to a   filehandle, etc...)\n"
"\n"
"* * A well intentioned and experimental (IE subject to change) error   handling system.\n"
"\n"
"  Just keep it simple and detect failure via a boolean check and do what I   want with the error. See the /\"How can I make/remove multiple paths?\"   manpage\n"
"\n"
"* * According to its POD, removing a tree is apparently not safe unless you   tell it to be with the 'safe' or 'keep_root' attributes.\n"
"\n"
"  Seems like that should just happen, I don't want to worry about   accidentally removing / when I pass it /tmp"
msgstr ""

#. description(perl-Test-Script)
msgid ""
"The intent of this module is to provide a series of basic tests for 80% of the testing you will need to do for scripts in the script (or bin as is also commonly used) paths of your Perl distribution.\n"
"\n"
"Author:\n"
"-------      Adam Kennedy <adamk@cpan.org>"
msgstr ""

#. description(perl-Declare-Constraints-Simple)
msgid "The main purpose of this module is to provide an easy way to build a profile to validate a data structure. It does this by giving you a set of declarative keywords in the importing namespace."
msgstr ""

#. description(perl-Text-Reform)
msgid ""
"The module supplies a re-entrant, highly configurable replacement for the built-in Perl format() mechanism.\n"
"\n"
"Author:\n"
"-------         Damian Conway <damian@conway.org>"
msgstr ""

#. description(perl-PPIx-Regexp)
msgid ""
"The purpose of the _PPIx-Regexp_ package is to parse regular expressions in a manner similar to the way the PPI package parses Perl. This class forms the root of the parse tree, playing a role similar to PPI::Document.\n"
"\n"
"This package shares with PPI the property of being round-trip safe. That is,\n"
"\n"
" my $expr = 's/ ( \\d+ ) ( \\D+ ) /$2$1/smxg';  my $re = PPIx::Regexp->new( $expr );  print $re->content() eq $expr ? \"yes\\n\" : \"no\\n\"\n"
"\n"
"should print 'yes' for any valid regular expression.\n"
"\n"
"Navigation is similar to that provided by PPI. That is to say, things like 'children', 'find_first', 'snext_sibling' and so on all work pretty much the same way as in PPI.\n"
"\n"
"The class hierarchy is also similar to PPI. Except for some utility classes (the dumper, the lexer, and the tokenizer) all classes are descended from PPIx::Regexp::Element, which provides basic navigation. Tokens are descended from PPIx::Regexp::Token, which provides content. All containers are descended from PPIx::Regexp::Node, which provides for children, and all structure elements are descended from PPIx::Regexp::Structure, which provides beginning and ending delimiters, and a type.\n"
"\n"
"There are two features of PPI that this package does not provide - mutability and operator overloading. There are no plans for serious mutability, though something like PPI's 'prune' functionality might be considered. Similarly there are no plans for operator overloading, which appears to the author to represent a performance hit for little tangible gain."
msgstr ""

#. description(perl-Perl-PrereqScanner)
msgid ""
"The scanner will extract loosely your distribution prerequisites from your files.\n"
"\n"
"The extraction may not be perfect but tries to do its best. It will currently find the following prereqs:\n"
"\n"
"* *\n"
"\n"
"  plain lines beginning with 'use' or 'require' in your perl modules and   scripts, including minimum perl version\n"
"\n"
"* *\n"
"\n"
"  regular inheritance declared with the 'base' and 'parent' pragmata\n"
"\n"
"* *\n"
"\n"
"  the Moose manpage inheritance declared with the 'extends' keyword\n"
"\n"
"* *\n"
"\n"
"  the Moose manpage roles included with the 'with' keyword\n"
"\n"
"* *\n"
"\n"
"  OO namespace aliasing using the 'aliased' module"
msgstr ""

#. description(perl-Sub-Exporter-ForMethods)
msgid ""
"The synopsis section, above, looks almost indistinguishable from any other use of Sub::Exporter, apart from the use of 'method_installer'. It is nearly indistinguishable in behavior, too. The only change is that subroutines exported from Method::Builder into named slots in Vehicle::Autobot will be wrapped in a subroutine called 'Vehicle::Autobot::transform'. This will insert a named frame into stack traces to aid in debugging.\n"
"\n"
"More importantly (for the author, anyway), they will not be removed by namespace::autoclean. This makes the following code work:\n"
"\n"
"  package MyLibrary;\n"
"\n"
"  use Math::Trig qw(tan);         # uses Exporter.pm   use String::Truncate qw(trunc); # uses Sub::Exporter's defaults\n"
"\n"
"  use Sub::Exporter::ForMethods qw(method_installer);   use Mixin::Linewise { installer => method_installer }, qw(read_file);\n"
"\n"
"  use namespace::autoclean;\n"
"\n"
"  ...\n"
"\n"
"  1;\n"
"\n"
"After MyLibrary is compiled, 'namespace::autoclean' will remove 'tan' and 'trunc' as foreign contaminants, but will leave 'read_file' in place. It will also remove 'method_installer', an added win."
msgstr ""

#. description(perl-MooseX-Types)
msgid ""
"The type system provided by Moose effectively makes all of its builtin type global, as are any types you declare with Moose. This means that every module that declares a type named \"PositiveInt\" is sharing the same type object. This can be a problem when different parts of the code base want to use the same name for different things.\n"
"\n"
"This package lets you declare types using short names, but behind the scenes it namespaces all your type declarations, effectively prevent name clashes between packages.\n"
"\n"
"This is done by creating a type library module like 'MyApp::Types' and then importing types from that module into other modules.\n"
"\n"
"As a side effect, the declaration mechanism allows you to write type names as barewords (really function calls), which catches typos in names at compile time rather than run time.\n"
"\n"
"This module also provides some helper functions for using Moose types outside of attribute declarations.\n"
"\n"
"If you mix string-based names with types created by this module, it will warn, with a few exceptions. If you are declaring a 'class_type()' or 'role_type()' within your type library, or if you use a fully qualified name like '\"MyApp::Foo\"'."
msgstr ""

#. description(perl-Test-SubCalls)
msgid ""
"There are a number of different situations (like testing caching code) where you want to want to do a number of tests, and then verify that some underlying subroutine deep within the code was called a specific number of times.\n"
"\n"
"This module provides a number of functions for doing testing in this way in association with your normal the Test::More manpage (or similar) test scripts."
msgstr ""

#. description(php5-pear-Horde_Core)
#, fuzzy
msgid "These classes provide the core functionality of the Horde Application Framework."
msgstr "包中含有意外的版本"

#. description(perl-Task-Moose)
msgid "This Task installs Moose and then optionally installs a number of Moose extensions listed below. This list is meant to be comprehensive, so if I missed something please let me know."
msgstr ""

#. description(php5-pear-Horde_Itip)
msgid "This class allows to generate MIME encapsulated responses to iCalendar invitations"
msgstr ""

#. description(perl-MooseX-Meta-TypeConstraint-ForceCoercion)
msgid "This class allows to wrap any \"Moose::Meta::TypeConstraint\" in a way that will force coercion of the value when checking or validating a value against it."
msgstr ""

#. description(perl-Class-Container)
msgid "This class facilitates building frameworks of several classes that inter- operate. It was first designed and built for HTML::Mason, in which the Compiler, Lexer, Interpreter, Resolver, Component, Buffer, and several other objects must create each other transparently, passing the appropriate parameters to the right class, possibly substituting other subclasses for any of these objects."
msgstr ""

#. description(perl-Exception-Base)
msgid ""
"This class implements a fully OO exception mechanism similar to the Exception::Class manpage or the Class::Throwable manpage. It provides a simple interface allowing programmers to declare exception classes. These classes can be thrown and caught. Each uncaught exception prints full stack trace if the default verbosity is uppered for debugging purposes.\n"
"\n"
"The features of 'Exception::Base':\n"
"\n"
"* *\n"
"\n"
"  fast implementation of the exception class\n"
"\n"
"* *\n"
"\n"
"  fully OO without closures and source code filtering\n"
"\n"
"* *\n"
"\n"
"  does not mess with '$SIG{__DIE__}' and '$SIG{__WARN__}'\n"
"\n"
"* *\n"
"\n"
"  no external run-time modules dependencies, requires core Perl modules   only\n"
"\n"
"* *\n"
"\n"
"  the default behavior of exception class can be changed globally or just   for the thrown exception\n"
"\n"
"* *\n"
"\n"
"  matching the exception by class, message or other attributes\n"
"\n"
"* *\n"
"\n"
"  matching with string, regex or closure function\n"
"\n"
"* *\n"
"\n"
"  creating automatically the derived exception classes (the perlfunc/use   manpage interface)\n"
"\n"
"* *\n"
"\n"
"  easly expendable, see the Exception::System manpage class for example\n"
"\n"
"* *\n"
"\n"
"  prints just an error message or dumps full stack trace\n"
"\n"
"* *\n"
"\n"
"  can propagate (rethrow) an exception\n"
"\n"
"* *\n"
"\n"
"  can ignore some packages for stack trace output\n"
"\n"
"* *\n"
"\n"
"  some defaults (i.e. verbosity) can be different for different exceptions"
msgstr ""

#. description(perl-Email-Address)
msgid "This class implements a regex-based RFC 2822 parser that locates email addresses in strings and returns a list of 'Email::Address' objects found. Alternatley you may construct objects manually. The goal of this software is to be correct, and very very fast."
msgstr ""

#. description(perl-DateTime-TimeZone)
msgid ""
"This class is the base class for all time zone objects. A time zone is represented internally as a set of observances, each of which describes the offset from GMT for a given time period.\n"
"\n"
"Note that without the 'DateTime.pm' module, this module does not do much. It's primary interface is through a 'DateTime' object, and most users will not need to directly use 'DateTime::TimeZone' methods."
msgstr ""

#. description(perl-Class-Accessor-Grouped)
msgid "This class lets you build groups of accessors that will call different getters and setters."
msgstr ""

#. description(perl-Test-Assert)
msgid ""
"This class provides a set of assertion methods useful for writing tests. The API is based on JUnit4 and the Test::Unit::Lite manpage and the methods die on failure.\n"
"\n"
"These assertion methods might be not useful for common the Test::Builder manpage-based (the Test::Simple manpage, the Test::More manpage, etc.) test units.\n"
"\n"
"The assertion methods can be used in class which is derived from 'Test::Assert' or used as standard Perl functions after importing them into user's namespace.\n"
"\n"
"'Test::Assert' can also wrap standard the Test::Simple manpage, the Test::More manpage or other the Test::Builder manpage-based tests.\n"
"\n"
"The assertions can be also used for run-time checking."
msgstr ""

#. description(php5-pear-Archive_Tar)
msgid "This class provides handling of tar files in PHP. It supports creating, listing, extracting and adding to tar files. Gzip support is available if PHP has the zlib extension built-in orloaded. Bz2 compression is also supported with the bz2 extension loaded."
msgstr ""

#. description(php5-pear-Horde_Exception)
#, fuzzy
msgid "This class provides the default exception handlers for the Horde Application Framework."
msgstr "使用该按钮可启动 YaST 进行永久配置。"

#. description(perl-Business-ISBN-Data)
msgid ""
"This data is current as of the date in the module version. At that time, the publisher codes 9990000-9999999 or 999000-999999 had not been fixed, although they had been proposed. I do not include them in the data. Some regions, including India (93), Gabon (99902), and Congo (99951) have country codes but no publisher codes. They still have entries even though you won't be able to validate any ISBNs assigned in those regions.\n"
"\n"
"Business::ISBN uses this \"data pack\" to do its work. You can update Business::ISBN::Data independently of the main module as the various ISBN organizations assign new publisher codes. The ISBN agency lists these data at http://www.isbn-international.org/converter/ranges.htm ."
msgstr ""

#. description(perl-SQL-Translator)
msgid "This documentation covers the API for SQL::Translator. For a more general discussion of how to use the modules and scripts, please see SQL::Translator::Manual."
msgstr ""

#. description(perl-Test-Unit)
msgid ""
"This framework is intended to support unit testing in an object-oriented development paradigm (with support for inheritance of tests etc.) and is derived from the JUnit testing framework for Java by Kent Beck and Erich Gamma. To start learning how to use this framework, see the Test::Unit::TestCase manpage and the Test::Unit::TestSuite manpage. (There will also eventually be a tutorial in the Test::Unit::Tutorial manpage.\n"
"\n"
"However 'Test::Unit::Procedural' is the procedural style interface to a sophisticated unit testing framework for Perl that . Test::Unit is intended to provide a simpler interface to the framework that is more suitable for use in a scripting style environment. Therefore, Test::Unit does not provide much support for an object-oriented approach to unit testing."
msgstr ""

#. description(perl-Test-Unit-Lite)
msgid ""
"This framework provides lighter version of the Test::Unit manpage framework. It implements some of the the Test::Unit manpage classes and methods needed to run test units. The the Test::Unit::Lite manpage tries to be compatible with public API of the Test::Unit manpage. It doesn't implement all classes and methods at 100% and only those necessary to run tests are available.\n"
"\n"
"The the Test::Unit::Lite manpage can be distributed as a part of package distribution, so the package can be distributed without dependency on modules outside standard Perl distribution. The the Test::Unit::Lite manpage is provided as a single file."
msgstr ""

#. description(php5-pear-Horde_Thrift)
msgid "This is a Packaged version of the PHP Thrift client"
msgstr ""

#. description(perl-PPIx-Utilities)
msgid "This is a collection of functions for dealing with PPI objects, many of which originated in Perl::Critic. They are organized into modules by the kind of PPI class they relate to, by replacing the \"PPI\" at the front of the module name with \"PPIx::Utilities\", e.g. functionality related to PPI::Nodes is in PPIx::Utilities::Node."
msgstr ""

#. description(perl-Test-Spec)
msgid ""
"This is a declarative specification-style testing system for behavior-driven development (BDD) in Perl. The tests (a.k.a. examples) are named with strings instead of subroutine names, so your fingers will suffer less fatigue from underscore-itis, with the side benefit that the test reports are more legible.\n"
"\n"
"This module is inspired by and borrows heavily from RSpec (http://rspec.info/documentation/), a BDD tool for the Ruby programming language."
msgstr ""

#. description(perl-Text-Template)
msgid "This is a library for generating form letters, building HTML pages, or filling in templates generally. A `template' is a piece of text that has little Perl programs embedded in it here and there. When you `fill in' a template, you evaluate the little programs and replace them with their values."
msgstr ""

#. description(perl-Perl6-Junction)
msgid ""
"This is a lightweight module which provides 'Junction' operators, the most commonly used being 'any' and 'all'.\n"
"\n"
"Inspired by the Perl6 design docs, the http://dev.perl.org/perl6/doc/design/exe/E06.html manpage.\n"
"\n"
"Provides a limited subset of the functionality of the Quantum::Superpositions manpage, see the /\"SEE ALSO\" manpage for comment.\n"
"\n"
"Notice in the the /SYNOPSIS manpage above, that if you want to match against a regular expression, you must use '==' or '!='. *Not* '=~' or '!~'. You must also use a regex object, such as 'qr/\\d/', not a plain regex such as '/\\d/'."
msgstr ""

#. description(perl-File-Mork)
msgid ""
"This is a module that can read the Mozilla URL history file -- normally $HOME/.mozilla/default/*.slt/history.dat -- and extract the id, url, name, hostname, first visted dat, last visited date and visit count.\n"
"\n"
"To find your history file it might be worth using *Mozilla::Backup* which has some platform-independent code for finding the profiles of various Mozilla-isms (including Firefox, Camino, K-Meleon, etc.)."
msgstr ""

#. description(perl-MooseX-Getopt)
msgid ""
"This is a role which provides an alternate constructor for creating objects using parameters passed in from the command line.\n"
"\n"
"This module attempts to DWIM as much as possible with the command line params by introspecting your class's attributes. It will use the name of your attribute as the command line option, and if there is a type constraint defined, it will configure Getopt::Long to handle the option accordingly.\n"
"\n"
"You can use the trait the MooseX::Getopt::Meta::Attribute::Trait manpage or the attribute metaclass the MooseX::Getopt::Meta::Attribute manpage to get non-default commandline option names and aliases.\n"
"\n"
"You can use the trait the MooseX::Getopt::Meta::Attribute::Trait::NoGetopt manpage or the attribute metaclass the MooseX::Getopt::Meta::Attribute::NoGetopt manpage to have 'MooseX::Getopt' ignore your attribute in the commandline options.\n"
"\n"
"By default, attributes which start with an underscore are not given commandline argument support, unless the attribute's metaclass is set to the MooseX::Getopt::Meta::Attribute manpage. If you don't want your accessors to have the leading underscore in their name, you can do this:\n"
"\n"
"     has '_foo' => (accessor => 'foo', ...);\n"
"\n"
"     has '_bar' => (reader => 'bar', ...);\n"
"\n"
"This will mean that Getopt will not handle a --foo param, but your code can still call the 'foo' method.\n"
"\n"
"If your class also uses a configfile-loading role based on the MooseX::ConfigFromFile manpage, such as the MooseX::SimpleConfig manpage, the MooseX::Getopt manpage's 'new_with_options' will load the configfile specified by the '--configfile' option (or the default you've given for the configfile attribute) for you.\n"
"\n"
"Options specified in multiple places follow the following precedence order: commandline overrides configfile, which overrides explicit new_with_options parameters."
msgstr ""

#. description(perl-XML-SimpleObject-LibXML)
msgid "This is a short and simple class allowing simple object access to a parsed XML::LibXML tree, with methods for fetching children and attributes in as clean a manner as possible. My apologies for further polluting the XML:: space; this is a small and quick module, with easy and compact usage. Some will rightfully question placing another interface over the DOM methods provided by XML::LibXML, but my experience is that people appreciate the total simplicity provided by this module, despite its limitations. These limitations include a minor loss of speed compared to the DOM, loss of control over node types, and protection (aka lack of knowledge) about the DOM. I encourage those who want more control and understanding over the DOM to study XML::LibXML; this module's source can be instructive, too."
msgstr ""

#. description(perl-Devel-Cycle)
msgid "This is a simple developer's tool for finding circular references in objects and other types of references. Because of Perl's reference-count based memory management, circular references will cause memory leaks."
msgstr ""

#. description(perl-MooseX-Param)
msgid ""
"This is a very simple Moose role which provides a the CGI manpage like 'param' method.\n"
"\n"
"I found that I had written this code over and over and over and over again, and each time it was the same. So I thought, why not put it in a role?"
msgstr ""

#. description(perl-XML-Filter-BufferText)
msgid ""
"This is a very simple filter. One common cause of grief (and programmer error) is that XML parsers aren't required to provide character events in one chunk. They can, but are not forced to, and most don't. This filter does the trivial but oft-repeated task of putting all characters into a single event.\n"
"\n"
"Note that this won't help you cases such as:\n"
"\n"
"  <foo> blah <!-- comment --> phubar </foo>\n"
"\n"
"In the above case, given the interleaving comment, there will be two 'character()' events. This may be worked around in the future if there is demand for it.\n"
"\n"
"An interesting way to use this filter, instead of telling users to use it, is to return it from your handler's constructor, already configured and all. That'll make the buffering totally transparent to them ('XML::SAX::Writer' does that)."
msgstr ""

#. description(perl-DBIx-Class)
msgid ""
"This is an SQL to OO mapper with an object API inspired by the Class::DBI manpage (with a compatibility layer as a springboard for porting) and a resultset API that allows abstract encapsulation of database operations. It aims to make representing queries in your code as perl-ish as possible while still providing access to as many of the capabilities of the database as possible, including retrieving related records from multiple tables in a single query, JOIN, LEFT JOIN, COUNT, DISTINCT, GROUP BY, ORDER BY and HAVING support.\n"
"\n"
"DBIx::Class can handle multi-column primary and foreign keys, complex queries and database-level paging, and does its best to only query the database in order to return something you've directly asked for. If a resultset is used as an iterator it only fetches rows off the statement handle as requested in order to minimise memory usage. It has auto-increment support for SQLite, MySQL, PostgreSQL, Oracle, SQL Server and DB2 and is known to be used in production on at least the first four, and is fork- and thread-safe out of the box (although DBI/Threads_and_Thread_Safety).\n"
"\n"
"This project is still under rapid development, so large new features may be marked EXPERIMENTAL - such APIs are still usable but may have edge bugs. Failing test cases are *always* welcome and point releases are put out rapidly as bugs are found and fixed.\n"
"\n"
"We do our best to maintain full backwards compatibility for published APIs, since DBIx::Class is used in production in many organisations, and even backwards incompatible changes to non-published APIs will be fixed if they're reported and doing so doesn't cost the codebase anything.\n"
"\n"
"The test suite is quite substantial, and several developer releases are generally made to CPAN before the branch for the next release is merged back to trunk for a major release."
msgstr ""

#. description(perl-MooseX-ConfigFromFile)
msgid ""
"This is an abstract role which provides an alternate constructor for creating objects using parameters passed in from a configuration file. The actual implementation of reading the configuration file is left to concrete subroles.\n"
"\n"
"It declares an attribute 'configfile' and a class method 'new_with_config', and requires that concrete roles derived from it implement the class method 'get_config_from_file'.\n"
"\n"
"Attributes specified directly as arguments to 'new_with_config' supercede those in the configfile.\n"
"\n"
"the MooseX::Getopt manpage knows about this abstract role, and will use it if available to load attributes from the file specified by the commandline flag '--configfile' during its normal 'new_with_options'."
msgstr ""

#. description(perl-Exporter-Lite)
msgid ""
"This is an alternative to Exporter intended to provide a lightweight subset of its functionality. It supports 'import()', '@EXPORT' and '@EXPORT_OK' and not a whole lot else.\n"
"\n"
"Unlike Exporter, it is not necessary to inherit from Exporter::Lite (ie. no '@ISA = qw(Exporter::Lite)' mantra). Exporter::Lite simply exports its import() function. This might be called a \"mix-in\".\n"
"\n"
"Setting up a module to export its variables and functions is simple:\n"
"\n"
"    package My::Module;     use Exporter::Lite;\n"
"\n"
"    @EXPORT = qw($Foo bar);\n"
"\n"
"now when you 'use My::Module', '$Foo' and 'bar()' will show up.\n"
"\n"
"In order to make exporting optional, use @EXPORT_OK.\n"
"\n"
"    package My::Module;     use Exporter::Lite;\n"
"\n"
"    @EXPORT_OK = qw($Foo bar);\n"
"\n"
"when My::Module is used, '$Foo' and 'bar()' will _not_ show up. You have to ask for them. 'use My::Module qw($Foo bar)'."
msgstr ""

#. description(perl-MooseX-Iterator)
msgid ""
"This is an attempt to add smalltalk-like streams to Moose. It currently works with ArrayRefs and HashRefs.\n"
"\n"
"* next\n"
"\n"
"  The next method provides the next item in the colletion.\n"
"\n"
"    For arrays it returns the element of the array\n"
"\n"
"    For hashs it returns a pair as a hashref with the keys: key and value\n"
"\n"
"* has_next\n"
"\n"
"  The has_next method is a boolean method that is true if there is another   item in the colletion after the current item. and falue if there isn't.\n"
"\n"
"* peek\n"
"\n"
"  The peek method returns the next item without moving the state of the   iterator forward. It returns undef if it is at the end of the collection.\n"
"\n"
"* reset\n"
"\n"
"  Resets the cursor, so you can iterate through the elements again."
msgstr ""

#. description(perl-Test-Simple)
msgid "This is an extremely simple, extremely basic module for writing tests suitable for CPAN modules and other pursuits. If you wish to do more complicated testing, use the Test::More module (a drop-in replacement for this one)."
msgstr ""

#. description(perl-Devel-REPL)
msgid ""
"This is an interactive shell for Perl, commonly known as a REPL - Read, Evaluate, Print, Loop. The shell provides for rapid development or testing of code without the need to create a temporary source code file.\n"
"\n"
"Through a plugin system, many features are available on demand. You can also tailor the environment through the use of profiles and run control files, for example to pre-load certain Perl modules when working on a particular project."
msgstr ""

#. description(perl-Role-HasMessage)
msgid "This is another extremely simple role. A class that includes Role::HasMessage is promising to provide a 'message' method that returns a string summarizing the message or event represented by the object. It does _not_ provide any actual behavior."
msgstr ""

#. description(perl-Test-Inter)
msgid "This is another framework for writing test scripts. It is loosely inspired by Test::More, and has most of it's functionality, but it is not a drop-in replacement."
msgstr ""

#. description(perl-Class-C3)
msgid "This is pragma to change Perl 5's standard method resolution order from depth- first left-to-right (a.k.a - pre-order) to the more sophisticated C3 method resolution order."
msgstr ""

#. description(perl-Class-Singleton)
msgid ""
"This is the \"Class::Singleton\" module. A Singleton describes an object class that can have only one instance in any system. An example of a Singleton might be a print spooler or system registry. This module implements a Singleton class from which other classes can be derived. By itself, the \"Class::Singleton\" module does very little other than manage the instantiation of a single object. In deriving a class from \"Class::Singleton\", your module will inherit the Singleton instantiation method and can implement whatever specific functionality is required.\n"
"\n"
"For a description and discussion of the Singleton class, see \"Design Patterns\", Gamma et al, Addison-Wesley, 1995, ISBN 0-201-63361-2.\n"
"\n"
"Author: Andy Wardley <abw@wardley.org>"
msgstr ""

#. description(perl-PPI)
msgid "This is the PPI manual. It describes its reason for existing, its general structure, its use, an overview of the API, and provides a few implementation samples."
msgstr ""

#. description(perl-Module-Starter)
msgid ""
"This is the core module for Module::Starter. If you're not looking to extend or alter the behavior of this module, you probably want to look at the module-starter manpage instead.\n"
"\n"
"Module::Starter is used to create a skeletal CPAN distribution, including basic builder scripts, tests, documentation, and module code. This is done through just one method, 'create_distro'."
msgstr ""

#. description(perl-Makefile-DOM)
msgid "This libary can serve as an advanced lexer for (GNU) makefiles. It parses makefiles as \"documents\" and the parsing is lossless. The results are data structures similar to DOM trees. The DOM trees hold every single bit of the information in the original input files, including white spaces, blank lines and makefile comments. That means it's possible to reproduce the original makefiles from the DOM trees. In addition, each node of the DOM trees is modifiable and so is the whole tree, just like the PPI module used for Perl source parsing and the HTML::TreeBuilder module used for parsing HTML source."
msgstr ""

#. description(perl-MooseX-Types-Perl)
msgid "This library provides MooseX::Types for checking things (mostly strings) against syntax that is, or is a reasonable subset of, Perl syntax."
msgstr ""

#. description(perl-MooseX-AuthorizedMethods)
msgid "This method exports the \"authorized\" declarator that makes a verification if the user has the required permissions before the acual invocation. The default verification method will take the \"user\" method result and call \"roles\" to list the roles given to that user."
msgstr ""

#. description(perl-MooseX-TransactionalMethods)
msgid "This method exports the \"transactional\" declarator that will enclose the method in a txn_do call."
msgstr ""

#. description(perl-Class-XPath)
msgid ""
"This module adds XPath-style matching to your object trees. This means that you can find nodes using an XPath-esque query with 'match()' from anywhere in the tree. Also, the 'xpath()' method returns a unique path to a given node which can be used as an identifier.\n"
"\n"
"To use this module you must already have an OO implementation of a tree. The tree must be a true tree - all nodes have a single parent and the tree must have a single root node. Also, the order of children within a node must be stable.\n"
"\n"
"*NOTE:* This module is not yet a complete XPath implementation. Over time I expect the subset of XPath supported to grow. See the SYNTAX documentation for details on the current level of support."
msgstr ""

#. description(perl-MooseX-LazyRequire)
msgid ""
"This module adds a 'lazy_required' option to Moose attribute declarations.\n"
"\n"
"The reader methods for all attributes with that option will throw an exception unless a value for the attributes was provided earlier by a constructor parameter or through a writer method."
msgstr ""

#. description(perl-Test-CheckDeps)
msgid "This module adds a test that assures all dependencies have been installed properly. If requested, it can bail out all testing on error."
msgstr ""

#. description(perl-MooseX-GlobRef)
msgid ""
"This module allows to store Moose object in glob reference of file handle. The class attributes will be stored in hash slot associated with glob reference. It allows to create a Moose version of the IO::Handle manpage.\n"
"\n"
"The attributes can be accessed directly with following expression:\n"
"\n"
"  my $hashref = \\%{*$self};   print $hashref->{key};\n"
"\n"
"or shorter:\n"
"\n"
"  print *$self->{key};\n"
"\n"
"but the standard accessors should be used instead:\n"
"\n"
"  print $self->key;"
msgstr ""

#. description(perl-IO-Digest)
msgid "This module allows you to calculate digests while reading or writing file handles. This avoids the case you need to reread the same content to compute the digests after written a file."
msgstr ""

#. description(perl-MooseX-ClassAttribute)
msgid ""
"This module allows you to declare class attributes in exactly the same way as object attributes, using 'class_has()' instead of 'has()'.\n"
"\n"
"You can use any feature of Moose's attribute declarations, including overriding a parent's attributes, delegation ('handles'), attribute traits, etc. All features should just work. The one exception is the \"required\" flag, which is not allowed for class attributes.\n"
"\n"
"The accessor methods for class attribute may be called on the class directly, or on objects of that class. Passing a class attribute to the constructor will not set that attribute."
msgstr ""

#. description(perl-Font-TTF)
msgid "This module allows you to do almost anything to a TrueType/OpenType Font including modify and inspect nearly all tables."
msgstr ""

#. description(perl-B-Hooks-EndOfScope)
msgid "This module allows you to execute code when perl finished compiling the surrounding scope."
msgstr ""

#. description(perl-Package-DeprecationManager)
msgid "This module allows you to manage a set of deprecations for one or more modules."
msgstr ""

#. description(perl-IPC-Run3)
msgid ""
"This module allows you to run a subprocess and redirect stdin, stdout, and/or stderr to files and perl data structures. It aims to satisfy 99% of the need for using 'system', 'qx', and 'open3' with a simple, extremely Perlish API.\n"
"\n"
"Speed, simplicity, and portability are paramount. (That's speed of Perl code; which is often much slower than the kind of buffered I/O that this module uses to spool input to and output from the child command.)"
msgstr ""

#. description(perl-Data-Dumper-Concise)
msgid ""
"This module always exports a single function, Dumper, which can be called with an array of values to dump those values.\n"
"\n"
"It exists, fundamentally, as a convenient way to reproduce a set of Dumper options that we've found ourselves using across large numbers of applications, primarily for debugging output.\n"
"\n"
"The principle guiding theme is \"all the concision you can get while still having a useful dump and not doing anything cleverer than setting Data::Dumper options\" - it's been pointed out to us that Data::Dump::Streamer can produce shorter output with less lines of code. We know. This is simpler and we've never seen it segfault. But for complex/weird structures, it generally rocks. You should use it as well, when Concise is underkill. We do.\n"
"\n"
"Why is deparsing on when the aim is concision? Because you often want to know what subroutine refs you have when debugging and because if you were planning to eval this back in you probably wanted to remove subrefs first and add them back in a custom way anyway. Note that this -does- force using the pure perl Dumper rather than the XS one, but I've never in my life seen Data::Dumper show up in a profile so \"who cares?\"."
msgstr ""

#. description(perl-Lingua-Stem-Ru)
msgid "This module applies the Porter Stemming Algorithm to its parameters, returning the stemmed words."
msgstr ""

#. description(perl-LWP-Online)
msgid ""
"This module attempts to answer, as accurately as it can, one of the nastiest technical questions there is.\n"
"\n"
"*Am I on the internet?*\n"
"\n"
"The answer is useful in a wide range of decisions. For example...\n"
"\n"
"_Should my test scripts run the online portion of the tests or just skip them?_\n"
"\n"
"_Do I try to fetch fresh data from the server?_\n"
"\n"
"_If my request to the server breaks, is it because I'm offline, or because the server is offline?_\n"
"\n"
"And so on, and so forth.\n"
"\n"
"But a host of networking and security issues make this problem very difficult. There are firewalls, proxies (both well behaved and badly behaved). We might not have DNS. We might not have a network card at all!\n"
"\n"
"You might have network access, but only to a for-money wireless network that responds to ever HTTP request with a page asking you to enter your credit card details for paid access. Which means you don't \"REALLY\" have access.\n"
"\n"
"The mere nature of the question makes it practically unsolvable.\n"
"\n"
"But with the answer being so useful, and the only other alternative being to ask the user \"duh... are you online?\" (when you might not have a user at all) it's my gut feeling that it is worthwhile at least making an attempt to solve the problem, if only in a limited way."
msgstr ""

#. description(perl-File-BaseDir)
msgid ""
"This module can be used to find directories and files as specified by the Freedesktop.org Base Directory Specification. This specifications gives a mechanism to locate directories for configuration, application data and cache data. It is suggested that desktop applications for e.g. the Gnome, KDE or Xfce platforms follow this layout. However, the same layout can just as well be used for non-GUI applications.\n"
"\n"
"This module forked from the File::MimeInfo manpage.\n"
"\n"
"This module follows version 0.6 of BaseDir specification."
msgstr ""

#. description(perl-ExtUtils-CBuilder)
msgid "This module can build the C portions of Perl modules by invoking the appropriate compilers and linkers in a cross-platform manner. It was motivated by the 'Module::Build' project, but may be useful for other purposes as well. However, it is _not_ intended as a general cross-platform interface to all your C building needs. That would have been a much more ambitious goal!"
msgstr ""

#. description(perl-Test-CheckChanges)
msgid ""
"This module checks that you _Changes_ file has an entry for the current version of the *Module* being tested.\n"
"\n"
"The version information for the distribution being tested is taken out of the Build data, or if that is not found, out of the Makefile.\n"
"\n"
"It then attempts to open, in order, a file with the name _Changes_ or _CHANGES_.\n"
"\n"
"The _Changes_ file is then parsed for version numbers. If one and only one of the version numbers matches the test passes. Otherwise the test fails.\n"
"\n"
"A message with the current version is printed if the test passes, otherwise dialog messages are printed to help explain the failure.\n"
"\n"
"The _examples_ directory contains examples of the different formats of _Changes_ files that are recognized."
msgstr ""

#. description(perl-WWW-Mechanize-TreeBuilder)
msgid ""
"This module combines the WWW::Mechanize manpage and the HTML::TreeBuilder manpage. Why? Because I've seen too much code like the following:\n"
"\n"
" like($mech->content, qr{<p>some text</p>}, \"Found the right tag\");\n"
"\n"
"Which is just all flavours of wrong - its akin to processing XML with regexps. Instead, do it like the following:\n"
"\n"
" ok($mech->look_down(_tag => 'p', sub { $_[0]->as_trimmed_text eq 'some text' })\n"
"\n"
"The anon-sub there is a bit icky, but this means that anyone should happen to add attributes to the '<p>' tag (such as an id or a class) it will still work and find the right tag.\n"
"\n"
"All of the methods avaiable on the HTML::Element manpage (that aren't 'private' - i.e. that don't begin with an underscore) such as 'look_down' or 'find' are automatically delegated to '$mech->tree' through the magic of Moose."
msgstr ""

#. description(perl-File-Copy-Recursive)
msgid "This module copies and moves directories recursively (or single files, well... singley) to an optional depth and attempts to preserve each file or directory's mode."
msgstr ""

#. description(perl-PAR-Dist)
msgid ""
"This module creates and manipulates _PAR distributions_. They are architecture-specific *PAR* files, containing everything under _blib/_ of CPAN distributions after their 'make' or 'Build' stage, a _META.yml_ describing metadata of the original CPAN distribution, and a _MANIFEST_ detailing all files within it. Digitally signed PAR distributions will also contain a _SIGNATURE_ file.\n"
"\n"
"The naming convention for such distributions is:\n"
"\n"
"    $NAME-$VERSION-$ARCH-$PERL_VERSION.par\n"
"\n"
"For example, 'PAR-Dist-0.01-i386-freebsd-5.8.0.par' corresponds to the 0.01 release of 'PAR-Dist' on CPAN, built for perl 5.8.0 running on 'i386-freebsd'."
msgstr ""

#. description(perl-Email-Valid)
msgid ""
"This module determines whether an email address is well-formed, and optionally, whether a mail host exists for the domain.\n"
"\n"
"Please note that there is no way to determine whether an address is deliverable without attempting delivery (for details, see perlfaq 9)."
msgstr ""

#. description(perl-MooseX-SemiAffordanceAccessor)
msgid ""
"This module does not provide any methods. Simply loading it changes the default naming policy for the loading class so that accessors are separated into get and set methods. The get methods have the same name as the accessor, while set methods are prefixed with \"set_\".\n"
"\n"
"If you define an attribute with a leading underscore, then the set method will start with \"_set_\".\n"
"\n"
"If you explicitly set a \"reader\" or \"writer\" name when creating an attribute, then that attribute's naming scheme is left unchanged.\n"
"\n"
"The name \"semi-affordance\" comes from David Wheeler's Class::Meta module."
msgstr ""

#. description(perl-URI-Find)
msgid ""
"This module does one thing: Finds URIs and URLs in plain text. It finds them quickly and it finds them *all* (or what URI::URL considers a URI to be.) It only finds URIs which include a scheme (http:// or the like), for something a bit less strict have a look at URI::Find::Schemeless.\n"
"\n"
"For a command-line interface, the urifind manpage is provided."
msgstr ""

#. description(perl-Sub-Exporter-GlobExporter)
msgid "This module enables you to export shared globs with Sub::Exporter collectors"
msgstr ""

#. description(perl-Class-Factory-Util)
msgid "This module exports a method that is useful for factory classes."
msgstr ""

#. description(perl-Data-Hexify)
msgid ""
"This module exports one subroutine: 'Hexify'.\n"
"\n"
"'Hexify' formats arbitrary (possible binary) data into a format suitable for hex dumps in the style of 'xd' or 'hexl'.\n"
"\n"
"The first, or only, argument to 'Hexify' contains the data, or a reference to the data, to be hexified. Hexify will return a string that prints as follows:\n"
"\n"
"  0000: 70 61 63 6b 61 67 65 20 44 61 74 61 3a 3a 48 65  package Data::He   0010: 78 69 66 79 3b 0a 0a 75 73 65 20 35 2e 30 30 36  xify;..use 5.006\n"
"\n"
"and so on. At the left is the (hexadecimal) index of the data, then a number of hex bytes, followed by the chunk of data with unprintables replaced by periods.\n"
"\n"
"The optional second argument to 'Hexify' must be a hash or a hash reference, containing values for any of the following parameters:\n"
"\n"
"* first\n"
"\n"
"  The first byte of the data to be processed. Default is to start from the   beginning of the data.\n"
"\n"
"* length\n"
"\n"
"  The number of bytes to be processed. Default is to proceed all data.\n"
"\n"
"* chunk\n"
"\n"
"  The number of bytes to be processed per line of output. Default is 16.\n"
"\n"
"* group\n"
"\n"
"  The number of bytes to be grouped together. Default is 1 (no grouping).   If used, it must be a divisor of the chunk size.\n"
"\n"
"* duplicates\n"
"\n"
"  When set, duplicate lines of output are suppressed and replaced by a   single line reading '**SAME**'.\n"
"\n"
"  Duplicate suppression is enabled by default.\n"
"\n"
"* showdata\n"
"\n"
"  A reference to a subroutine that is used to produce a printable string   from a chunk of data. By default, a subroutine is used that replaces   unwanted bytes by periods.\n"
"\n"
"  The subroutine gets the chunk of data passed as argument, and should   return a printable string of at most 'chunksize' characters.\n"
"\n"
"* align\n"
"\n"
"  Align the result to 'chunksize' bytes. This is relevant only when   processing data not from the beginning. For example, when 'first' is 10,   the result would become:\n"
"\n"
"    0000:                ...    74 61 3a 3a 48 65            ta::He     0010: 78 69 66 79 3b ... 65 20 35 2e 30 30 36  xify;..use 5.006     ... and so on ...\n"
"\n"
"  Alignment is on by default. Without alignment, the result would be:\n"
"\n"
"    000a: 74 61 3a 3a 48 ... 79 3b 0a 0a 75 73 65  ta::Hexify;..use     001a: 20 35 2e 30 30 ... 73 65 20 73 74 72 69   5.006;.use stri     ... and so on ...\n"
"\n"
"* start\n"
"\n"
"  Pretend that the data started at this byte (while in reality it starts at   byte 'first'). The above example, with 'start => 0', becomes:\n"
"\n"
"    0000: 74 61 3a 3a 48 ... 79 3b 0a 0a 75 73 65  ta::Hexify;..use     0010: 20 35 2e 30 30 ... 73 65 20 73 74 72 69   5.006;.use stri     ... and so on ..."
msgstr ""

#. description(perl-Sort-Naturally)
msgid "This module exports two functions, nsort and ncmp; they are used in implementing my idea of a \"natural sorting\" algorithm. Under natural sorting, numeric substrings are compared numerically, and other word- characters are compared lexically."
msgstr ""

#. description(perl-Lingua-EN-Inflect-Number)
msgid ""
"This module extends the functionality of Lingua::EN::Inflect with three new functions available for export:\n"
"\n"
"number     This takes a word, and determines its number. It returns 's' for     singular, 'p' for plural, and 'ambig' for words that can be either     singular or plural.\n"
"\n"
"    Based on that:\n"
"\n"
"to_S / to_PL     These take a word and convert it forcefully either to singular or to     plural. 'Lingua::EN::Inflect' does funny things if you try to pluralise     an already-plural word, but this module does the right thing."
msgstr ""

#. description(perl-PDF-API2)
msgid "This module facilitates the creation and modification of PDF files."
msgstr ""

#. description(perl-MooseX-Params-Validate)
msgid ""
"This module fills a gap in Moose by adding method parameter validation to Moose. This is just one of many developing options, it should not be considered the \"official\" one by any means though.\n"
"\n"
"You might also want to explore 'MooseX::Method::Signatures' and 'MooseX::Declare'."
msgstr ""

#. description(perl-Config-GitLike)
msgid ""
"This module handles interaction with configuration files of the style used by the version control system Git. It can both parse and modify these files, as well as create entirely new ones.\n"
"\n"
"You only need to know a few things about the configuration format in order to use this module. First, a configuration file is made up of key/value pairs. Every key must be contained in a section. Sections can have subsections, but they don't have to. For the purposes of setting and getting configuration variables, we join the section name, subsection name, and variable name together with dots to get a key name that looks like \"section.subsection.variable\". These are the strings that you'll be passing in to 'key' arguments.\n"
"\n"
"Configuration files inherit from each other. By default, 'Config::GitLike' loads data from a system-wide configuration file, a per-user configuration file, and a per-directory configuration file, but by subclassing and overriding methods you can obtain any combination of configuration files. By default, configuration files that don't exist are just skipped.\n"
"\n"
"See the http://www.kernel.org/pub/software/scm/git/docs/git-config.html#_configurat ion_file manpage for details on the syntax of git configuration files. We won't waste pixels on the nitty gritty here.\n"
"\n"
"While the behavior of a couple of this module's methods differ slightly from the 'git config' equivalents, this module can read any config file written by git. The converse is usually true, but only if you don't take advantage of this module's increased permissiveness when it comes to key names. (See the DIFFERENCES FROM GIT-CONFIG manpage for details.)\n"
"\n"
"This is an object-oriented module using Any::Moose. All subroutines are object method calls.\n"
"\n"
"A few methods have parameters that are always used for the same purpose:"
msgstr ""

#. description(perl-Tie-Hash-DBD)
msgid ""
"This module has been created to act as a drop-in replacement for modules that tie straight perl hashes to disk, like 'DB_File'. When the running system does not have enough memory to hold large hashes, and disk-tieing won't work because there is not enough space, it works quite well to tie the hash to a database, which preferable runs on a different server.\n"
"\n"
"This module ties a hash to a database table using *only* a 'key' and a 'value' field. If no tables specification is passed, this will create a temporary table with 'h_key' for the key field and a 'h_value' for the value field.\n"
"\n"
"I think it would make sense to merge the functionality that this module provides into 'Tie::DBI'."
msgstr ""

#. description(perl-Test-InDistDir)
msgid ""
"This module helps run test scripts in IDEs like Komodo.\n"
"\n"
"When running test scripts in an IDE i have to set up a project file defining the dist dir to run tests in and a lib dir to load additional modules from. Often I didn't feel like doing that, especially when i only wanted to do a small patch to a dist. In those cases i added a BEGIN block to mangle the environment for me.\n"
"\n"
"This module basically is that BEGIN block. It automatically moves up one directory when it cannot see the test script in \"t/$scriptname\" and includes 'lib' in @INC when there's no blib present. That way the test ends up with almost the same environment it'd get from EUMM/prove/etc., even when it's actually run inside the t/ directory.\n"
"\n"
"At the same time it will still function correctly when called by EUMM/prove/etc., since it does not change the environment in those cases."
msgstr ""

#. description(perl-Tk-Clock)
msgid ""
"This module implements a Canvas-based clock widget for perl-Tk with lots of options to change the appearance.\n"
"\n"
"Both analog and digital clocks are implemented."
msgstr ""

#. description(perl-CPAN-Meta-YAML)
msgid ""
"This module implements a subset of the YAML specification for use in reading and writing CPAN metadata files like _META.yml_ and _MYMETA.yml_. It should not be used for any other general YAML parsing or generation task.\n"
"\n"
"NOTE: _META.yml_ (and _MYMETA.yml_) files should be UTF-8 encoded. Users are responsible for proper encoding and decoding. In particular, the 'read' and 'write' methods do *not* support UTF-8 and should not be used."
msgstr ""

#. description(perl-Iterator-Util)
msgid ""
"This module implements many useful functions for creating and manipulating iterator objects.\n"
"\n"
"An \"iterator\" is an object, represented as a code block that generates the \"next value\" of a sequence, and generally implemented as a closure. For further information, including a tutorial on using iterator objects, see the the Iterator manpage documentation."
msgstr ""

#. description(perl-DateTime-Format-Strptime)
msgid "This module implements most of strptime(3), the POSIX function that is the reverse of strftime(3), for DateTime. While strftime takes a DateTime and a pattern and returns a string, strptime takes a string and a pattern and returns the DateTime object associated."
msgstr ""

#. description(perl-common-sense)
msgid ""
"This module implements some sane defaults for Perl programs, as defined by two typical (or not so typical - use your common sense) specimens of Perl coders. In fact, after working out details on which warnings and strict modes to enable and make fatal, we found that we (and our code written so far, and others) fully agree on every option, even though we never used warnings before, so it seems this module indeed reflects a \"common\" sense among some long-time Perl coders.\n"
"\n"
"The basic philosophy behind the choices made in common::sense can be summarised as: \"enforcing strict policies to catch as many bugs as possible, while at the same time, not limiting the expressive power available to the programmer\"."
msgstr ""

#. description(perl-Config-Std)
msgid ""
"This module implements yet another damn configuration-file system.\n"
"\n"
"The configuration language is deliberately simple and limited, and the module works hard to preserve as much information (section order, comments, etc.) as possible when a configuration file is updated.\n"
"\n"
"The whole point of Config::Std is to encourage use of one standard layout and syntax in config files. Damian says \"I could have gotten away with it, I would have only allowed one separator. But it proved impossible to choose between ':' and '=' (half the people I asked wanted one, half wanted the other).\" Providing round-trip file re-write is the spoonful of sugar to help the medicine go down. The supported syntax is within the general INI file family\n"
"\n"
"See Chapter 19 of \"Perl Best Practices\" (O'Reilly, 2005) for more detail on the rationale for this approach."
msgstr ""

#. description(perl-Spreadsheet-XLSX)
msgid "This module is a (quick and dirty) emulation of Spreadsheet::ParseExcel for Excel 2007 (.xlsx) file format. It supports styles and many of Excel's quirks, but not all. It populates the classes from Spreadsheet::ParseExcel for interoperability; including Workbook, Worksheet, and Cell."
msgstr ""

#. description(perl-XML-LibXML-Simple)
msgid "This module is a blunt rewrite of XML::Simple (by Grant McLean) to use the XML::LibXML parser for XML structures, where the original uses plain Perl or SAX parsers."
msgstr ""

#. description(perl-DateTime-Format-DateParse)
msgid ""
"This module is a compatibility wrapper around Date::Parse.\n"
"\n"
"  Author:\tJoshua Hoblitt (JHOBLITT) <jhoblitt@cpan.org>"
msgstr ""

#. description(perl-Module-Refresh)
msgid ""
"This module is a generalization of the functionality provided by the Apache::StatINC manpage and the Apache::Reload manpage. It's designed to make it easy to do simple iterative development when working in a persistent environment.\n"
"\n"
"It does not require mod_perl."
msgstr ""

#. description(perl-Mac-PropertyList)
msgid ""
"This module is a low-level interface to the Mac OS X Property List (plist) format. You probably shouldn't use this in applications--build interfaces on top of this so you don't have to put all the heinous multi-level object stuff where people have to look at it.\n"
"\n"
"You can parse a plist file and get back a data structure. You can take that data structure and get back the plist as XML. If you want to change the structure inbetween that's your business. :)\n"
"\n"
"You don't need to be on Mac OS X to use this. It simply parses and manipulates a text format that Mac OS X uses."
msgstr ""

#. description(perl-Log-Contextual)
msgid ""
"This module is a simple interface to extensible logging. It is bundled with a really basic logger, the Log::Contextual::SimpleLogger manpage, but in general you should use a real logger instead of that. For something more serious but not overly complicated, try the Log::Dispatchouli manpage (see the /SYNOPSIS manpage for example.)\n"
"\n"
"The reason for this module is to abstract your logging interface so that logging is as painless as possible, while still allowing you to switch from one logger to another."
msgstr ""

#. description(perl-Data-Visitor)
msgid ""
"This module is a simple visitor implementation for Perl values.\n"
"\n"
"It has a main dispatcher method, 'visit', which takes a single perl value and then calls the methods appropriate for that value.\n"
"\n"
"It can recursively map (cloning as necessary) or just traverse most structures, with support for per object behavior, circular structures, visiting tied structures, and all ref types (hashes, arrays, scalars, code, globs).\n"
"\n"
"the Data::Visitor manpage is meant to be subclassed, but also ships with a callback driven subclass, the Data::Visitor::Callback manpage."
msgstr ""

#. description(perl-Pod-Readme)
msgid ""
"This module is a subclass of L<Pod::PlainText> which provides additional POD markup for generating F<README> files.\n"
"\n"
"Why should one bother with this? One can simply use\n"
"\n"
"  pod2text Module.pm > README\n"
"\n"
"A problem with doing that is that the default L<pod2text> converter will add text to links, so that \"LZ<><Module>\" is translated to \"the Module manpage\".\n"
"\n"
"Another problem is that the F<README> includes the entirety of the module documentation! Most people browsing the F<README> file do not need all of this information.\n"
"\n"
"Likewise, including installation and requirement information in the module documentation is not necessary either, since the module is already installed.\n"
"\n"
"This module allows authors to mark portions of the POD to be included only in, or to be excluded from the F<README> file. It also allows you to include portions of another file (such as a separate F<ChangeLog>)."
msgstr ""

#. description(perl-Text-SpellChecker)
msgid ""
"This module is a thin layer above either Text::Aspell or Text::Hunspell (preferring the latter if available), and allows one to spellcheck a body of text.\n"
"\n"
"Whereas Text::(Hu|A)spell deals with words, Text::Spellchecker deals with blocks of text. For instance, we provide methods for iterating through the text, serializing the object (thus remembering where we left off), and highlighting the current misspelled word within the text."
msgstr ""

#. description(perl-Apache2-AuthCookieDBI)
msgid "This module is an authentication handler that uses the basic mechanism provided by Apache2::AuthCookie with a DBI database for ticket-based protection. It is based on two tokens being provided, a username and password, which can be any strings (there are no illegal characters for either). The username is used to set the remote user as if Basic Authentication was used."
msgstr ""

#. description(perl-Moo)
msgid ""
"This module is an extremely light-weight, high-performance the Moose manpage replacement. It also avoids depending on any XS modules to allow simple deployments. The name 'Moo' is based on the idea that it provides almost -but not quite- two thirds of the Moose manpage.\n"
"\n"
"Unlike 'Mouse' this module does not aim at full the Moose manpage compatibility. See the /INCOMPATIBILITIES manpage for more details."
msgstr ""

#. description(perl-Text-RecordParser)
msgid "This module is for reading record-oriented data in a delimited text file. The most common example have records separated by newlines and fields separated by commas or tabs, but this module aims to provide a consistent interface for handling sequential records in a file however they may be delimited. Typically this data lists the fields in the first line of the file, in which case you should call bind_header to bind the field name (or not, and it will be called implicitly). If the first line contains data, you can still bind your own field names via bind_fields. Either way, you can then use many methods to get at the data as arrays or hashes."
msgstr ""

#. description(perl-Class-C3-Adopt-NEXT)
msgid "This module is intended as a drop-in replacement for NEXT, supporting the same interface, but using Class::C3 to do the hard work. You can then write new code without NEXT, and migrate individual source files to use Class::C3 or method modifiers as appropriate, at whatever pace you're comfortable with."
msgstr ""

#. description(perl-Carp-Always)
msgid ""
"This module is meant as a debugging aid. It can be used to make a script complain loudly with stack backtraces when warn()ing or die()ing.\n"
"\n"
"Here are how stack backtraces produced by this module looks:\n"
"\n"
"     $ perl -MCarp::Always -e 'sub f { die \"arghh\" }; sub g { f }; g'   arghh at -e line 1           main::f() called at -e line 1           main::g() called at -e line 1\n"
"\n"
"     $ perl -MCarp::Always -w -e 'sub f { $a = shift; @a = @$a };' \\                            -e 'sub g { f(undef) }; g'   Use of uninitialized value in array dereference at -e line 1           main::f('undef') called at -e line 2           main::g() called at -e line 2\n"
"\n"
"In the implementation, the 'Carp' module does the heavy work, through 'longmess()'. The actual implementation sets the signal hooks '$SIG{__WARN__}' and '$SIG{__DIE__}' to emit the stack backtraces.\n"
"\n"
"Oh, by the way, 'carp' and 'croak' when requiring/using the 'Carp' module are also made verbose, behaving like 'cluck' and 'confess', respectively."
msgstr ""

#. description(perl-MooseX-Object-Pluggable)
msgid "This module is meant to be loaded as a role from Moose-based classes it will add five methods and four attributes to assist you with the loading and handling of plugins and extensions for plugins. I understand that this may pollute your namespace, however I took great care in using the least ambiguous names possible."
msgstr ""

#. description(perl-Iterator)
msgid ""
"This module is meant to be the definitive implementation of iterators, as popularized by Mark Jason Dominus's lectures and recent book (_Higher Order Perl_, Morgan Kauffman, 2005).\n"
"\n"
"An \"iterator\" is an object, represented as a code block that generates the \"next value\" of a sequence, and generally implemented as a closure. When you need a value to operate on, you pull it from the iterator. If it depends on other iterators, it pulls values from them when it needs to. Iterators can be chained together (see the Iterator::Util manpage for functions that help you do just that), queueing up work to be done but _not actually doing it_ until a value is needed at the front end of the chain. At that time, one data value is pulled through the chain.\n"
"\n"
"Contrast this with ordinary array processing, where you load or compute all of the input values at once, then loop over them in memory. It's analogous to the difference between looping over a file one line at a time, and reading the entire file into an array of lines before operating on it.\n"
"\n"
"Iterator.pm provides a class that simplifies creation and use of these iterator objects. Other 'Iterator::' modules (see the /\"SEE ALSO\" manpage) provide many general-purpose and special-purpose iterator functions.\n"
"\n"
"Some iterators are infinite (that is, they generate infinite sequences), and some are finite. When the end of a finite sequence is reached, the iterator code block should throw an exception of the type 'Iterator::X::Am_Now_Exhausted'; this is usually done via the the /is_done manpage function.. This will signal the Iterator class to mark the object as exhausted. The the /is_exhausted manpage method will then return true, and the the /isnt_exhausted manpage method will return false. Any further calls to the the /value manpage method will throw an exception of the type 'Iterator::X::Exhausted'. See the /DIAGNOSTICS manpage.\n"
"\n"
"Note that in many, many cases, you will not need to explicitly create an iterator; there are plenty of iterator generation and manipulation functions in the other associated modules. You can just plug them together like building blocks."
msgstr ""

#. description(perl-JSON-PP)
msgid ""
"This module is the JSON::XS manpage compatible pure Perl module. (Perl 5.8 or later is recommended)\n"
"\n"
"JSON::XS is the fastest and most proper JSON module on CPAN. It is written by Marc Lehmann in C, so must be compiled and installed in the used environment.\n"
"\n"
"JSON::PP is a pure-Perl module and has compatibility to JSON::XS."
msgstr ""

#. description(perl-Archive-Peek)
msgid "This module lets you peek into archives without extracting them. It currently supports tar files and zip files. To support Bzip2- compressed files, you should install IO::Uncompress::Bunzip2."
msgstr ""

#. description(perl-Package-Generator)
msgid ""
"This module lets you quickly and easily construct new packages. It gives them unused names and sets up their package data, if provided.\n"
"\n"
"  Author:\tRicardo Signes, <rjbs@cpan.org>"
msgstr ""

#. description(perl-PAR)
msgid "This module lets you use special zip files, called Perl Archives, as libraries from which Perl modules can be loaded."
msgstr ""

#. description(perl-Sub-Install)
msgid "This module makes it easy to install subroutines into packages without the unslightly mess of 'no strict' or typeglobs lying about where just anyone can see them."
msgstr ""

#. description(perl-Perl-Tidy)
msgid "This module makes the functionality of the perltidy utility available to perl scripts. Any or all of the input parameters may be omitted, in which case the @ARGV array will be used to provide input parameters as described in the perltidy(1) man page."
msgstr ""

#. description(perl-MooseX-Types-DateTime)
msgid "This module packages several the Moose::Util::TypeConstraints manpage with coercions, designed to work with the the DateTime manpage suite of objects."
msgstr ""

#. description(perl-Image-Info)
msgid "This module provide functions to extract various kind of meta information from image files."
msgstr ""

#. description(perl-MooseX-Types-Set-Object)
msgid "This module provides Moose type constraints (see the Moose::Util::TypeConstraints manpage, the MooseX::Types manpage)."
msgstr ""

#. description(perl-Clone-PP)
msgid ""
"This module provides a general-purpose clone function to make deep copies of Perl data structures. It calls itself recursively to copy nested hash, array, scalar and reference types, including tied variables and objects.\n"
"\n"
"The clone() function takes a scalar argument to copy. To duplicate arrays or hashes, pass them in by reference:\n"
"\n"
"  my $copy = clone(\\@array);    my @copy = @{ clone(\\@array) };   my $copy = clone(\\%hash);     my %copy = %;\n"
"\n"
"The clone() function also accepts an optional second parameter that can be used to limit the depth of the copy. If you pass a limit of 0, clone will return the same value you supplied; for a limit of 1, a shallow copy is constructed; for a limit of 2, two layers of copying are done, and so on.\n"
"\n"
"  my $shallow_copy = clone( $item, 1 );\n"
"\n"
"To allow objects to intervene in the way they are copied, the clone() function checks for a couple of optional methods. If an object provides a method named 'clone_self', it is called and the result returned without further processing. Alternately, if an object provides a method named 'clone_init', it is called on the copied object before it is returned."
msgstr ""

#. description(perl-Symbol-Util)
msgid ""
"This module provides a set of additional functions useful for Perl symbols manipulation.\n"
"\n"
"'stash' and 'fetch_glob' functions gets stash or glob without need to use 'no strict 'refs''.\n"
"\n"
"'delete_glob' function allows to delete specific slot of symbol name without deleting others.\n"
"\n"
"'delete_sub' removes the symbol from class API. This symbol won't be available as an object method.\n"
"\n"
"'export_package' works like the Exporter manpage module and allows to export symbols from one package to other.\n"
"\n"
"'unexport_package' allows to delete previously exported symbols."
msgstr ""

#. description(perl-XML-XPathEngine)
msgid "This module provides an XPath engine, that can be re-used by other module/classes that implement trees."
msgstr ""

#. description(perl-GraphViz)
msgid ""
"This module provides an interface to layout and image generation of directed and undirected graphs in a variety of formats (PostScript, PNG, etc.) using the \"dot\", \"neato\", \"twopi\", \"circo\" and \"fdp\" programs from the GraphViz project (http://www.graphviz.org/ or http://www.research.att.com/sw/tools/graphviz/).\n"
"\n"
"GraphViz is deprecated in favour of the GraphViz2 manpage."
msgstr ""

#. description(perl-Statistics-Descriptive)
msgid ""
"This module provides basic functions used in descriptive statistics. It has an object oriented design and supports two different types of data storage and calculation objects: sparse and full. With the sparse method, none of the data is stored and only a few statistical measures are available. Using the full method, the entire data set is retained and additional functions are available.\n"
"\n"
"Whenever a division by zero may occur, the denominator is checked to be greater than the value '$Statistics::Descriptive::Tolerance', which defaults to 0.0. You may want to change this value to some small positive value such as 1e-24 in order to obtain error messages in case of very small denominators.\n"
"\n"
"Many of the methods (both Sparse and Full) cache values so that subsequent calls with the same arguments are faster."
msgstr ""

#. description(perl-Locale-Maketext-Lexicon)
msgid ""
"This module provides lexicon-handling modules to read from other localization formats, such as _Gettext_, _Msgcat_, and so on.\n"
"\n"
"If you are unfamiliar with the concept of lexicon modules, please consult the Locale::Maketext manpage and the 'webl10n' HTML files in the 'docs/' directory of this module.\n"
"\n"
"A command-line utility the xgettext.pl manpage is also installed with this module, for extracting translatable strings from source files."
msgstr ""

#. description(perl-Probe-Perl)
msgid "This module provides methods for obtaining information about the currently running perl interpreter. It originally began life as code in the Module::Build project, but has been externalized here for general use."
msgstr ""

#. description(perl-Test-LongString)
msgid "This module provides some drop-in replacements for the string comparison functions of the Test::More manpage, but which are more suitable when you test against long strings. If you've ever had to search for text in a multi-line string like an HTML document, or find specific items in binary data, this is the module for you."
msgstr ""

#. description(perl-File-Slurp)
msgid ""
"This module provides subs that allow you to read or write entire files with one simple call. They are designed to be simple to use, have flexible ways to pass in or get the file contents and to be very efficient. There is also a sub to read in all the files in a directory other than '.' and '..'\n"
"\n"
"These slurp/spew subs work for files, pipes and sockets, stdio, pseudo-files, and the DATA handle. Read more about why slurping files is a good thing in the file 'slurp_article.pod' in the extras/ directory.\n"
"\n"
"If you are interested in how fast these calls work, check out the slurp_bench.pl program in the extras/ directory. It compares many different forms of slurping. You can select the I/O direction, context and file sizes. Use the --help option to see how to run it."
msgstr ""

#. description(perl-MooseX-Declare)
msgid "This module provides syntactic sugar for Moose, the postmodern object system for Perl 5. When used, it sets up the 'class' and 'role' keywords."
msgstr ""

#. description(perl-IO-Interactive)
msgid ""
"This module provides three utility subroutines that make it easier to develop interactive applications...\n"
"\n"
"* 'is_interactive()'\n"
"\n"
"  This subroutine returns true if '*ARGV' and the currently selected   filehandle (usually '*STDOUT') are connected to the terminal. The test is   considerably more sophisticated than:\n"
"\n"
"      -t *ARGV && -t *STDOUT\n"
"\n"
"  as it takes into account the magic behaviour of '*ARGV'.\n"
"\n"
"  You can also pass 'is_interactive' a writable filehandle, in which case   it requires that filehandle be connected to a terminal (instead of the   currently selected). The usual suspect here is '*STDERR':\n"
"\n"
"      if ( is_interactive(*STDERR) ) {           carp $warning;       }\n"
"\n"
"* 'interactive()'\n"
"\n"
"  This subroutine returns '*STDOUT' if 'is_interactive' is true. If   'is_interactive()' is false, 'interactive' returns a filehandle that does   not print.\n"
"\n"
"  This makes it easy to create applications that print out only when the   application is interactive:\n"
"\n"
"      print {interactive} \"Please enter a value: \";       my $value = <>;\n"
"\n"
"  You can also pass 'interactive' a writable filehandle, in which case it   writes to that filehandle if it is connected to a terminal (instead of   writinbg to '*STDOUT'). Once again, the usual suspect is '*STDERR':\n"
"\n"
"      print {interactive(*STDERR)} $warning;\n"
"\n"
"* 'busy {...}'\n"
"\n"
"  This subroutine takes a block as its single argument and executes that   block. Whilst the block is executed, '*ARGV' is temporarily replaced by a   closed filehandle. That is, no input from '*ARGV' is possible in a 'busy'   block. Furthermore, any attempts to send input into the 'busy' block   through '*ARGV' is intercepted and a warning message is printed to   '*STDERR'. The 'busy' call returns a filehandle that contains the   intercepted input.\n"
"\n"
"  A 'busy' block is therefore useful to prevent attempts at input when the   program is busy at some non-interactive task."
msgstr ""

#. description(perl-Class-Std)
msgid "This module provides tools that help to implement the \"inside out object\" class structure in a convenient and standard way."
msgstr ""

#. description(perl-Test-NoTabs)
msgid "This module scans your project/distribution for any perl files (scripts, modules, etc) for the presence of tabs."
msgstr ""

#. description(perl-Test-EOL)
msgid "This module scans your project/distribution for any perl files (scripts, modules, etc) for the presence of windows line endings."
msgstr ""

#. description(perl-DateTime-Format-MySQL)
msgid "This module understands the formats used by MySQL for its DATE, DATETIME, TIME, and TIMESTAMP data types. It can be used to parse these formats in order to create DateTime objects, and it can take a DateTime object and produce a string representing it in the MySQL format."
msgstr ""

#. description(perl-Lingua-Stem-Fr)
msgid "This module use the a modified version of the Porter Stemming Algorithm to return a stemmed words."
msgstr ""

#. description(perl-CPAN-Meta-Check)
msgid "This module verifies if requirements described in a CPAN::Meta object are present."
msgstr ""

#. description(perl-SQL-Abstract)
msgid ""
"This module was inspired by the excellent the DBIx::Abstract manpage. However, in using that module I found that what I really wanted to do was generate SQL, but still retain complete control over my statement handles and use the DBI interface. So, I set out to create an abstract SQL generation module.\n"
"\n"
"While based on the concepts used by the DBIx::Abstract manpage, there are several important differences, especially when it comes to WHERE clauses. I have modified the concepts used to make the SQL easier to generate from Perl data structures and, IMO, more intuitive. The underlying idea is for this module to do what you mean, based on the data structures you provide it. The big advantage is that you don't have to modify your code every time your data changes, as this module figures it out."
msgstr ""

#. description(perl-Config-Auto)
msgid ""
"This module was written after having to write Yet Another Config File Parser for some variety of colon-separated config. I decided \"never again\".\n"
"\n"
"Config::Auto aims to be the most 'DWIM' config parser available, by detecting configuration styles, include paths and even config filenames automagically.\n"
"\n"
"See the the HOW IT WORKS manpage section below on implementation details."
msgstr ""

#. description(perl-Test-CPAN-Meta)
msgid ""
"This module was written to ensure that a META.yml file, provided with a standard distribution uploaded to CPAN, meets the specifications that are slowly being introduced to module uploads, via the use of package makers and installers such as the ExtUtils::MakeMaker manpage, the Module::Build manpage and the Module::Install manpage.\n"
"\n"
"See the CPAN::Meta manpage for further details of the CPAN Meta Specification."
msgstr ""

#. description(perl-Geo-Coordinates-UTM)
msgid "This module will translate latitude longitude coordinates to Universal Transverse Mercator(UTM) coordinates and vice versa."
msgstr ""

#. description(perl-File-Slurp-Unicode)
msgid "This module wraps the File::Slurp manpage and adds character encoding support through the *'encoding'* parameter. It exports the same functions which take all the same parameters as File::Slurp. Please see the the File::Slurp manpage documentation for basic usage; only the differences are described from here on out."
msgstr ""

#. description(perl-Business-ISBN)
msgid "This modules handles International Standard Book Numbers, including ISBN-10 and ISBN-13."
msgstr ""

#. description(perl-Digest-Perl-MD5)
msgid ""
"This modules has the same interface as the much faster 'Digest::MD5'. So you can easily exchange them, e.g.\n"
"\n"
"\tBEGIN { \t  eval { \t    require Digest::MD5; \t    import Digest::MD5 'md5_hex' \t  }; \t  if ($@) { # ups, no Digest::MD5 \t    require Digest::Perl::MD5; \t    import Digest::Perl::MD5 'md5_hex' \t  } \t}\n"
"\n"
"If the 'Digest::MD5' module is available it is used and if not you take 'Digest::Perl::MD5'.\n"
"\n"
"You can also install the Perl part of Digest::MD5 together with Digest::Perl::MD5 and use Digest::MD5 as normal, it falls back to Digest::Perl::MD5 if it cannot load its object files.\n"
"\n"
"For a detailed Documentation see the 'Digest::MD5' module."
msgstr ""

#. description(php5-pear-channel-ezno)
msgid "This package adds the components.ez.no channel which allows PEAR packages from this channel to be installed."
msgstr ""

#. description(php5-pear-channel-horde)
msgid "This package adds the pear.horde.org channel which allows PEAR packages from this channel to be installed."
msgstr ""

#. description(php5-pear-channel-phpunit)
msgid "This package adds the pear.phpunit.de channel which allows PEAR packages from this channel to be installed."
msgstr ""

#. description(php5-pear-channel-symfony)
msgid "This package adds the pear.symfony-project.com channel which allows PEAR packages from this channel to be installed."
msgstr ""

#. description(php5-pear-Horde_Kolab_Format)
msgid "This package allows to convert Kolab data objects from XML to hashes."
msgstr ""

#. description(php5-pear-Horde_Kolab_Server)
msgid "This package allows to read/write entries in the Kolab user  database stored in LDAP."
msgstr ""

#. description(php5-pear-Crypt_Blowfish)
msgid "This package allows you to perform two-way blowfish encryption on the fly using only PHP. This package does not require the MCrypt PHP extension to work, although it can make use of it if available."
msgstr ""

#. description(php5-pear-Horde_Kolab_Session)
msgid "This package handles a Kolab session. It allows to authenticate against LDAP and provides the users storage locations."
msgstr ""

#. description(php5-pear-cache_lite)
msgid "This package is a little cache system optimized for file containers. It is fast and safe (because it uses file locking and/or anti-corruption tests)."
msgstr ""

#. description(php5-pear-Horde_Pdf)
#, fuzzy
msgid "This package provides PDF generation using only PHP, without requiring any external libraries."
msgstr "<p>此菜单包含引用文档信息的链接。</p>"

#. description(perl-Crypt-Rot13)
#, fuzzy
msgid "This package provides ROT13 Algorithm (Caesar) as a Perl module."
msgstr "包中含有意外的版本"

#. description(php5-pear-Horde_Data)
msgid ""
"This package provides a data import and export API, with backends for:\n"
"* CSV\n"
"* TSV\n"
"* iCalendar\n"
"* vCard\n"
"* vNote\n"
"* vTodo"
msgstr ""

#. description(php5-pear-Horde_Rdo)
#, fuzzy
msgid "This package provides a lightweight ORM API"
msgstr "包中含有意外的版本"

#. description(php5-pear-Horde_Role)
msgid "This package provides a method for PEAR to install Horde components into a base Horde installation."
msgstr ""

#. description(php5-pear-Horde_Constraint)
msgid "This package provides a programmatic way of building constraints that evaluate to true or false."
msgstr ""

#. description(php5-pear-Horde_Ldap)
#, fuzzy
msgid "This package provides a set of classes for connecting to LDAP servers and working with directory objects."
msgstr "<p>此菜单包含引用文档信息的链接。</p>"

#. description(php5-pear-Horde_Http)
#, fuzzy
msgid "This package provides a set of classes for making HTTP requests."
msgstr "Tcl/Tk 及其开发工具。"

#. description(php5-pear-Horde_Cache)
msgid "This package provides a simple, functional caching API, with the option to store the cached data on the filesystem, in one of the PHP opcode cache systems (APC, eAcclerator, XCache, or Zend Performance Suite's content cache), memcached, or an SQL table."
msgstr ""

#. description(php5-pear-Horde_Text_Diff)
msgid "This package provides a text-based diff engine and renderers for multiple diff output formats."
msgstr ""

#. description(php5-pear-Horde_Icalendar)
#, fuzzy
msgid "This package provides an API for dealing with iCalendar data."
msgstr "包中含有意外的版本"

#. description(php5-pear-Horde_Compress)
#, fuzzy
msgid "This package provides an API for various compression techniques."
msgstr "Tcl/Tk 及其开发工具。"

#. description(php5-pear-Horde_Image)
msgid "This package provides an Image utility API, with backends for:  * GD  * GIF  * PNG  * SVG  * SWF  * ImageMagick convert command line tool  * Imagick Extension"
msgstr ""

#. description(php5-pear-Horde_Oauth)
msgid "This package provides an OAuth consumer (http://oauth.net) and OAuth infrastruture, and in the future will provide an OAuth server."
msgstr ""

#. description(php5-pear-Horde_Imap_Client)
msgid "This package provides an abstracted API interface to various IMAP4rev1 (RFC3501) backend drivers. It is faster than the php5-imap implementation"
msgstr ""

#. description(php5-pear-Horde_Alarm)
msgid "This package provides an interface to deal with reminders, alarms and notifications through a standardized API. The following notification methods are available at the moment: standard Horde notifications, popups, emails, sms."
msgstr ""

#. description(php5-pear-Horde_SyncMl)
msgid "This package provides classes for implementing a SyncML server. SyncML is an OMA standard for synchronizing contacts, notes, calendar and tasks of mobile devices similar to ActiveSync It is advisable to use it together with other components from the Horde Framework"
msgstr ""

#. description(php5-pear-Horde_Routes)
msgid "This package provides classes for mapping URLs into the controllers and actions of an MVC system. It is a port of a Python library, Routes, by Ben Bangert (http://routes.groovie.org)."
msgstr ""

#. description(php5-pear-Horde_Argv)
msgid "This package provides classes for parsing command line arguments with various actions, providing help, grouping options, and more."
msgstr ""

#. description(php5-pear-Horde_Service_Facebook)
#, fuzzy
msgid "This package provides client libraries for the Facebook REST API."
msgstr "Tcl/Tk 及其开发工具。"

#. description(php5-pear-Horde_Service_Twitter)
#, fuzzy
msgid "This package provides client libraries for the Twitter REST API."
msgstr "包中含有意外的版本"

#. description(php5-pear-Horde_ActiveSync)
#, fuzzy
msgid "This package provides libraries for implementing an ActiveSync server."
msgstr "Tcl/Tk 及其开发工具。"

#. description(php5-pear-Horde_Feed)
msgid "This package provides support for working with feed formats such as RSS and Atom."
msgstr ""

#. description(php5-pear-Horde_Support)
msgid "This package provides supporting functionality for Horde that is not tied to Horde but is used by it. These classes can be used outside of Horde as well."
msgstr ""

#. description(php5-pear-Horde_Controller)
#, fuzzy
msgid "This package provides the controller part of an MVC system for Horde."
msgstr "包中含有意外的版本"

#. description(php5-pear-Horde_Stream_Filter)
#, fuzzy
msgid "This package provides various stream filters."
msgstr "Tcl/Tk 及其开发工具。"

#. description(php5-pear-Horde_Stream_Wrapper)
#, fuzzy
msgid "This package provides various stream wrappers."
msgstr "Tcl/Tk 及其开发工具。"

#. description(perl-MooseX-Role-TraitConstructor)
msgid "This role allows you to easily accept a 'traits' argument (or another name) into your constructor, which will easily mix roles into an anonymous class before construction, much like the Moose::Meta::Attribute manpage does."
msgstr ""

#. summary(perl-Test-Object)
msgid "Thoroughly testing objects via registered handlers"
msgstr ""

#. description(perl-Throwable)
msgid "Throwable is a role for classes that are meant to be thrown as exceptions to standard program flow. It is very simple and does only two things: saves any previous value for '$@' and calls 'die $self'."
msgstr ""

#. summary(perl-Tie-Hash-DBD)
#, fuzzy
msgid "Tie plain hashes to DBI interface"
msgstr "内核接口"

#. summary(perl-Tie-ToObject)
msgid "Tie to an existing object."
msgstr ""

#. summary(perl-DateTime-TimeZone)
msgid "Time zone object base class and factory"
msgstr ""

#. description(perl-Time-Duration-Parse)
msgid ""
"Time::Duration::Parse is a module to parse human readable duration strings like _2 minutes and 3 seconds_ to seconds.\n"
"\n"
"It does the opposite of _duration_exact_ function in Time::Duration and is roundtrip safe. So, the following is always true.\n"
"\n"
"  use Time::Duration::Parse;   use Time::Duration;\n"
"\n"
"  my $seconds = int rand 100000;   is( parse_duration(duration_exact($seconds)), $seconds );"
msgstr ""

#. summary(perl-Meta-Builder)
msgid "Tools for creating Meta objects to track custom metrics."
msgstr ""

#. summary(perl-Test-SubCalls)
msgid "Track the number of times subs are called"
msgstr ""

#. summary(perl-Test-Trap)
msgid "Trap exit codes, exceptions, output, etc"
msgstr ""

#. summary(perl-Time-Clock)
msgid "Twenty-four hour clock object with nanosecond precision."
msgstr ""

#. summary(perl-Locale-US)
msgid "Two letter codes for state identification in the United States and vice versa"
msgstr ""

#. description(perl-Locale-US)
msgid "Two letter codes for state identification in the United States and vice versa."
msgstr ""

#. summary(perl-Sysadm-Install)
msgid "Typical installation tasks for system administrators"
msgstr ""

#. summary(perl-UNIVERSAL-moniker)
msgid "UNIVERAL::moniker"
msgstr ""

#. description(perl-Hash-Util-FieldHash-Compat)
msgid ""
"Under older perls this module provides a drop in compatible api to the Hash::Util::FieldHash manpage using the perltie manpage. When the Hash::Util::FieldHash manpage is available it will use that instead.\n"
"\n"
"This way code requiring field hashes can benefit from fast, robust field hashes on Perl 5.10 and newer, but still run on older perls that don't ship with that module.\n"
"\n"
"See the Hash::Util::FieldHash manpage for all the details of the API."
msgstr ""

#. summary(perl-CHI)
msgid "Unified cache handling interface"
msgstr ""

#. description(php5-pear-Horde_SpellChecker)
msgid "Unified spellchecking API."
msgstr ""

#. summary(perl-Test-Unit-Lite)
msgid "Unit testing without external dependencies"
msgstr ""

#. summary(perl-Hash-Util-FieldHash-Compat)
msgid "Use L<Hash::Util::FieldHash> or ties, depending"
msgstr ""

#. summary(perl-Locale-Maketext-Lexicon)
msgid "Use other catalog formats in Maketext"
msgstr ""

#. summary(perl-File-BaseDir)
msgid "Use the Freedesktop.org base directory specification"
msgstr ""

#. description(perl-Contextual-Return)
msgid ""
"Usually, when you need to create a subroutine that returns different values in different contexts (list, scalar, or void), you write something like:\n"
"\n"
"    sub get_server_status {         my ($server_ID) = @_;\n"
"\n"
"                 my %server_data = _ascertain_server_status($server_ID);\n"
"\n"
"                          if (wantarray()) {             return @server_data{ qw(name uptime load users) };         }         if (defined wantarray()) {             return $server_data{load};         }         if (!defined wantarray()) {             carp 'Useless use of get_server_status() in void context';             return;         }         else {             croak q{Bad context! No biscuit!};         }     }\n"
"\n"
"That works okay, but the code could certainly be more readable. In its simplest usage, this module makes that code more readable by providing three subroutines--'LIST()', 'SCALAR()', 'VOID()'--that are true only when the current subroutine is called in the corresponding context:\n"
"\n"
"    use Contextual::Return;\n"
"\n"
"    sub get_server_status {         my ($server_ID) = @_;\n"
"\n"
"                 my %server_data = _ascertain_server_status($server_ID);\n"
"\n"
"                          if (LIST)   { return @server_data{ qw(name uptime load users) } }         if (SCALAR) { return $server_data{load}                         }         if (VOID)   { print \"$server_data{load}\\n\"                      }         else        { croak q{Bad context! No biscuit!}                 }     }"
msgstr ""

#. summary(perl-IO-Interactive)
#, fuzzy
msgid "Utilities for interactive I/O"
msgstr "VNC 服务器"

#. summary(perl-Test-Output)
msgid "Utilities to test STDOUT and STDERR messages."
msgstr ""

#. summary(perl-Test-CPAN-Meta)
msgid "Validation of the META.yml file in a CPAN distribution."
msgstr ""

#. summary(perl-CPAN-Meta-Check)
msgid "Verify requirements in a CPAN::Meta object"
msgstr ""

#. summary(perl-DBIx-Simple)
msgid "Very complete easy-to-use OO interface to DBI"
msgstr ""

#. summary(perl-Data-Visitor)
msgid "Visitor style traversal of Perl data structures"
msgstr ""

#. description(perl-WWW-Mechanize)
msgid "WWW::Mechanize, or Mech for short, helps you automate interaction with a website. It supports performing a sequence of page fetches including following links and submitting forms. Each fetched page is parsed and its links and forms are extracted. A link or a form can be selected, form fields can be filled and the next page can be fetched. Mech also stores a history of the URLs you've visited, which can be queried and revisited."
msgstr ""

#. summary(perl-Carp-Always)
msgid "Warns and dies noisily with stack backtraces"
msgstr ""

#. description(perl-Data-Page)
msgid ""
"When searching through large amounts of data, it is often the case that a result set is returned that is larger than we want to display on one page. This results in wanting to page through various pages of data. The maths behind this is unfortunately fiddly, hence this module.\n"
"\n"
"The main concept is that you pass in the number of total entries, the number of entries per page, and the current page number. You can then call methods to find out how many pages of information there are, and what number the first and last entries on the current page really are."
msgstr ""

#. description(perl-SUPER)
msgid "When subclassing a class, you occasionally want to dispatch control to the superclass -- at least conditionally and temporarily. The Perl syntax for calling your superclass is ugly and unwieldy:"
msgstr ""

#. description(perl-Pod-Coverage-Moose)
msgid ""
"When using the Pod::Coverage manpage in combination with the Moose manpage, it will report any method imported from a Role. This is especially bad when used in combination with the Test::Pod::Coverage manpage, since it takes away its ease of use.\n"
"\n"
"To use this module in combination with the Test::Pod::Coverage manpage, use something like this:\n"
"\n"
"  use Test::Pod::Coverage;   all_pod_coverage_ok({ coverage_class => 'Pod::Coverage::Moose'});"
msgstr ""

#. description(perl-namespace-clean)
msgid ""
"When you define a function, or import one, into a Perl package, it will naturally also be available as a method. This does not per se cause problems, but it can complicate subclassing and, for example, plugin classes that are included via multiple inheritance by loading them as base classes.\n"
"\n"
"The namespace::clean pragma will remove all previously declared or imported symbols at the end of the current package's compile cycle. Functions called in the package itself will still be bound by their name, but they won't show up as methods on your class or instances.\n"
"\n"
"By unimporting via no you can tell namespace::clean to start collecting functions for the next use namespace::clean; specification."
msgstr ""

#. description(perl-namespace-autoclean)
msgid ""
"When you import a function into a Perl package, it will naturally also be available as a method.\n"
"\n"
"The 'namespace::autoclean' pragma will remove all imported symbols at the end of the current package's compile cycle. Functions called in the package itself will still be bound by their name, but they won't show up as methods on your class or instances.\n"
"\n"
"This module is very similar to namespace::clean, except it will clean all imported functions, no matter if you imported them before or after you 'use'd the pragma. It will also not touch anything that looks like a method, according to 'Class::MOP::Class::get_method_list'.\n"
"\n"
"If you're writing an exporter and you want to clean up after yourself (and your peers), you can use the '-cleanee' switch to specify what package to clean:\n"
"\n"
"  package My::MooseX::namespace::autoclean;   use strict;\n"
"\n"
"  use namespace::autoclean (); # no cleanup, just load\n"
"\n"
"  sub import {       namespace::autoclean->import(         -cleanee => scalar(caller),       );   }"
msgstr ""

#. description(perl-Tie-ToObject)
msgid ""
"While the perldoc/tie manpage allows tying to an arbitrary object, the class in question must support this in it's implementation of 'TIEHASH', 'TIEARRAY' or whatever.\n"
"\n"
"This class provides a very tie constructor that simply returns the object it was given as it's first argument.\n"
"\n"
"This way side effects of calling '$object->TIEHASH' are avoided.\n"
"\n"
"This is used in the Data::Visitor manpage in order to tie a variable to an already existing object. This is also useful for cloning, when you want to clone the internal state object instead of going through the tie interface for that variable."
msgstr ""

#. description(perl-XML-SAX-Writer)
msgid ""
"Why yet another XML Writer ?\n"
"\n"
"A new XML Writer was needed to match the SAX2 effort because quite naturally no existing writer understood SAX2. My first intention had been to start patching XML::Handler::YAWriter as it had previously been my favourite writer in the SAX1 world.\n"
"\n"
"However the more I patched it the more I realised that what I thought was going to be a simple patch (mostly adding a few event handlers and changing the attribute syntax) was turning out to be a rewrite due to various ideas I`d been collecting along the way. Besides, I couldn`t find a way to elegantly make it work with SAX2 without breaking the SAX1 compatibility which people are probably still using. There are of course ways to do that, but most require user interaction which is something I wanted to avoid.\n"
"\n"
"So in the end there was a new writer. I think it`s in fact better this way as it helps keep SAX1 and SAX2 separated.\n"
"\n"
"  Author: Robin Berjon  <robin@knowscape.com>"
msgstr ""

#. summary(perl-Business-ISBN)
msgid "Work with International Standard Book Numbers"
msgstr ""

#. summary(perl-MooseX-Role-Cmd)
msgid "Wrap system command binaries the Moose way"
msgstr ""

#. summary(perl-App-Cmd)
msgid "Write command line apps with less suffering"
msgstr ""

#. summary(perl-Test-Spec)
msgid "Write tests in a declarative specification style"
msgstr ""

#. summary(perl-Mixin-Linewise)
msgid "Write your linewise code for handles; this does the rest"
msgstr ""

#. description(perl-XML-Generator-PerlData)
msgid ""
"XML::Generator::PerlData provides a simple way to generate SAX2 events from nested Perl data structures, while providing finer-grained control over the resulting document streams.\n"
"\n"
"Processing comes in two flavors: *Simple Style* and *Stream Style*:\n"
"\n"
"In a nutshell, 'simple style' is best used for those cases where you have a a single Perl data structure that you want to convert to XML as quickly and painlessly as possible. 'Stream style' is more useful for cases where you are receiving chunks of data (like from a DBI handle) and you want to process those chunks as they appear. See *PROCESSING METHODS* for more info about how each style works."
msgstr ""

#. summary(perl-XML-LibXML-Simple)
msgid "XML::LibXML based XML::Simple clone"
msgstr ""

#. description(perl-Class-Inner)
msgid "Yet another implementation of an anonymous class with per object overrideable methods, but with the added attraction of sort of working dispatch to the parent class's method."
msgstr ""

#. description(perl-MooseX-Role-Parameterized)
msgid ""
"Your parameterized role consists of two new things: parameter declarations and a 'role' block.\n"
"\n"
"Parameters are declared using the the /parameter manpage keyword which very much resembles the Moose/has manpage. You can use any option that the Moose/has manpage accepts. The default value for the 'is' option is 'ro' as that's a very common case. Use 'is => 'bare'' if you want no accessor. These parameters will get their values when the consuming class (or role) uses the Moose/with manpage. A parameter object will be constructed with these values, and passed to the 'role' block.\n"
"\n"
"The 'role' block then uses the usual the Moose::Role manpage keywords to build up a role. You can shift off the parameter object to inspect what the consuming class provided as parameters. You use the parameters to customize your role however you wish.\n"
"\n"
"There are many possible implementations for parameterized roles (hopefully with a consistent enough API); I believe this to be the easiest and most flexible design. Coincidentally, Pugs originally had an eerily similar design.\n"
"\n"
"See the MooseX::Role::Parameterized::Extending manpage for some tips on how to extend this module."
msgstr ""

#. summary(perl-String-Truncate)
msgid "a module for when strings are too long to be displayed in..."
msgstr ""

#. summary(perl-File-Mork)
msgid "a module to read Mozilla URL history files"
msgstr ""

#. summary(perl-Throwable)
msgid "a role for classes that can be thrown"
msgstr ""

#. summary(perl-CPAN-Meta-Requirements)
msgid "a set of version requirements for a CPAN dist"
msgstr ""

#. summary(perl-String-Errf)
msgid "a simple sprintf-like dialect"
msgstr ""

#. summary(perl-Module-Starter)
msgid "a simple starter kit for any module"
msgstr ""

#. summary(perl-Log-Dispatchouli)
msgid "a simple wrapper around Log::Dispatch"
msgstr ""

#. summary(perl-Role-HasMessage)
msgid "a thing with a message method"
msgstr ""

#. summary(perl-Class-Load)
msgid "a working (require \"Class::Name\") and more"
msgstr ""

#. summary(perl-Net-SSLGlue)
msgid "add/extend SSL support for common perl modules"
msgstr ""

#. summary(perl-Config-MVP-Reader-INI)
#, fuzzy
msgid "an MVP config reader for .ini files"
msgstr "rpm 文件的查看器。"

#. summary(perl-MooseX-Params-Validate)
msgid "an extension of Params::Validate using Moose's types"
msgstr ""

#. summary(perl-MooseX-Traits)
msgid "automatically apply roles at object creation time"
msgstr ""

#. summary(perl-File-pushd)
msgid "change directory temporarily for a limited scope"
msgstr ""

#. summary(perl-Test-Pod)
msgid "check for POD errors in files"
msgstr ""

#. summary(perl-Test-Spelling)
msgid "check for spelling errors in POD files"
msgstr ""

#. summary(perl-CPAN-Mini)
msgid "create a minimal mirror of CPAN"
msgstr ""

#. summary(perl-MIME-EncWords)
msgid "deal with RFC 2047 encoded words (improved)"
msgstr ""

#. summary(perl-Dist-Zilla)
msgid "distribution builder; installer not included!"
msgstr ""

#. summary(perl-PerlIO-via-dynamic)
msgid "dynamic PerlIO layers"
msgstr ""

#. summary(perl-MooseX-Aliases)
msgid "easy aliasing of methods and attributes in Moose"
msgstr ""

#. summary(perl-MooseX-NonMoose)
msgid "easy subclassing of non-Moose classes"
msgstr ""

#. summary(perl-Modern-Perl)
msgid "enable all of the features of Modern Perl with one import"
msgstr ""

#. summary(perl-IPC-Cmd)
msgid "finding and running system commands made easy"
msgstr ""

#. summary(perl-Sub-Exporter-ForMethods)
msgid "helper routines for using Sub::Exporter to build methods"
msgstr ""

#. summary(perl-Module-Depends)
#, fuzzy
msgid "identify the dependencies of a distribution"
msgstr "包中含有意外的版本"

#. summary(perl-MooseX-InsideOut)
msgid "inside-out objects with Moose"
msgstr ""

#. summary(perl-Mail-Sender)
msgid "module for sending mails with attachments through an SMTP server"
msgstr ""

#. summary(perl-Config-MVP)
msgid "multivalue-property package-oriented configuration"
msgstr ""

#. summary(perl-Software-License)
msgid "packages that provide templated software licenses"
msgstr ""

#. description(perl-App-perlbrew)
msgid ""
"perlbrew is a program to automate the building and installation of perl in an easy way. It installs everything to '~/perl5/perlbrew', and requires you to tweak your PATH by including a bashrc/cshrc file it provides. You then can benefit from not having to run 'sudo' commands to install cpan modules because those are installed inside your HOME too. It provides multiple isolated perl environments, and a mechanism for you to switch between them.\n"
"\n"
"For the documentation of perlbrew usage see the perlbrew manpage command on CPAN, or by running 'perlbrew help'. The following documentation features the API of 'App::perlbrew' module, and may not be remotely close to what your want to read."
msgstr ""

#. summary(perl-POE)
msgid "portable multitasking and networking framework for any event loop"
msgstr ""

#. summary(perl-IO-TieCombine)
msgid "produce tied (and other) separate but combined variables"
msgstr ""

#. summary(perl-Class-Method-Modifiers-Fast)
msgid "provides Moose-like method modifiers"
msgstr ""

#. summary(perl-Pod-Eventual)
msgid "read a POD document as a series of trivial events"
msgstr ""

#. summary(perl-File-Path-Tiny)
msgid "recursive versions of mkdir() and rmdir() without as much overhead as Fi[cut]"
msgstr ""

#. summary(perl-UNIVERSAL-require)
msgid "require() modules from a variable"
msgstr ""

#. summary(perl-String-RewritePrefix)
msgid "rewrite strings based on a set of known prefixes"
msgstr ""

#. summary(perl-Package-Stash)
#, fuzzy
msgid "routines for manipulating stashes"
msgstr "等待导航栏应用程序"

#. summary(perl-Context-Preserve)
msgid "run code after a subroutine call, preserving the context the subroutine would have seen if it were the last statement in the caller"
msgstr ""

#. summary(perl-Config-INI)
msgid "simple .ini-file format"
msgstr ""

#. description(perl-Role-Identifiable)
msgid "sorry, no description found"
msgstr ""

#. summary(perl-String-Flogger)
msgid "string munging for loggers"
msgstr ""

#. summary(perl-MooseX-OneArgNew)
msgid "teach ->new to accept single, non-hashref arguments"
msgstr ""

#. summary(perl-Test-InDistDir)
msgid "test environment setup for development with IDE"
msgstr ""

#. description(perl-Data-Hierarchy)
msgid ""
"the Data::Hierarchy manpage provides a simple interface for manipulating inheritable data attached to a hierarchical environment (like a filesystem).\n"
"\n"
"One use of the Data::Hierarchy manpage is to allow an application to annotate paths in a real filesystem in a single compact data structure. However, the hierarchy does not actually need to correspond to an actual filesystem.\n"
"\n"
"Paths in a hierarchy are referred to in a Unix-like syntax; '\"/\"' is the root \"directory\". (You can specify a different separator character than the slash when you construct a Data::Hierarchy object.) With the exception of the root path, paths should never contain trailing slashes. You can associate properties, which are arbitrary name/value pairs, with any path. (Properties cannot contain the undefined value.) By default, properties are inherited by child paths: thus, if you store some data at '/some/path':\n"
"\n"
"    $tree->store('/some/path', {color => 'red'});\n"
"\n"
"you can fetch it again at a '/some/path/below/that':\n"
"\n"
"    print $tree->get('/some/path/below/that')->{'color'};     \n"
"\n"
"On the other hand, properties whose names begin with dots are uninherited, or \"sticky\":\n"
"\n"
"    $tree->store('/some/path', {'.color' => 'blue'});     print $tree->get('/some/path')->{'.color'};            # prints blue     print $tree->get('/some/path/below/that')->{'.color'}; # undefined\n"
"\n"
"Note that you do not need to (and in fact, cannot) explicitly add \"files\" or \"directories\" to the hierarchy; you simply add and delete properties to paths."
msgstr ""

#. description(perl-Fennec-Lite)
msgid ""
"the Fennec manpage does a ton, but it may be hard to adopt it all at once. It also is a large project, and has not yet been fully split into component projects. Fennec::Lite takes a minimalist approach to do for Fennec what Mouse does for Moose.\n"
"\n"
"Fennec::Lite is a single module file with no non-core dependencies. It can easily be used by any project, either directly, or by copying it into your project. The file itself is less than 300 lines of code at the time of this writing, that includes whitespace.\n"
"\n"
"This module does not cover any of the more advanced features such as result capturing or SPEC workflows. This module only covers test grouping and group randomization. You can also use the FENNEC_ITEM variable with a group name or line number to run a specific test group only. Test::Builder is used under the hood for TAP output."
msgstr ""

#. description(perl-MooseX-LazyLogDispatch)
msgid "the Log::Dispatch manpage role for use with your the Moose manpage classes."
msgstr ""

#. description(perl-Object-Signature)
msgid ""
"the Object::Signature manpage is an abstract base class that you can inherit from in order to allow your objects to generate unique cryptographic signatures.\n"
"\n"
"The method used to generate the signature is based on the Storable manpage and the Digest::MD5 manpage. The object is fed to 'Storable::nfreeze' to get a string, which is then passed to the Digest::MD5::md5_hex manpage to get a unique 32 character hexidecimal signature."
msgstr ""

#. description(perl-Rose-Object)
msgid "the Rose::Object manpage is a generic object base class. It provides very little functionality, but a healthy dose of convention."
msgstr ""

#. summary(perl-CPAN-Meta)
msgid "the distribution metadata for a CPAN dist"
msgstr ""

#. summary(perl-strictures)
msgid "turn on strict and make all warnings fatal"
msgstr ""

#. summary(perl-MooseX-Singleton)
msgid "turn your Moose class into a singleton"
msgstr ""

#. summary(perl-CPAN-Uploader)
msgid "upload things to the CPAN"
msgstr ""

#. summary(perl-Class-Base)
msgid "useful base class for deriving other modules"
msgstr ""

#. summary(perl-Mac-PropertyList)
msgid "work with Mac plists at a low level"
msgstr ""

#. summary(perl-MooseX-SetOnce)
msgid "write-once, read-many attributes for Moose"
msgstr ""
